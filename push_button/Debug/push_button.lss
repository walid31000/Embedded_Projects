
push_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000042c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000855  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "BIT_MATH.h"
#include "STD_TYPES.h"

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRB,0);
  76:	a7 e3       	ldi	r26, 0x37	; 55
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e7 e3       	ldi	r30, 0x37	; 55
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	8c 93       	st	X, r24
	SET_BIT(PORTB,0);//activate internal pull up for pinb0
  84:	a8 e3       	ldi	r26, 0x38	; 56
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e8 e3       	ldi	r30, 0x38	; 56
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8c 93       	st	X, r24

	CLR_BIT(PINB,1);
  92:	a6 e3       	ldi	r26, 0x36	; 54
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e3       	ldi	r30, 0x36	; 54
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	8c 93       	st	X, r24
	SET_BIT(PORTB,1);//activate internal pull up for pinb1
  a0:	a8 e3       	ldi	r26, 0x38	; 56
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	8c 93       	st	X, r24
	DDRC=0XFF;
  ae:	e4 e3       	ldi	r30, 0x34	; 52
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	80 83       	st	Z, r24
	//uint8 SSD_ARR[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
    //uint8 counter=0;
    //PORTC=SSD_ARR[counter];
	while(1)
	{
	   uint8 x=GET_BIT(PINB,0);
  b6:	e6 e3       	ldi	r30, 0x36	; 54
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	8a 83       	std	Y+2, r24	; 0x02
	   uint8 y=GET_BIT(PINB,1);
  c0:	e6 e3       	ldi	r30, 0x36	; 54
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 95       	lsr	r24
  c8:	81 70       	andi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
	   if(x==0)
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	88 23       	and	r24, r24
  d0:	29 f4       	brne	.+10     	; 0xdc <main+0x70>
	    {
		  PORTC=0b1;
  d2:	e5 e3       	ldi	r30, 0x35	; 53
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x4a>
	    }

	   else if(y==0)
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	88 23       	and	r24, r24
  e0:	29 f4       	brne	.+10     	; 0xec <main+0x80>
	  	    {
	  		  PORTC=0b10;
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
  ea:	e5 cf       	rjmp	.-54     	; 0xb6 <main+0x4a>
	  	    }
	  	   else
	  	   {
	  		   PORTC=0;
  ec:	e5 e3       	ldi	r30, 0x35	; 53
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
  f2:	e1 cf       	rjmp	.-62     	; 0xb6 <main+0x4a>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
