#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "Err_Type.h"


#include "DIO_interface.h"
#include "DIO_reg.h"




uint8 DIO_SetPinDirection(Dio_Port_t copy_Port,Dio_Pin_t copy_PinNum,Dio_PinDir_t copy_PinDir)
{
	uint8 Local_u8ErrorState=OK;
	if ((copy_PinNum>=DIO_PIN0 )&&  (copy_PinNum>=DIO_PIN7))
	{
		if(copy_PinDir==DIO_PIN_INPUT)
		{
			switch(copy_Port)
			case DIO_PORTA:CLR_BIT(DDRA,copy_PinNum);break;
			case DIO_PORTB:CLR_BIT(DDRB,copy_PinNum);break;
			case DIO_PORTC:CLR_BIT(DDRC,copy_PinNum);break;
			case DIO_PORTD:CLR_BIT(DDRD,copy_PinNum);break;
			default: Local_u8ErrorState=NOK;break;
		}
		else if (copy_PinDir==DIO_PIN_OUTPUT)
		{
			switch(copy_Port)
			case DIO_PORTA:SET_BIT(DDRA,copy_PinNum);break;
			case DIO_PORTB:SET_BIT(DDRB,copy_PinNum);break;
			case DIO_PORTC:SET_BIT(DDRC,copy_PinNum);break;
			case DIO_PORTD:SET_BIT(DDRD,copy_PinNum);break;
			default: Local_u8ErrorState=NOK;break;
		}
		else
		{
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
	}


   return Local_u8ErrorState;

}

uint8 DIO_SetPortDirection(Dio_Port_t copy_Port,uint8 copy_u8Port_Dir)
{

	uint8 Local_u8ErrorState=OK;






	return Local_u8ErrorState;
}


uint8 DIO_SetPinValue(Dio_Port_t copy_Port,Dio_Pin_t copy_PinNum,Dio_PinVal_t copy_Val)
{
	uint8 Local_u8ErrorState=OK;






	return Local_u8ErrorState;

}

uint8 DIO_SetPortValue(Dio_Port_t copy_Port,uint8 copy_u8Port_Val)
{

	uint8 Local_u8ErrorState=OK;






	return Local_u8ErrorState;

}

uint8 DIO_GetPinValue(Dio_Port_t copy_Port,Dio_Pin_t copy_PinNum,Dio_PinVal_t *copy_pVal)
{
	uint8 Local_u8ErrorState=OK;






	return Local_u8ErrorState;


}
