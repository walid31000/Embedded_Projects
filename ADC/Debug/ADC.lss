
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000cb4  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000078c  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9d 04 	call	0x93a	; 0x93a <main>
  64:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include "ADC_reg.h"



void ADC_voidInit (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*Reference selection :AVCC pin   */
	SET_BIT(ADMUX, ADMUX_REFS0);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

#if ADC_u8RESOLUTION ==EIGHT_BITS
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADC_u8RESOLUTION ==TEN_BITS
	CLR_BIT(ADMUX, ADMUX_ADLAR);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	8c 93       	st	X, r24
#else
#error wrong ADC_u8RESOLUTION configuration value
#endif
	/*Activate left adjust result for 8 bits resolution */
	SET_BIT(ADMUX ,ADMUX_ADLAR);
  9e:	a7 e2       	ldi	r26, 0x27	; 39
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e7 e2       	ldi	r30, 0x27	; 39
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	8c 93       	st	X, r24
  /*check on prescaler configuration setting */
	ADCSRA &=PRESCALER_MASK;  /*clear the prescaler bit*/
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PRESCALER;
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	8c 93       	st	X, r24


	/*ADC Enable */
	SET_BIT (ADCSRA,ADCSRA_ADEN);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24

}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_u16GetChannelReading>:
uint16 ADC_u16GetChannelReading (ADC_Channel_t copy_Channel)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
  /*Set the required channel */
	ADCSRA &=CHANNEL_SELECTION_MASK ;/*clear the channel selection bits */
  e8:	a6 e2       	ldi	r26, 0x26	; 38
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e6 e2       	ldi	r30, 0x26	; 38
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	8c 93       	st	X, r24
	ADCSRA |=copy_Channel;
  f6:	a6 e2       	ldi	r26, 0x26	; 38
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	8c 93       	st	X, r24
	/* Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
 106:	a6 e2       	ldi	r26, 0x26	; 38
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24
	/*wait (block) until conversion is completed*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
 114:	e6 e2       	ldi	r30, 0x26	; 38
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 70       	andi	r24, 0x01	; 1
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	a9 f3       	breq	.-22     	; 0x114 <ADC_u16GetChannelReading+0x38>

	/*clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 12a:	a6 e2       	ldi	r26, 0x26	; 38
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e6 e2       	ldi	r30, 0x26	; 38
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	8c 93       	st	X, r24
#if ADC_u8RESOLUTION == EIGHT_BITS
	return (uint16)ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
	return ADC;
 138:	e4 e2       	ldi	r30, 0x24	; 36
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
#endif


}
 142:	0f 90       	pop	r0
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	08 95       	ret

0000014a <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_interface.h"


uint8 DIO_u8SetPinDirection(DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum, DIO_PinDir_t copy_Dir)
{
 14a:	df 93       	push	r29
 14c:	cf 93       	push	r28
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	28 97       	sbiw	r28, 0x08	; 8
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	8a 83       	std	Y+2, r24	; 0x02
 160:	6b 83       	std	Y+3, r22	; 0x03
 162:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState=OK;
 164:	19 82       	std	Y+1, r1	; 0x01
	if ((copy_PinNum>=DIO_PIN0 )&&(copy_PinNum<=DIO_PIN7))
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_u8SetPinDirection+0x24>
 16c:	f4 c0       	rjmp	.+488    	; 0x356 <DIO_u8SetPinDirection+0x20c>
	{
		if(copy_Dir==DIO_PIN_INPUT)
 16e:	8c 81       	ldd	r24, Y+4	; 0x04
 170:	88 23       	and	r24, r24
 172:	09 f0       	breq	.+2      	; 0x176 <DIO_u8SetPinDirection+0x2c>
 174:	77 c0       	rjmp	.+238    	; 0x264 <DIO_u8SetPinDirection+0x11a>
		{
          switch(copy_Port)
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	38 87       	std	Y+8, r19	; 0x08
 17e:	2f 83       	std	Y+7, r18	; 0x07
 180:	8f 81       	ldd	r24, Y+7	; 0x07
 182:	98 85       	ldd	r25, Y+8	; 0x08
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 05       	cpc	r25, r1
 188:	59 f1       	breq	.+86     	; 0x1e0 <DIO_u8SetPinDirection+0x96>
 18a:	2f 81       	ldd	r18, Y+7	; 0x07
 18c:	38 85       	ldd	r19, Y+8	; 0x08
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	31 05       	cpc	r19, r1
 192:	2c f4       	brge	.+10     	; 0x19e <DIO_u8SetPinDirection+0x54>
 194:	8f 81       	ldd	r24, Y+7	; 0x07
 196:	98 85       	ldd	r25, Y+8	; 0x08
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	69 f0       	breq	.+26     	; 0x1b6 <DIO_u8SetPinDirection+0x6c>
 19c:	60 c0       	rjmp	.+192    	; 0x25e <DIO_u8SetPinDirection+0x114>
 19e:	2f 81       	ldd	r18, Y+7	; 0x07
 1a0:	38 85       	ldd	r19, Y+8	; 0x08
 1a2:	22 30       	cpi	r18, 0x02	; 2
 1a4:	31 05       	cpc	r19, r1
 1a6:	89 f1       	breq	.+98     	; 0x20a <DIO_u8SetPinDirection+0xc0>
 1a8:	8f 81       	ldd	r24, Y+7	; 0x07
 1aa:	98 85       	ldd	r25, Y+8	; 0x08
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	91 05       	cpc	r25, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_u8SetPinDirection+0x6a>
 1b2:	40 c0       	rjmp	.+128    	; 0x234 <DIO_u8SetPinDirection+0xea>
 1b4:	54 c0       	rjmp	.+168    	; 0x25e <DIO_u8SetPinDirection+0x114>
          {
          case DIO_PORTA:CLR_BIT(DDRA,copy_PinNum);break;
 1b6:	aa e3       	ldi	r26, 0x3A	; 58
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ea e3       	ldi	r30, 0x3A	; 58
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinDirection+0x8a>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinDirection+0x86>
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	bd c0       	rjmp	.+378    	; 0x35a <DIO_u8SetPinDirection+0x210>
          case DIO_PORTB:CLR_BIT(DDRB,copy_PinNum);break;
 1e0:	a7 e3       	ldi	r26, 0x37	; 55
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e7 e3       	ldi	r30, 0x37	; 55
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_u8SetPinDirection+0xb4>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_u8SetPinDirection+0xb0>
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	8c 93       	st	X, r24
 208:	a8 c0       	rjmp	.+336    	; 0x35a <DIO_u8SetPinDirection+0x210>
          case DIO_PORTC:CLR_BIT(DDRC,copy_PinNum);break;
 20a:	a4 e3       	ldi	r26, 0x34	; 52
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e4 e3       	ldi	r30, 0x34	; 52
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8SetPinDirection+0xde>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8SetPinDirection+0xda>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
 232:	93 c0       	rjmp	.+294    	; 0x35a <DIO_u8SetPinDirection+0x210>
          case DIO_PORTD:CLR_BIT(DDRD,copy_PinNum);break;
 234:	a1 e3       	ldi	r26, 0x31	; 49
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e1 e3       	ldi	r30, 0x31	; 49
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8SetPinDirection+0x108>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8SetPinDirection+0x104>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	8c 93       	st	X, r24
 25c:	7e c0       	rjmp	.+252    	; 0x35a <DIO_u8SetPinDirection+0x210>
          default:Local_u8ErrorState=NOK;break;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	7b c0       	rjmp	.+246    	; 0x35a <DIO_u8SetPinDirection+0x210>
		  }
		}
		else if(copy_Dir==DIO_PIN_OUTPUT)
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	09 f0       	breq	.+2      	; 0x26c <DIO_u8SetPinDirection+0x122>
 26a:	72 c0       	rjmp	.+228    	; 0x350 <DIO_u8SetPinDirection+0x206>

		   {
			  switch(copy_Port)
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	3e 83       	std	Y+6, r19	; 0x06
 274:	2d 83       	std	Y+5, r18	; 0x05
 276:	8d 81       	ldd	r24, Y+5	; 0x05
 278:	9e 81       	ldd	r25, Y+6	; 0x06
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	91 05       	cpc	r25, r1
 27e:	49 f1       	breq	.+82     	; 0x2d2 <DIO_u8SetPinDirection+0x188>
 280:	2d 81       	ldd	r18, Y+5	; 0x05
 282:	3e 81       	ldd	r19, Y+6	; 0x06
 284:	22 30       	cpi	r18, 0x02	; 2
 286:	31 05       	cpc	r19, r1
 288:	2c f4       	brge	.+10     	; 0x294 <DIO_u8SetPinDirection+0x14a>
 28a:	8d 81       	ldd	r24, Y+5	; 0x05
 28c:	9e 81       	ldd	r25, Y+6	; 0x06
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	61 f0       	breq	.+24     	; 0x2aa <DIO_u8SetPinDirection+0x160>
 292:	5b c0       	rjmp	.+182    	; 0x34a <DIO_u8SetPinDirection+0x200>
 294:	2d 81       	ldd	r18, Y+5	; 0x05
 296:	3e 81       	ldd	r19, Y+6	; 0x06
 298:	22 30       	cpi	r18, 0x02	; 2
 29a:	31 05       	cpc	r19, r1
 29c:	71 f1       	breq	.+92     	; 0x2fa <DIO_u8SetPinDirection+0x1b0>
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	91 05       	cpc	r25, r1
 2a6:	e9 f1       	breq	.+122    	; 0x322 <DIO_u8SetPinDirection+0x1d8>
 2a8:	50 c0       	rjmp	.+160    	; 0x34a <DIO_u8SetPinDirection+0x200>
			          {
			          case DIO_PORTA:SET_BIT(DDRA,copy_PinNum);break;
 2aa:	aa e3       	ldi	r26, 0x3A	; 58
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	ea e3       	ldi	r30, 0x3A	; 58
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	48 2f       	mov	r20, r24
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 2e       	mov	r0, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8SetPinDirection+0x17e>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8SetPinDirection+0x17a>
 2cc:	84 2b       	or	r24, r20
 2ce:	8c 93       	st	X, r24
 2d0:	44 c0       	rjmp	.+136    	; 0x35a <DIO_u8SetPinDirection+0x210>
			          case DIO_PORTB:SET_BIT(DDRB,copy_PinNum);break;
 2d2:	a7 e3       	ldi	r26, 0x37	; 55
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	e7 e3       	ldi	r30, 0x37	; 55
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8SetPinDirection+0x1a6>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8SetPinDirection+0x1a2>
 2f4:	84 2b       	or	r24, r20
 2f6:	8c 93       	st	X, r24
 2f8:	30 c0       	rjmp	.+96     	; 0x35a <DIO_u8SetPinDirection+0x210>
			          case DIO_PORTC:SET_BIT(DDRC,copy_PinNum);break;
 2fa:	a4 e3       	ldi	r26, 0x34	; 52
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e4 e3       	ldi	r30, 0x34	; 52
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	48 2f       	mov	r20, r24
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_u8SetPinDirection+0x1ce>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_u8SetPinDirection+0x1ca>
 31c:	84 2b       	or	r24, r20
 31e:	8c 93       	st	X, r24
 320:	1c c0       	rjmp	.+56     	; 0x35a <DIO_u8SetPinDirection+0x210>
			          case DIO_PORTD:SET_BIT(DDRD,copy_PinNum);break;
 322:	a1 e3       	ldi	r26, 0x31	; 49
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e1 e3       	ldi	r30, 0x31	; 49
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8SetPinDirection+0x1f6>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8SetPinDirection+0x1f2>
 344:	84 2b       	or	r24, r20
 346:	8c 93       	st	X, r24
 348:	08 c0       	rjmp	.+16     	; 0x35a <DIO_u8SetPinDirection+0x210>
			          default:Local_u8ErrorState=NOK;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	05 c0       	rjmp	.+10     	; 0x35a <DIO_u8SetPinDirection+0x210>
		              }
		   }
	        else
	       {
		      Local_u8ErrorState=NOK;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_u8SetPinDirection+0x210>
	       }
	  }
	   else
	    {
		Local_u8ErrorState=NOK;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	89 83       	std	Y+1, r24	; 0x01
	    }
	   return Local_u8ErrorState;
 35a:	89 81       	ldd	r24, Y+1	; 0x01
}
 35c:	28 96       	adiw	r28, 0x08	; 8
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	08 95       	ret

0000036e <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(DIO_Port_t copy_Port,uint8 copy_u8PortDir)
{
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	00 d0       	rcall	.+0      	; 0x374 <DIO_u8SetPortDirection+0x6>
 374:	00 d0       	rcall	.+0      	; 0x376 <DIO_u8SetPortDirection+0x8>
 376:	0f 92       	push	r0
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	8a 83       	std	Y+2, r24	; 0x02
 37e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
 380:	19 82       	std	Y+1, r1	; 0x01


		switch(copy_Port)
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	3d 83       	std	Y+5, r19	; 0x05
 38a:	2c 83       	std	Y+4, r18	; 0x04
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	9d 81       	ldd	r25, Y+5	; 0x05
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	d1 f0       	breq	.+52     	; 0x3ca <DIO_u8SetPortDirection+0x5c>
 396:	2c 81       	ldd	r18, Y+4	; 0x04
 398:	3d 81       	ldd	r19, Y+5	; 0x05
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	31 05       	cpc	r19, r1
 39e:	2c f4       	brge	.+10     	; 0x3aa <DIO_u8SetPortDirection+0x3c>
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	9d 81       	ldd	r25, Y+5	; 0x05
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <DIO_u8SetPortDirection+0x52>
 3a8:	1f c0       	rjmp	.+62     	; 0x3e8 <DIO_u8SetPortDirection+0x7a>
 3aa:	2c 81       	ldd	r18, Y+4	; 0x04
 3ac:	3d 81       	ldd	r19, Y+5	; 0x05
 3ae:	22 30       	cpi	r18, 0x02	; 2
 3b0:	31 05       	cpc	r19, r1
 3b2:	81 f0       	breq	.+32     	; 0x3d4 <DIO_u8SetPortDirection+0x66>
 3b4:	8c 81       	ldd	r24, Y+4	; 0x04
 3b6:	9d 81       	ldd	r25, Y+5	; 0x05
 3b8:	83 30       	cpi	r24, 0x03	; 3
 3ba:	91 05       	cpc	r25, r1
 3bc:	81 f0       	breq	.+32     	; 0x3de <DIO_u8SetPortDirection+0x70>
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <DIO_u8SetPortDirection+0x7a>
		{
		  case DIO_PORTA:DDRA=copy_u8PortDir;break;
 3c0:	ea e3       	ldi	r30, 0x3A	; 58
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	80 83       	st	Z, r24
 3c8:	11 c0       	rjmp	.+34     	; 0x3ec <DIO_u8SetPortDirection+0x7e>
		  case DIO_PORTB:DDRB=copy_u8PortDir;break;
 3ca:	e7 e3       	ldi	r30, 0x37	; 55
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	80 83       	st	Z, r24
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <DIO_u8SetPortDirection+0x7e>
		  case DIO_PORTC:DDRC=copy_u8PortDir;break;
 3d4:	e4 e3       	ldi	r30, 0x34	; 52
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	80 83       	st	Z, r24
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <DIO_u8SetPortDirection+0x7e>
		  case DIO_PORTD:DDRD=copy_u8PortDir;break;
 3de:	e1 e3       	ldi	r30, 0x31	; 49
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	80 83       	st	Z, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPortDirection+0x7e>
		  default:Local_u8ErrorState=NOK;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
 3ec:	89 81       	ldd	r24, Y+1	; 0x01

}	
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	cf 91       	pop	r28
 3fa:	df 91       	pop	r29
 3fc:	08 95       	ret

000003fe <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum, DIO_PinVal_t copy_Val)
{
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	28 97       	sbiw	r28, 0x08	; 8
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	8a 83       	std	Y+2, r24	; 0x02
 414:	6b 83       	std	Y+3, r22	; 0x03
 416:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
 418:	19 82       	std	Y+1, r1	; 0x01
	if ((copy_PinNum>=DIO_PIN0 )&&(copy_PinNum<=DIO_PIN7))
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	88 30       	cpi	r24, 0x08	; 8
 41e:	08 f0       	brcs	.+2      	; 0x422 <DIO_u8SetPinValue+0x24>
 420:	f4 c0       	rjmp	.+488    	; 0x60a <DIO_u8SetPinValue+0x20c>
		{
			if(copy_Val==DIO_PIN_LOW)
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	88 23       	and	r24, r24
 426:	09 f0       	breq	.+2      	; 0x42a <DIO_u8SetPinValue+0x2c>
 428:	77 c0       	rjmp	.+238    	; 0x518 <DIO_u8SetPinValue+0x11a>
			{
	          switch(copy_Port)
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	38 87       	std	Y+8, r19	; 0x08
 432:	2f 83       	std	Y+7, r18	; 0x07
 434:	8f 81       	ldd	r24, Y+7	; 0x07
 436:	98 85       	ldd	r25, Y+8	; 0x08
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	91 05       	cpc	r25, r1
 43c:	59 f1       	breq	.+86     	; 0x494 <DIO_u8SetPinValue+0x96>
 43e:	2f 81       	ldd	r18, Y+7	; 0x07
 440:	38 85       	ldd	r19, Y+8	; 0x08
 442:	22 30       	cpi	r18, 0x02	; 2
 444:	31 05       	cpc	r19, r1
 446:	2c f4       	brge	.+10     	; 0x452 <DIO_u8SetPinValue+0x54>
 448:	8f 81       	ldd	r24, Y+7	; 0x07
 44a:	98 85       	ldd	r25, Y+8	; 0x08
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	69 f0       	breq	.+26     	; 0x46a <DIO_u8SetPinValue+0x6c>
 450:	60 c0       	rjmp	.+192    	; 0x512 <DIO_u8SetPinValue+0x114>
 452:	2f 81       	ldd	r18, Y+7	; 0x07
 454:	38 85       	ldd	r19, Y+8	; 0x08
 456:	22 30       	cpi	r18, 0x02	; 2
 458:	31 05       	cpc	r19, r1
 45a:	89 f1       	breq	.+98     	; 0x4be <DIO_u8SetPinValue+0xc0>
 45c:	8f 81       	ldd	r24, Y+7	; 0x07
 45e:	98 85       	ldd	r25, Y+8	; 0x08
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	91 05       	cpc	r25, r1
 464:	09 f4       	brne	.+2      	; 0x468 <DIO_u8SetPinValue+0x6a>
 466:	40 c0       	rjmp	.+128    	; 0x4e8 <DIO_u8SetPinValue+0xea>
 468:	54 c0       	rjmp	.+168    	; 0x512 <DIO_u8SetPinValue+0x114>
	          {
	          case DIO_PORTA:CLR_BIT(PORTA,copy_PinNum);break;
 46a:	ab e3       	ldi	r26, 0x3B	; 59
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	eb e3       	ldi	r30, 0x3B	; 59
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	48 2f       	mov	r20, r24
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 2e       	mov	r0, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_u8SetPinValue+0x8a>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_u8SetPinValue+0x86>
 48c:	80 95       	com	r24
 48e:	84 23       	and	r24, r20
 490:	8c 93       	st	X, r24
 492:	bd c0       	rjmp	.+378    	; 0x60e <DIO_u8SetPinValue+0x210>
	          case DIO_PORTB:CLR_BIT(PORTB,copy_PinNum);break;
 494:	a8 e3       	ldi	r26, 0x38	; 56
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e8 e3       	ldi	r30, 0x38	; 56
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_u8SetPinValue+0xb4>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_u8SetPinValue+0xb0>
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	a8 c0       	rjmp	.+336    	; 0x60e <DIO_u8SetPinValue+0x210>
	          case DIO_PORTC:CLR_BIT(PORTC,copy_PinNum);break;
 4be:	a5 e3       	ldi	r26, 0x35	; 53
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e5 e3       	ldi	r30, 0x35	; 53
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8SetPinValue+0xde>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8SetPinValue+0xda>
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8c 93       	st	X, r24
 4e6:	93 c0       	rjmp	.+294    	; 0x60e <DIO_u8SetPinValue+0x210>
	          case DIO_PORTD:CLR_BIT(PORTD,copy_PinNum);break;
 4e8:	a2 e3       	ldi	r26, 0x32	; 50
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e2 e3       	ldi	r30, 0x32	; 50
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8SetPinValue+0x108>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_u8SetPinValue+0x104>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24
 510:	7e c0       	rjmp	.+252    	; 0x60e <DIO_u8SetPinValue+0x210>
	          default:Local_u8ErrorState=NOK;break;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	7b c0       	rjmp	.+246    	; 0x60e <DIO_u8SetPinValue+0x210>
			 }
		   }
			else if(copy_Val==DIO_PIN_HIGH)
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	09 f0       	breq	.+2      	; 0x520 <DIO_u8SetPinValue+0x122>
 51e:	72 c0       	rjmp	.+228    	; 0x604 <DIO_u8SetPinValue+0x206>

			{
				switch(copy_Port)
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	3e 83       	std	Y+6, r19	; 0x06
 528:	2d 83       	std	Y+5, r18	; 0x05
 52a:	8d 81       	ldd	r24, Y+5	; 0x05
 52c:	9e 81       	ldd	r25, Y+6	; 0x06
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	91 05       	cpc	r25, r1
 532:	49 f1       	breq	.+82     	; 0x586 <DIO_u8SetPinValue+0x188>
 534:	2d 81       	ldd	r18, Y+5	; 0x05
 536:	3e 81       	ldd	r19, Y+6	; 0x06
 538:	22 30       	cpi	r18, 0x02	; 2
 53a:	31 05       	cpc	r19, r1
 53c:	2c f4       	brge	.+10     	; 0x548 <DIO_u8SetPinValue+0x14a>
 53e:	8d 81       	ldd	r24, Y+5	; 0x05
 540:	9e 81       	ldd	r25, Y+6	; 0x06
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	61 f0       	breq	.+24     	; 0x55e <DIO_u8SetPinValue+0x160>
 546:	5b c0       	rjmp	.+182    	; 0x5fe <DIO_u8SetPinValue+0x200>
 548:	2d 81       	ldd	r18, Y+5	; 0x05
 54a:	3e 81       	ldd	r19, Y+6	; 0x06
 54c:	22 30       	cpi	r18, 0x02	; 2
 54e:	31 05       	cpc	r19, r1
 550:	71 f1       	breq	.+92     	; 0x5ae <DIO_u8SetPinValue+0x1b0>
 552:	8d 81       	ldd	r24, Y+5	; 0x05
 554:	9e 81       	ldd	r25, Y+6	; 0x06
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 05       	cpc	r25, r1
 55a:	e9 f1       	breq	.+122    	; 0x5d6 <DIO_u8SetPinValue+0x1d8>
 55c:	50 c0       	rjmp	.+160    	; 0x5fe <DIO_u8SetPinValue+0x200>
				          {
				          case DIO_PORTA:SET_BIT(PORTA,copy_PinNum);break;
 55e:	ab e3       	ldi	r26, 0x3B	; 59
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	eb e3       	ldi	r30, 0x3B	; 59
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_u8SetPinValue+0x17e>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_u8SetPinValue+0x17a>
 580:	84 2b       	or	r24, r20
 582:	8c 93       	st	X, r24
 584:	44 c0       	rjmp	.+136    	; 0x60e <DIO_u8SetPinValue+0x210>
				          case DIO_PORTB:SET_BIT(PORTB,copy_PinNum);break;
 586:	a8 e3       	ldi	r26, 0x38	; 56
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e8 e3       	ldi	r30, 0x38	; 56
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_u8SetPinValue+0x1a6>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_u8SetPinValue+0x1a2>
 5a8:	84 2b       	or	r24, r20
 5aa:	8c 93       	st	X, r24
 5ac:	30 c0       	rjmp	.+96     	; 0x60e <DIO_u8SetPinValue+0x210>
				          case DIO_PORTC:SET_BIT(PORTC,copy_PinNum);break;
 5ae:	a5 e3       	ldi	r26, 0x35	; 53
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e5 e3       	ldi	r30, 0x35	; 53
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8SetPinValue+0x1ce>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_u8SetPinValue+0x1ca>
 5d0:	84 2b       	or	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	1c c0       	rjmp	.+56     	; 0x60e <DIO_u8SetPinValue+0x210>
				          case DIO_PORTD:SET_BIT(PORTD,copy_PinNum);break;
 5d6:	a2 e3       	ldi	r26, 0x32	; 50
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e2 e3       	ldi	r30, 0x32	; 50
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8SetPinValue+0x1f6>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8SetPinValue+0x1f2>
 5f8:	84 2b       	or	r24, r20
 5fa:	8c 93       	st	X, r24
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <DIO_u8SetPinValue+0x210>
				          default:Local_u8ErrorState=NOK;break;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	05 c0       	rjmp	.+10     	; 0x60e <DIO_u8SetPinValue+0x210>
				          }
			}

		  else
		  {
			Local_u8ErrorState=NOK;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	89 83       	std	Y+1, r24	; 0x01
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_u8SetPinValue+0x210>
		  }
		}
		else
		{
			Local_u8ErrorState=NOK;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
 60e:	89 81       	ldd	r24, Y+1	; 0x01


}
 610:	28 96       	adiw	r28, 0x08	; 8
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	de bf       	out	0x3e, r29	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(DIO_Port_t copy_Port,uint8 copy_u8PortVal)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	00 d0       	rcall	.+0      	; 0x628 <DIO_u8SetPortValue+0x6>
 628:	00 d0       	rcall	.+0      	; 0x62a <DIO_u8SetPortValue+0x8>
 62a:	0f 92       	push	r0
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	8a 83       	std	Y+2, r24	; 0x02
 632:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=OK;
 634:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_Port)
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	3d 83       	std	Y+5, r19	; 0x05
 63e:	2c 83       	std	Y+4, r18	; 0x04
 640:	8c 81       	ldd	r24, Y+4	; 0x04
 642:	9d 81       	ldd	r25, Y+5	; 0x05
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	91 05       	cpc	r25, r1
 648:	d1 f0       	breq	.+52     	; 0x67e <DIO_u8SetPortValue+0x5c>
 64a:	2c 81       	ldd	r18, Y+4	; 0x04
 64c:	3d 81       	ldd	r19, Y+5	; 0x05
 64e:	22 30       	cpi	r18, 0x02	; 2
 650:	31 05       	cpc	r19, r1
 652:	2c f4       	brge	.+10     	; 0x65e <DIO_u8SetPortValue+0x3c>
 654:	8c 81       	ldd	r24, Y+4	; 0x04
 656:	9d 81       	ldd	r25, Y+5	; 0x05
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	61 f0       	breq	.+24     	; 0x674 <DIO_u8SetPortValue+0x52>
 65c:	1f c0       	rjmp	.+62     	; 0x69c <DIO_u8SetPortValue+0x7a>
 65e:	2c 81       	ldd	r18, Y+4	; 0x04
 660:	3d 81       	ldd	r19, Y+5	; 0x05
 662:	22 30       	cpi	r18, 0x02	; 2
 664:	31 05       	cpc	r19, r1
 666:	81 f0       	breq	.+32     	; 0x688 <DIO_u8SetPortValue+0x66>
 668:	8c 81       	ldd	r24, Y+4	; 0x04
 66a:	9d 81       	ldd	r25, Y+5	; 0x05
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	91 05       	cpc	r25, r1
 670:	81 f0       	breq	.+32     	; 0x692 <DIO_u8SetPortValue+0x70>
 672:	14 c0       	rjmp	.+40     	; 0x69c <DIO_u8SetPortValue+0x7a>
			{
			  case DIO_PORTA:PORTA=copy_u8PortVal;break;
 674:	eb e3       	ldi	r30, 0x3B	; 59
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	80 83       	st	Z, r24
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <DIO_u8SetPortValue+0x7e>
			  case DIO_PORTB:PORTB=copy_u8PortVal;break;
 67e:	e8 e3       	ldi	r30, 0x38	; 56
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	80 83       	st	Z, r24
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <DIO_u8SetPortValue+0x7e>
			  case DIO_PORTC:PORTC=copy_u8PortVal;break;
 688:	e5 e3       	ldi	r30, 0x35	; 53
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	80 83       	st	Z, r24
 690:	07 c0       	rjmp	.+14     	; 0x6a0 <DIO_u8SetPortValue+0x7e>
			  case DIO_PORTD:PORTD=copy_u8PortVal;break;
 692:	e2 e3       	ldi	r30, 0x32	; 50
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	80 83       	st	Z, r24
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_u8SetPortValue+0x7e>
			  default:Local_u8ErrorState=NOK;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	89 83       	std	Y+1, r24	; 0x01
			}




	return Local_u8ErrorState;
 6a0:	89 81       	ldd	r24, Y+1	; 0x01

}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	cf 91       	pop	r28
 6ae:	df 91       	pop	r29
 6b0:	08 95       	ret

000006b2 <DIO_u8GetPinValue>:



uint8 DIO_u8GetPinValue(DIO_Port_t copy_Port,DIO_Pin_t copy_PinNum, DIO_PinVal_t* copy_pVal)
{
 6b2:	df 93       	push	r29
 6b4:	cf 93       	push	r28
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	27 97       	sbiw	r28, 0x07	; 7
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	f8 94       	cli
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	cd bf       	out	0x3d, r28	; 61
 6c6:	8a 83       	std	Y+2, r24	; 0x02
 6c8:	6b 83       	std	Y+3, r22	; 0x03
 6ca:	5d 83       	std	Y+5, r21	; 0x05
 6cc:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
 6ce:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pVal!=NULL)
 6d0:	8c 81       	ldd	r24, Y+4	; 0x04
 6d2:	9d 81       	ldd	r25, Y+5	; 0x05
 6d4:	00 97       	sbiw	r24, 0x00	; 0
 6d6:	09 f4       	brne	.+2      	; 0x6da <DIO_u8GetPinValue+0x28>
 6d8:	7a c0       	rjmp	.+244    	; 0x7ce <DIO_u8GetPinValue+0x11c>
	{
		if ((copy_PinNum>=DIO_PIN0 )&&(copy_PinNum<=DIO_PIN7))
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <DIO_u8GetPinValue+0x30>
 6e0:	74 c0       	rjmp	.+232    	; 0x7ca <DIO_u8GetPinValue+0x118>
		{


		  switch(copy_Port)
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	3f 83       	std	Y+7, r19	; 0x07
 6ea:	2e 83       	std	Y+6, r18	; 0x06
 6ec:	4e 81       	ldd	r20, Y+6	; 0x06
 6ee:	5f 81       	ldd	r21, Y+7	; 0x07
 6f0:	41 30       	cpi	r20, 0x01	; 1
 6f2:	51 05       	cpc	r21, r1
 6f4:	59 f1       	breq	.+86     	; 0x74c <DIO_u8GetPinValue+0x9a>
 6f6:	8e 81       	ldd	r24, Y+6	; 0x06
 6f8:	9f 81       	ldd	r25, Y+7	; 0x07
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	91 05       	cpc	r25, r1
 6fe:	34 f4       	brge	.+12     	; 0x70c <DIO_u8GetPinValue+0x5a>
 700:	2e 81       	ldd	r18, Y+6	; 0x06
 702:	3f 81       	ldd	r19, Y+7	; 0x07
 704:	21 15       	cp	r18, r1
 706:	31 05       	cpc	r19, r1
 708:	69 f0       	breq	.+26     	; 0x724 <DIO_u8GetPinValue+0x72>
 70a:	5c c0       	rjmp	.+184    	; 0x7c4 <DIO_u8GetPinValue+0x112>
 70c:	4e 81       	ldd	r20, Y+6	; 0x06
 70e:	5f 81       	ldd	r21, Y+7	; 0x07
 710:	42 30       	cpi	r20, 0x02	; 2
 712:	51 05       	cpc	r21, r1
 714:	79 f1       	breq	.+94     	; 0x774 <DIO_u8GetPinValue+0xc2>
 716:	8e 81       	ldd	r24, Y+6	; 0x06
 718:	9f 81       	ldd	r25, Y+7	; 0x07
 71a:	83 30       	cpi	r24, 0x03	; 3
 71c:	91 05       	cpc	r25, r1
 71e:	09 f4       	brne	.+2      	; 0x722 <DIO_u8GetPinValue+0x70>
 720:	3d c0       	rjmp	.+122    	; 0x79c <DIO_u8GetPinValue+0xea>
 722:	50 c0       	rjmp	.+160    	; 0x7c4 <DIO_u8GetPinValue+0x112>
					{
					  case DIO_PORTA:*copy_pVal=GET_BIT(PINA,copy_PinNum);break;
 724:	e9 e3       	ldi	r30, 0x39	; 57
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	28 2f       	mov	r18, r24
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	88 2f       	mov	r24, r24
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	a9 01       	movw	r20, r18
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_u8GetPinValue+0x8a>
 738:	55 95       	asr	r21
 73a:	47 95       	ror	r20
 73c:	8a 95       	dec	r24
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_u8GetPinValue+0x86>
 740:	ca 01       	movw	r24, r20
 742:	81 70       	andi	r24, 0x01	; 1
 744:	ec 81       	ldd	r30, Y+4	; 0x04
 746:	fd 81       	ldd	r31, Y+5	; 0x05
 748:	80 83       	st	Z, r24
 74a:	41 c0       	rjmp	.+130    	; 0x7ce <DIO_u8GetPinValue+0x11c>
					  case DIO_PORTB:*copy_pVal=GET_BIT(PINB,copy_PinNum);break;
 74c:	e6 e3       	ldi	r30, 0x36	; 54
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	88 2f       	mov	r24, r24
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	a9 01       	movw	r20, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_u8GetPinValue+0xb2>
 760:	55 95       	asr	r21
 762:	47 95       	ror	r20
 764:	8a 95       	dec	r24
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_u8GetPinValue+0xae>
 768:	ca 01       	movw	r24, r20
 76a:	81 70       	andi	r24, 0x01	; 1
 76c:	ec 81       	ldd	r30, Y+4	; 0x04
 76e:	fd 81       	ldd	r31, Y+5	; 0x05
 770:	80 83       	st	Z, r24
 772:	2d c0       	rjmp	.+90     	; 0x7ce <DIO_u8GetPinValue+0x11c>
					  case DIO_PORTC:*copy_pVal=GET_BIT(PINC,copy_PinNum);break;
 774:	e3 e3       	ldi	r30, 0x33	; 51
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	88 2f       	mov	r24, r24
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	a9 01       	movw	r20, r18
 786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_u8GetPinValue+0xda>
 788:	55 95       	asr	r21
 78a:	47 95       	ror	r20
 78c:	8a 95       	dec	r24
 78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_u8GetPinValue+0xd6>
 790:	ca 01       	movw	r24, r20
 792:	81 70       	andi	r24, 0x01	; 1
 794:	ec 81       	ldd	r30, Y+4	; 0x04
 796:	fd 81       	ldd	r31, Y+5	; 0x05
 798:	80 83       	st	Z, r24
 79a:	19 c0       	rjmp	.+50     	; 0x7ce <DIO_u8GetPinValue+0x11c>
					  case DIO_PORTD:*copy_pVal=GET_BIT(PIND,copy_PinNum);break;
 79c:	e0 e3       	ldi	r30, 0x30	; 48
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	a9 01       	movw	r20, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_u8GetPinValue+0x102>
 7b0:	55 95       	asr	r21
 7b2:	47 95       	ror	r20
 7b4:	8a 95       	dec	r24
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_u8GetPinValue+0xfe>
 7b8:	ca 01       	movw	r24, r20
 7ba:	81 70       	andi	r24, 0x01	; 1
 7bc:	ec 81       	ldd	r30, Y+4	; 0x04
 7be:	fd 81       	ldd	r31, Y+5	; 0x05
 7c0:	80 83       	st	Z, r24
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <DIO_u8GetPinValue+0x11c>
					  default:Local_u8ErrorState=NOK;
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_u8GetPinValue+0x11c>
	                 }
		}

	     else
	    {
		Local_u8ErrorState=NULL_PTR;
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	89 83       	std	Y+1, r24	; 0x01

	}



	return Local_u8ErrorState;
 7ce:	89 81       	ldd	r24, Y+1	; 0x01

}	
 7d0:	27 96       	adiw	r28, 0x07	; 7
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	f8 94       	cli
 7d6:	de bf       	out	0x3e, r29	; 62
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	cd bf       	out	0x3d, r28	; 61
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	08 95       	ret

000007e2 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(DIO_Port_t copy_Port,DIO_Pin_t copy_PinNum)
{
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	00 d0       	rcall	.+0      	; 0x7e8 <DIO_u8TogglePinValue+0x6>
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <DIO_u8TogglePinValue+0x8>
 7ea:	0f 92       	push	r0
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	8a 83       	std	Y+2, r24	; 0x02
 7f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8EroorState =OK;
 7f4:	19 82       	std	Y+1, r1	; 0x01
	if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	88 30       	cpi	r24, 0x08	; 8
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <DIO_u8TogglePinValue+0x1c>
 7fc:	72 c0       	rjmp	.+228    	; 0x8e2 <__stack+0x83>
	{
		switch(copy_Port)
 7fe:	8a 81       	ldd	r24, Y+2	; 0x02
 800:	28 2f       	mov	r18, r24
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	3d 83       	std	Y+5, r19	; 0x05
 806:	2c 83       	std	Y+4, r18	; 0x04
 808:	8c 81       	ldd	r24, Y+4	; 0x04
 80a:	9d 81       	ldd	r25, Y+5	; 0x05
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	91 05       	cpc	r25, r1
 810:	49 f1       	breq	.+82     	; 0x864 <__stack+0x5>
 812:	2c 81       	ldd	r18, Y+4	; 0x04
 814:	3d 81       	ldd	r19, Y+5	; 0x05
 816:	22 30       	cpi	r18, 0x02	; 2
 818:	31 05       	cpc	r19, r1
 81a:	2c f4       	brge	.+10     	; 0x826 <DIO_u8TogglePinValue+0x44>
 81c:	8c 81       	ldd	r24, Y+4	; 0x04
 81e:	9d 81       	ldd	r25, Y+5	; 0x05
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	61 f0       	breq	.+24     	; 0x83c <DIO_u8TogglePinValue+0x5a>
 824:	5b c0       	rjmp	.+182    	; 0x8dc <__stack+0x7d>
 826:	2c 81       	ldd	r18, Y+4	; 0x04
 828:	3d 81       	ldd	r19, Y+5	; 0x05
 82a:	22 30       	cpi	r18, 0x02	; 2
 82c:	31 05       	cpc	r19, r1
 82e:	71 f1       	breq	.+92     	; 0x88c <__stack+0x2d>
 830:	8c 81       	ldd	r24, Y+4	; 0x04
 832:	9d 81       	ldd	r25, Y+5	; 0x05
 834:	83 30       	cpi	r24, 0x03	; 3
 836:	91 05       	cpc	r25, r1
 838:	e9 f1       	breq	.+122    	; 0x8b4 <__stack+0x55>
 83a:	50 c0       	rjmp	.+160    	; 0x8dc <__stack+0x7d>
						         {
						          case DIO_PORTA:TOG_BIT(PORTA,copy_PinNum);break;
 83c:	ab e3       	ldi	r26, 0x3B	; 59
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	eb e3       	ldi	r30, 0x3B	; 59
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	48 2f       	mov	r20, r24
 848:	8b 81       	ldd	r24, Y+3	; 0x03
 84a:	28 2f       	mov	r18, r24
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	02 2e       	mov	r0, r18
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_u8TogglePinValue+0x78>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	0a 94       	dec	r0
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_u8TogglePinValue+0x74>
 85e:	84 27       	eor	r24, r20
 860:	8c 93       	st	X, r24
 862:	41 c0       	rjmp	.+130    	; 0x8e6 <__stack+0x87>
						          case DIO_PORTB:TOG_BIT(PORTB,copy_PinNum);break;
 864:	a8 e3       	ldi	r26, 0x38	; 56
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e8 e3       	ldi	r30, 0x38	; 56
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	48 2f       	mov	r20, r24
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	02 2e       	mov	r0, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	84 27       	eor	r24, r20
 888:	8c 93       	st	X, r24
 88a:	2d c0       	rjmp	.+90     	; 0x8e6 <__stack+0x87>
						          case DIO_PORTC:TOG_BIT(PORTC,copy_PinNum);break;
 88c:	a5 e3       	ldi	r26, 0x35	; 53
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e5 e3       	ldi	r30, 0x35	; 53
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	48 2f       	mov	r20, r24
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 2e       	mov	r0, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	0a 94       	dec	r0
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	84 27       	eor	r24, r20
 8b0:	8c 93       	st	X, r24
 8b2:	19 c0       	rjmp	.+50     	; 0x8e6 <__stack+0x87>
						          case DIO_PORTD:TOG_BIT(PORTD,copy_PinNum);break;
 8b4:	a2 e3       	ldi	r26, 0x32	; 50
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e2 e3       	ldi	r30, 0x32	; 50
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	48 2f       	mov	r20, r24
 8c0:	8b 81       	ldd	r24, Y+3	; 0x03
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 2e       	mov	r0, r18
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	0a 94       	dec	r0
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	84 27       	eor	r24, r20
 8d8:	8c 93       	st	X, r24
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <__stack+0x87>
						          default:Local_u8EroorState = NOK; break;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	89 83       	std	Y+1, r24	; 0x01
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>


	}
	else
	{
		Local_u8EroorState=NOK;
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8EroorState;
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	cf 91       	pop	r28
 8f4:	df 91       	pop	r29
 8f6:	08 95       	ret

000008f8 <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_reg.h"
#include "PORT_interface.h"

void PORT_voidInit (void)
{
 8f8:	df 93       	push	r29
 8fa:	cf 93       	push	r28
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 900:	ea e3       	ldi	r30, 0x3A	; 58
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	8e e7       	ldi	r24, 0x7E	; 126
 906:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
 908:	e7 e3       	ldi	r30, 0x37	; 55
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 90e:	e4 e3       	ldi	r30, 0x34	; 52
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
 914:	e1 e3       	ldi	r30, 0x31	; 49
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	80 83       	st	Z, r24
	
	
	PORTA=PORTA_INITVAL;
 91c:	eb e3       	ldi	r30, 0x3B	; 59
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	10 82       	st	Z, r1
	PORTB=PORTB_INITVAL;
 922:	e8 e3       	ldi	r30, 0x38	; 56
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	10 82       	st	Z, r1
    PORTC=PORTC_INITVAL;
 928:	e5 e3       	ldi	r30, 0x35	; 53
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	10 82       	st	Z, r1
    PORTD=PORTD_INITVAL;
 92e:	e2 e3       	ldi	r30, 0x32	; 50
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	10 82       	st	Z, r1
	
	
	
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	08 95       	ret

0000093a <main>:
#include "ADC_interface.h"
#include "DIO_interface.h"
#include "PORT_interface.h"

void main(void)
{
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	00 d0       	rcall	.+0      	; 0x940 <main+0x6>
 940:	0f 92       	push	r0
 942:	cd b7       	in	r28, 0x3d	; 61
 944:	de b7       	in	r29, 0x3e	; 62
	uint16 Local_u16DigitalValue;
	uint8 Local_u8LedVal;
	PORT_voidInit();
 946:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <PORT_voidInit>
	ADC_voidInit ();
 94a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>

	while(1)
	{
		 Local_u16DigitalValue= ADC_u16GetChannelReading (ADC0_SINGLE_ENDED);
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_u16GetChannelReading>
 954:	9b 83       	std	Y+3, r25	; 0x03
 956:	8a 83       	std	Y+2, r24	; 0x02
		 Local_u8LedVal= (uint8)(((uint32)Local_u16DigitalValue*255UL)/1023UL);
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	9b 81       	ldd	r25, Y+3	; 0x03
 95c:	cc 01       	movw	r24, r24
 95e:	a0 e0       	ldi	r26, 0x00	; 0
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	2f ef       	ldi	r18, 0xFF	; 255
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	40 e0       	ldi	r20, 0x00	; 0
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	bc 01       	movw	r22, r24
 96c:	cd 01       	movw	r24, r26
 96e:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsi3>
 972:	dc 01       	movw	r26, r24
 974:	cb 01       	movw	r24, r22
 976:	2f ef       	ldi	r18, 0xFF	; 255
 978:	33 e0       	ldi	r19, 0x03	; 3
 97a:	40 e0       	ldi	r20, 0x00	; 0
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	bc 01       	movw	r22, r24
 980:	cd 01       	movw	r24, r26
 982:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__udivmodsi4>
 986:	da 01       	movw	r26, r20
 988:	c9 01       	movw	r24, r18
 98a:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPortValue(DIO_PORTD,Local_u8LedVal);
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	69 81       	ldd	r22, Y+1	; 0x01
 990:	0e 94 11 03 	call	0x622	; 0x622 <DIO_u8SetPortValue>
 994:	dc cf       	rjmp	.-72     	; 0x94e <main+0x14>

00000996 <__mulsi3>:
 996:	62 9f       	mul	r22, r18
 998:	d0 01       	movw	r26, r0
 99a:	73 9f       	mul	r23, r19
 99c:	f0 01       	movw	r30, r0
 99e:	82 9f       	mul	r24, r18
 9a0:	e0 0d       	add	r30, r0
 9a2:	f1 1d       	adc	r31, r1
 9a4:	64 9f       	mul	r22, r20
 9a6:	e0 0d       	add	r30, r0
 9a8:	f1 1d       	adc	r31, r1
 9aa:	92 9f       	mul	r25, r18
 9ac:	f0 0d       	add	r31, r0
 9ae:	83 9f       	mul	r24, r19
 9b0:	f0 0d       	add	r31, r0
 9b2:	74 9f       	mul	r23, r20
 9b4:	f0 0d       	add	r31, r0
 9b6:	65 9f       	mul	r22, r21
 9b8:	f0 0d       	add	r31, r0
 9ba:	99 27       	eor	r25, r25
 9bc:	72 9f       	mul	r23, r18
 9be:	b0 0d       	add	r27, r0
 9c0:	e1 1d       	adc	r30, r1
 9c2:	f9 1f       	adc	r31, r25
 9c4:	63 9f       	mul	r22, r19
 9c6:	b0 0d       	add	r27, r0
 9c8:	e1 1d       	adc	r30, r1
 9ca:	f9 1f       	adc	r31, r25
 9cc:	bd 01       	movw	r22, r26
 9ce:	cf 01       	movw	r24, r30
 9d0:	11 24       	eor	r1, r1
 9d2:	08 95       	ret

000009d4 <__udivmodsi4>:
 9d4:	a1 e2       	ldi	r26, 0x21	; 33
 9d6:	1a 2e       	mov	r1, r26
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	fd 01       	movw	r30, r26
 9de:	0d c0       	rjmp	.+26     	; 0x9fa <__udivmodsi4_ep>

000009e0 <__udivmodsi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	ee 1f       	adc	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	a2 17       	cp	r26, r18
 9ea:	b3 07       	cpc	r27, r19
 9ec:	e4 07       	cpc	r30, r20
 9ee:	f5 07       	cpc	r31, r21
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__udivmodsi4_ep>
 9f2:	a2 1b       	sub	r26, r18
 9f4:	b3 0b       	sbc	r27, r19
 9f6:	e4 0b       	sbc	r30, r20
 9f8:	f5 0b       	sbc	r31, r21

000009fa <__udivmodsi4_ep>:
 9fa:	66 1f       	adc	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	1a 94       	dec	r1
 a04:	69 f7       	brne	.-38     	; 0x9e0 <__udivmodsi4_loop>
 a06:	60 95       	com	r22
 a08:	70 95       	com	r23
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	9b 01       	movw	r18, r22
 a10:	ac 01       	movw	r20, r24
 a12:	bd 01       	movw	r22, r26
 a14:	cf 01       	movw	r24, r30
 a16:	08 95       	ret

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
