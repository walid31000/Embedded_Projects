
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000d5a  2**0
                  ALLOC
  2 .stab         00001134  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007ce  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_1>
   8:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_2>
   c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 06 	call	0xc84	; 0xc84 <main>
  74:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_interface.h"


uint8 DIO_u8SetPinDirection (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum,DIO_PinDir_t copy_Dir)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
  96:	19 82       	std	Y+1, r1	; 0x01
	if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinDirection+0x24>
  9e:	f3 c0       	rjmp	.+486    	; 0x286 <DIO_u8SetPinDirection+0x20a>
	{
		if(copy_Dir==DIO_PIN_INPUT)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinDirection+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinDirection+0x11a>
		{
			switch (copy_Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinDirection+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinDirection+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinDirection+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinDirection+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinDirection+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinDirection+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinDirection+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_PinNum);break;
  e8:	aa e3       	ldi	r26, 0x3A	; 58
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e3       	ldi	r30, 0x3A	; 58
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinDirection+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinDirection+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	ba c0       	rjmp	.+372    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTB:CLR_BIT(DDRB,copy_PinNum);break;
 112:	a7 e3       	ldi	r26, 0x37	; 55
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinDirection+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a5 c0       	rjmp	.+330    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTC:CLR_BIT(DDRC,copy_PinNum);break;
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	90 c0       	rjmp	.+288    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTD:CLR_BIT(DDRD,copy_PinNum);break;
 166:	a1 e3       	ldi	r26, 0x31	; 49
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e1 e3       	ldi	r30, 0x31	; 49
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinDirection+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinDirection+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7b c0       	rjmp	.+246    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			default :Local_u8ErrorState=NOK;break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	78 c0       	rjmp	.+240    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			}

		}
		else if(copy_Dir==DIO_PIN_OUTPUT)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinDirection+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinDirection+0x206>
		{
			switch (copy_Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinDirection+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinDirection+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinDirection+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinDirection+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinDirection+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinDirection+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_PinNum);break;
 1dc:	aa e3       	ldi	r26, 0x3A	; 58
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	ea e3       	ldi	r30, 0x3A	; 58
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinDirection+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinDirection+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	41 c0       	rjmp	.+130    	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTB:SET_BIT(DDRB,copy_PinNum);break;
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinDirection+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinDirection+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	2d c0       	rjmp	.+90     	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTC:SET_BIT(DDRC,copy_PinNum);break;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinDirection+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinDirection+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	19 c0       	rjmp	.+50     	; 0x286 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTD:SET_BIT(DDRD,copy_PinNum);break;
 254:	a1 e3       	ldi	r26, 0x31	; 49
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinDirection+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinDirection+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	05 c0       	rjmp	.+10     	; 0x286 <DIO_u8SetPinDirection+0x20a>
			default :Local_u8ErrorState=NOK;break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorState;
 286:	89 81       	ldd	r24, Y+1	; 0x01


}	
 288:	28 96       	adiw	r28, 0x08	; 8
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	08 95       	ret

0000029a <DIO_SetPortDirection>:
uint8 DIO_SetPortDirection (DIO_Port_t copy_Port ,uint8 copy_u8Port_Dir )
{
 29a:	df 93       	push	r29
 29c:	cf 93       	push	r28
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <DIO_SetPortDirection+0x6>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <DIO_SetPortDirection+0x8>
 2a2:	0f 92       	push	r0
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	8a 83       	std	Y+2, r24	; 0x02
 2aa:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState= OK;
 2ac:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_Port)
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	3d 83       	std	Y+5, r19	; 0x05
 2b6:	2c 83       	std	Y+4, r18	; 0x04
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	9d 81       	ldd	r25, Y+5	; 0x05
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	91 05       	cpc	r25, r1
 2c0:	d1 f0       	breq	.+52     	; 0x2f6 <DIO_SetPortDirection+0x5c>
 2c2:	2c 81       	ldd	r18, Y+4	; 0x04
 2c4:	3d 81       	ldd	r19, Y+5	; 0x05
 2c6:	22 30       	cpi	r18, 0x02	; 2
 2c8:	31 05       	cpc	r19, r1
 2ca:	2c f4       	brge	.+10     	; 0x2d6 <DIO_SetPortDirection+0x3c>
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	9d 81       	ldd	r25, Y+5	; 0x05
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	61 f0       	breq	.+24     	; 0x2ec <DIO_SetPortDirection+0x52>
 2d4:	1f c0       	rjmp	.+62     	; 0x314 <DIO_SetPortDirection+0x7a>
 2d6:	2c 81       	ldd	r18, Y+4	; 0x04
 2d8:	3d 81       	ldd	r19, Y+5	; 0x05
 2da:	22 30       	cpi	r18, 0x02	; 2
 2dc:	31 05       	cpc	r19, r1
 2de:	81 f0       	breq	.+32     	; 0x300 <DIO_SetPortDirection+0x66>
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	9d 81       	ldd	r25, Y+5	; 0x05
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	91 05       	cpc	r25, r1
 2e8:	81 f0       	breq	.+32     	; 0x30a <DIO_SetPortDirection+0x70>
 2ea:	14 c0       	rjmp	.+40     	; 0x314 <DIO_SetPortDirection+0x7a>
	{
	case DIO_PORTA:DDRA=copy_u8Port_Dir;break;
 2ec:	ea e3       	ldi	r30, 0x3A	; 58
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	80 83       	st	Z, r24
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <DIO_SetPortDirection+0x7e>
	case DIO_PORTB:DDRB=copy_u8Port_Dir;break;
 2f6:	e7 e3       	ldi	r30, 0x37	; 55
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	80 83       	st	Z, r24
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <DIO_SetPortDirection+0x7e>
	case DIO_PORTC:DDRC=copy_u8Port_Dir;break;
 300:	e4 e3       	ldi	r30, 0x34	; 52
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	80 83       	st	Z, r24
 308:	07 c0       	rjmp	.+14     	; 0x318 <DIO_SetPortDirection+0x7e>
	case DIO_PORTD:DDRD=copy_u8Port_Dir;break;
 30a:	e1 e3       	ldi	r30, 0x31	; 49
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	80 83       	st	Z, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPortDirection+0x7e>
	default :Local_u8ErrorState=NOK;break;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 318:	89 81       	ldd	r24, Y+1	; 0x01
}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	08 95       	ret

0000032a <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum,DIO_PinVal_t  copy_Val)
{
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	28 97       	sbiw	r28, 0x08	; 8
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	8a 83       	std	Y+2, r24	; 0x02
 340:	6b 83       	std	Y+3, r22	; 0x03
 342:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
 344:	19 82       	std	Y+1, r1	; 0x01
	if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	88 30       	cpi	r24, 0x08	; 8
 34a:	08 f0       	brcs	.+2      	; 0x34e <DIO_u8SetPinValue+0x24>
 34c:	f3 c0       	rjmp	.+486    	; 0x534 <DIO_u8SetPinValue+0x20a>
	{
		if(copy_Val==DIO_PIN_LOW)
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	88 23       	and	r24, r24
 352:	09 f0       	breq	.+2      	; 0x356 <DIO_u8SetPinValue+0x2c>
 354:	77 c0       	rjmp	.+238    	; 0x444 <DIO_u8SetPinValue+0x11a>
		{
			switch (copy_Port)
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	38 87       	std	Y+8, r19	; 0x08
 35e:	2f 83       	std	Y+7, r18	; 0x07
 360:	8f 81       	ldd	r24, Y+7	; 0x07
 362:	98 85       	ldd	r25, Y+8	; 0x08
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	91 05       	cpc	r25, r1
 368:	59 f1       	breq	.+86     	; 0x3c0 <DIO_u8SetPinValue+0x96>
 36a:	2f 81       	ldd	r18, Y+7	; 0x07
 36c:	38 85       	ldd	r19, Y+8	; 0x08
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	2c f4       	brge	.+10     	; 0x37e <DIO_u8SetPinValue+0x54>
 374:	8f 81       	ldd	r24, Y+7	; 0x07
 376:	98 85       	ldd	r25, Y+8	; 0x08
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	69 f0       	breq	.+26     	; 0x396 <DIO_u8SetPinValue+0x6c>
 37c:	60 c0       	rjmp	.+192    	; 0x43e <DIO_u8SetPinValue+0x114>
 37e:	2f 81       	ldd	r18, Y+7	; 0x07
 380:	38 85       	ldd	r19, Y+8	; 0x08
 382:	22 30       	cpi	r18, 0x02	; 2
 384:	31 05       	cpc	r19, r1
 386:	89 f1       	breq	.+98     	; 0x3ea <DIO_u8SetPinValue+0xc0>
 388:	8f 81       	ldd	r24, Y+7	; 0x07
 38a:	98 85       	ldd	r25, Y+8	; 0x08
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	91 05       	cpc	r25, r1
 390:	09 f4       	brne	.+2      	; 0x394 <DIO_u8SetPinValue+0x6a>
 392:	40 c0       	rjmp	.+128    	; 0x414 <DIO_u8SetPinValue+0xea>
 394:	54 c0       	rjmp	.+168    	; 0x43e <DIO_u8SetPinValue+0x114>
			{
			case DIO_PORTA:CLR_BIT(PORTA,copy_PinNum);break;
 396:	ab e3       	ldi	r26, 0x3B	; 59
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	eb e3       	ldi	r30, 0x3B	; 59
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8SetPinValue+0x8a>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8SetPinValue+0x86>
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	8c 93       	st	X, r24
 3be:	ba c0       	rjmp	.+372    	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTB:CLR_BIT(PORTB,copy_PinNum);break;
 3c0:	a8 e3       	ldi	r26, 0x38	; 56
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e8 e3       	ldi	r30, 0x38	; 56
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_u8SetPinValue+0xb4>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_u8SetPinValue+0xb0>
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	a5 c0       	rjmp	.+330    	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTC:CLR_BIT(PORTC,copy_PinNum);break;
 3ea:	a5 e3       	ldi	r26, 0x35	; 53
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e5 e3       	ldi	r30, 0x35	; 53
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_u8SetPinValue+0xde>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_u8SetPinValue+0xda>
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	8c 93       	st	X, r24
 412:	90 c0       	rjmp	.+288    	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTD:CLR_BIT(PORTD,copy_PinNum);break;
 414:	a2 e3       	ldi	r26, 0x32	; 50
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e2 e3       	ldi	r30, 0x32	; 50
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8SetPinValue+0x108>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8SetPinValue+0x104>
 436:	80 95       	com	r24
 438:	84 23       	and	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	7b c0       	rjmp	.+246    	; 0x534 <DIO_u8SetPinValue+0x20a>
			default :Local_u8ErrorState=NOK;break;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	78 c0       	rjmp	.+240    	; 0x534 <DIO_u8SetPinValue+0x20a>
			}


		}
		else if(copy_Val==DIO_PIN_HIGH)
 444:	8c 81       	ldd	r24, Y+4	; 0x04
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	09 f0       	breq	.+2      	; 0x44c <DIO_u8SetPinValue+0x122>
 44a:	72 c0       	rjmp	.+228    	; 0x530 <DIO_u8SetPinValue+0x206>
		{
			switch (copy_Port)
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	3e 83       	std	Y+6, r19	; 0x06
 454:	2d 83       	std	Y+5, r18	; 0x05
 456:	8d 81       	ldd	r24, Y+5	; 0x05
 458:	9e 81       	ldd	r25, Y+6	; 0x06
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	91 05       	cpc	r25, r1
 45e:	49 f1       	breq	.+82     	; 0x4b2 <DIO_u8SetPinValue+0x188>
 460:	2d 81       	ldd	r18, Y+5	; 0x05
 462:	3e 81       	ldd	r19, Y+6	; 0x06
 464:	22 30       	cpi	r18, 0x02	; 2
 466:	31 05       	cpc	r19, r1
 468:	2c f4       	brge	.+10     	; 0x474 <DIO_u8SetPinValue+0x14a>
 46a:	8d 81       	ldd	r24, Y+5	; 0x05
 46c:	9e 81       	ldd	r25, Y+6	; 0x06
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	61 f0       	breq	.+24     	; 0x48a <DIO_u8SetPinValue+0x160>
 472:	5b c0       	rjmp	.+182    	; 0x52a <DIO_u8SetPinValue+0x200>
 474:	2d 81       	ldd	r18, Y+5	; 0x05
 476:	3e 81       	ldd	r19, Y+6	; 0x06
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	71 f1       	breq	.+92     	; 0x4da <DIO_u8SetPinValue+0x1b0>
 47e:	8d 81       	ldd	r24, Y+5	; 0x05
 480:	9e 81       	ldd	r25, Y+6	; 0x06
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	91 05       	cpc	r25, r1
 486:	e9 f1       	breq	.+122    	; 0x502 <DIO_u8SetPinValue+0x1d8>
 488:	50 c0       	rjmp	.+160    	; 0x52a <DIO_u8SetPinValue+0x200>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_PinNum);break;
 48a:	ab e3       	ldi	r26, 0x3B	; 59
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	eb e3       	ldi	r30, 0x3B	; 59
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	48 2f       	mov	r20, r24
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_u8SetPinValue+0x17e>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_u8SetPinValue+0x17a>
 4ac:	84 2b       	or	r24, r20
 4ae:	8c 93       	st	X, r24
 4b0:	41 c0       	rjmp	.+130    	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTB:SET_BIT(PORTB,copy_PinNum);break;
 4b2:	a8 e3       	ldi	r26, 0x38	; 56
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e8 e3       	ldi	r30, 0x38	; 56
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	48 2f       	mov	r20, r24
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 2e       	mov	r0, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_u8SetPinValue+0x1a6>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_u8SetPinValue+0x1a2>
 4d4:	84 2b       	or	r24, r20
 4d6:	8c 93       	st	X, r24
 4d8:	2d c0       	rjmp	.+90     	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTC:SET_BIT(PORTC,copy_PinNum);break;
 4da:	a5 e3       	ldi	r26, 0x35	; 53
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e5 e3       	ldi	r30, 0x35	; 53
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_u8SetPinValue+0x1ce>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_u8SetPinValue+0x1ca>
 4fc:	84 2b       	or	r24, r20
 4fe:	8c 93       	st	X, r24
 500:	19 c0       	rjmp	.+50     	; 0x534 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTD:SET_BIT(PORTD,copy_PinNum);break;
 502:	a2 e3       	ldi	r26, 0x32	; 50
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e2 e3       	ldi	r30, 0x32	; 50
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8SetPinValue+0x1f6>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8SetPinValue+0x1f2>
 524:	84 2b       	or	r24, r20
 526:	8c 93       	st	X, r24
 528:	05 c0       	rjmp	.+10     	; 0x534 <DIO_u8SetPinValue+0x20a>
			default :Local_u8ErrorState=NOK;break;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_u8SetPinValue+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
		}
	}


	return Local_u8ErrorState;
 534:	89 81       	ldd	r24, Y+1	; 0x01

}
 536:	28 96       	adiw	r28, 0x08	; 8
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <DIO_SetPortValue>:

uint8 DIO_SetPortValue (DIO_Port_t copy_Port ,uint8 copy_u8PortVal )
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <DIO_SetPortValue+0x6>
 54e:	00 d0       	rcall	.+0      	; 0x550 <DIO_SetPortValue+0x8>
 550:	0f 92       	push	r0
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	8a 83       	std	Y+2, r24	; 0x02
 558:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=OK;
 55a:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_Port)
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	3d 83       	std	Y+5, r19	; 0x05
 564:	2c 83       	std	Y+4, r18	; 0x04
 566:	8c 81       	ldd	r24, Y+4	; 0x04
 568:	9d 81       	ldd	r25, Y+5	; 0x05
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	d1 f0       	breq	.+52     	; 0x5a4 <DIO_SetPortValue+0x5c>
 570:	2c 81       	ldd	r18, Y+4	; 0x04
 572:	3d 81       	ldd	r19, Y+5	; 0x05
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	2c f4       	brge	.+10     	; 0x584 <DIO_SetPortValue+0x3c>
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	9d 81       	ldd	r25, Y+5	; 0x05
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	61 f0       	breq	.+24     	; 0x59a <DIO_SetPortValue+0x52>
 582:	1f c0       	rjmp	.+62     	; 0x5c2 <DIO_SetPortValue+0x7a>
 584:	2c 81       	ldd	r18, Y+4	; 0x04
 586:	3d 81       	ldd	r19, Y+5	; 0x05
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	81 f0       	breq	.+32     	; 0x5ae <DIO_SetPortValue+0x66>
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	9d 81       	ldd	r25, Y+5	; 0x05
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	91 05       	cpc	r25, r1
 596:	81 f0       	breq	.+32     	; 0x5b8 <DIO_SetPortValue+0x70>
 598:	14 c0       	rjmp	.+40     	; 0x5c2 <DIO_SetPortValue+0x7a>
	{
	case DIO_PORTA:PORTA=copy_u8PortVal;break;
 59a:	eb e3       	ldi	r30, 0x3B	; 59
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	80 83       	st	Z, r24
 5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <DIO_SetPortValue+0x7e>
	case DIO_PORTB:PORTB=copy_u8PortVal;break;
 5a4:	e8 e3       	ldi	r30, 0x38	; 56
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	80 83       	st	Z, r24
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <DIO_SetPortValue+0x7e>
	case DIO_PORTC:PORTC=copy_u8PortVal;break;
 5ae:	e5 e3       	ldi	r30, 0x35	; 53
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	80 83       	st	Z, r24
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <DIO_SetPortValue+0x7e>
	case DIO_PORTD:PORTD=copy_u8PortVal;break;
 5b8:	e2 e3       	ldi	r30, 0x32	; 50
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	80 83       	st	Z, r24
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_SetPortValue+0x7e>
	default :Local_u8ErrorState=NOK;break;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
 5c6:	89 81       	ldd	r24, Y+1	; 0x01

}	
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	08 95       	ret

000005d8 <DIO_u8GetPinValue>:
uint8  DIO_u8GetPinValue (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum, DIO_PinVal_t*  copy_pVal)
{
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	27 97       	sbiw	r28, 0x07	; 7
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	8a 83       	std	Y+2, r24	; 0x02
 5ee:	6b 83       	std	Y+3, r22	; 0x03
 5f0:	5d 83       	std	Y+5, r21	; 0x05
 5f2:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
 5f4:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pVal!=NULL)
 5f6:	8c 81       	ldd	r24, Y+4	; 0x04
 5f8:	9d 81       	ldd	r25, Y+5	; 0x05
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	09 f4       	brne	.+2      	; 0x600 <DIO_u8GetPinValue+0x28>
 5fe:	7b c0       	rjmp	.+246    	; 0x6f6 <DIO_u8GetPinValue+0x11e>
	{
		if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 30       	cpi	r24, 0x08	; 8
 604:	08 f0       	brcs	.+2      	; 0x608 <DIO_u8GetPinValue+0x30>
 606:	74 c0       	rjmp	.+232    	; 0x6f0 <DIO_u8GetPinValue+0x118>
		{
			switch(copy_Port)
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	3f 83       	std	Y+7, r19	; 0x07
 610:	2e 83       	std	Y+6, r18	; 0x06
 612:	4e 81       	ldd	r20, Y+6	; 0x06
 614:	5f 81       	ldd	r21, Y+7	; 0x07
 616:	41 30       	cpi	r20, 0x01	; 1
 618:	51 05       	cpc	r21, r1
 61a:	59 f1       	breq	.+86     	; 0x672 <DIO_u8GetPinValue+0x9a>
 61c:	8e 81       	ldd	r24, Y+6	; 0x06
 61e:	9f 81       	ldd	r25, Y+7	; 0x07
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	91 05       	cpc	r25, r1
 624:	34 f4       	brge	.+12     	; 0x632 <DIO_u8GetPinValue+0x5a>
 626:	2e 81       	ldd	r18, Y+6	; 0x06
 628:	3f 81       	ldd	r19, Y+7	; 0x07
 62a:	21 15       	cp	r18, r1
 62c:	31 05       	cpc	r19, r1
 62e:	69 f0       	breq	.+26     	; 0x64a <DIO_u8GetPinValue+0x72>
 630:	5c c0       	rjmp	.+184    	; 0x6ea <DIO_u8GetPinValue+0x112>
 632:	4e 81       	ldd	r20, Y+6	; 0x06
 634:	5f 81       	ldd	r21, Y+7	; 0x07
 636:	42 30       	cpi	r20, 0x02	; 2
 638:	51 05       	cpc	r21, r1
 63a:	79 f1       	breq	.+94     	; 0x69a <DIO_u8GetPinValue+0xc2>
 63c:	8e 81       	ldd	r24, Y+6	; 0x06
 63e:	9f 81       	ldd	r25, Y+7	; 0x07
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	91 05       	cpc	r25, r1
 644:	09 f4       	brne	.+2      	; 0x648 <DIO_u8GetPinValue+0x70>
 646:	3d c0       	rjmp	.+122    	; 0x6c2 <DIO_u8GetPinValue+0xea>
 648:	50 c0       	rjmp	.+160    	; 0x6ea <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA:*copy_pVal=GET_BIT(PINA,copy_PinNum);break;
 64a:	e9 e3       	ldi	r30, 0x39	; 57
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	88 2f       	mov	r24, r24
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8GetPinValue+0x8a>
 65e:	55 95       	asr	r21
 660:	47 95       	ror	r20
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_u8GetPinValue+0x86>
 666:	ca 01       	movw	r24, r20
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	ec 81       	ldd	r30, Y+4	; 0x04
 66c:	fd 81       	ldd	r31, Y+5	; 0x05
 66e:	80 83       	st	Z, r24
 670:	44 c0       	rjmp	.+136    	; 0x6fa <DIO_u8GetPinValue+0x122>
			case DIO_PORTB:*copy_pVal=GET_BIT(PINB,copy_PinNum);break;
 672:	e6 e3       	ldi	r30, 0x36	; 54
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	a9 01       	movw	r20, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8GetPinValue+0xb2>
 686:	55 95       	asr	r21
 688:	47 95       	ror	r20
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_u8GetPinValue+0xae>
 68e:	ca 01       	movw	r24, r20
 690:	81 70       	andi	r24, 0x01	; 1
 692:	ec 81       	ldd	r30, Y+4	; 0x04
 694:	fd 81       	ldd	r31, Y+5	; 0x05
 696:	80 83       	st	Z, r24
 698:	30 c0       	rjmp	.+96     	; 0x6fa <DIO_u8GetPinValue+0x122>
			case DIO_PORTC:*copy_pVal=GET_BIT(PINC,copy_PinNum);break;
 69a:	e3 e3       	ldi	r30, 0x33	; 51
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	a9 01       	movw	r20, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_u8GetPinValue+0xda>
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_u8GetPinValue+0xd6>
 6b6:	ca 01       	movw	r24, r20
 6b8:	81 70       	andi	r24, 0x01	; 1
 6ba:	ec 81       	ldd	r30, Y+4	; 0x04
 6bc:	fd 81       	ldd	r31, Y+5	; 0x05
 6be:	80 83       	st	Z, r24
 6c0:	1c c0       	rjmp	.+56     	; 0x6fa <DIO_u8GetPinValue+0x122>
			case DIO_PORTD:*copy_pVal=GET_BIT(PIND,copy_PinNum);break;
 6c2:	e0 e3       	ldi	r30, 0x30	; 48
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_u8GetPinValue+0x102>
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_u8GetPinValue+0xfe>
 6de:	ca 01       	movw	r24, r20
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	ec 81       	ldd	r30, Y+4	; 0x04
 6e4:	fd 81       	ldd	r31, Y+5	; 0x05
 6e6:	80 83       	st	Z, r24
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <DIO_u8GetPinValue+0x122>
			default :Local_u8ErrorState=NOK;break;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	89 83       	std	Y+1, r24	; 0x01
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <DIO_u8GetPinValue+0x122>
			}

		}
		else
		{
			Local_u8ErrorState=NOK;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState=NULL_PTR;
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6fa:	89 81       	ldd	r24, Y+1	; 0x01

}	
 6fc:	27 96       	adiw	r28, 0x07	; 7
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <EXTI_voidInit>:
#include "EXTI_cfg.h"
#include "EXTI_reg.h"

static void (*EXTI_pfFuncPtr[3])(void)={NULL,NULL,NULL};
void EXTI_voidInit (void)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62

#elif EXTI_u8INT0_TRIG_SRC==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_u8INT0_TRIG_SRC==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
 716:	a5 e5       	ldi	r26, 0x55	; 85
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	e5 e5       	ldi	r30, 0x55	; 85
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	8e 7f       	andi	r24, 0xFE	; 254
 722:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
 724:	a5 e5       	ldi	r26, 0x55	; 85
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	e5 e5       	ldi	r30, 0x55	; 85
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	82 60       	ori	r24, 0x02	; 2
 730:	8c 93       	st	X, r24

#elif EXTI_u8INT1_TRIG_SRC==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif EXTI_u8INT1_TRIG_SRC==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
 732:	a5 e5       	ldi	r26, 0x55	; 85
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	e5 e5       	ldi	r30, 0x55	; 85
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	8b 7f       	andi	r24, 0xFB	; 251
 73e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
 740:	a5 e5       	ldi	r26, 0x55	; 85
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	e5 e5       	ldi	r30, 0x55	; 85
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 60       	ori	r24, 0x08	; 8
 74c:	8c 93       	st	X, r24
#error "Wrong EXTI_u8INT1_TRIG_SRC configuration option "
#endif


#if EXTI_u8INT2_TRIG_SRC==FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
 74e:	a4 e5       	ldi	r26, 0x54	; 84
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	e4 e5       	ldi	r30, 0x54	; 84
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	8f 7b       	andi	r24, 0xBF	; 191
 75a:	8c 93       	st	X, r24
#endif

#if EXTI_u8INT1_STATE==DISABLED
	CLR_BIT (GICR,GICR_INT0);
#elif EXTI_u8INT0_STATE ==ENABLED
	SET_BIT(GICR,GICR_INT0);
 75c:	ab e5       	ldi	r26, 0x5B	; 91
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	eb e5       	ldi	r30, 0x5B	; 91
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	80 64       	ori	r24, 0x40	; 64
 768:	8c 93       	st	X, r24
#endif

#if EXTI_u8INT0_STATE==DISABLED
	CLR_BIT (GICR,GICR_INT0);
#elif EXTI_u8INT0_STATE ==ENABLED
	SET_BIT(GICR,GICR_INT0);
 76a:	ab e5       	ldi	r26, 0x5B	; 91
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	eb e5       	ldi	r30, 0x5B	; 91
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	80 64       	ori	r24, 0x40	; 64
 776:	8c 93       	st	X, r24
#endif

#if EXTI_u8INT1_STATE==DISABLED
	CLR_BIT (GICR,GICR_INT1);
#elif EXTI_u8INT0_STATE ==ENABLED
	SET_BIT(GICR,GICR_INT1);
 778:	ab e5       	ldi	r26, 0x5B	; 91
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	eb e5       	ldi	r30, 0x5B	; 91
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	80 68       	ori	r24, 0x80	; 128
 784:	8c 93       	st	X, r24
#error "Wrong EXTI_u8INT1_STATE configuration option"
#endif


#if EXTI_u8INT2_STATE==DISABLED
	CLR_BIT (GICR,GICR_INT2);
 786:	ab e5       	ldi	r26, 0x5B	; 91
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	eb e5       	ldi	r30, 0x5B	; 91
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	8f 7d       	andi	r24, 0xDF	; 223
 792:	8c 93       	st	X, r24
#error "Wrong EXTI_u8INT2_STATE configuration option"
#endif



}
 794:	cf 91       	pop	r28
 796:	df 91       	pop	r29
 798:	08 95       	ret

0000079a <EXTI_u8SetSenseCtrl>:

uint8 EXTI_u8SetSenseCtrl(EXTI_IntNum_t  copy_IntNum,uint8  copy_u8SenseCtrl)
{
 79a:	df 93       	push	r29
 79c:	cf 93       	push	r28
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	29 97       	sbiw	r28, 0x09	; 9
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	8a 83       	std	Y+2, r24	; 0x02
 7b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
 7b2:	19 82       	std	Y+1, r1	; 0x01
	if(copy_IntNum==INT0)
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	88 23       	and	r24, r24
 7b8:	09 f0       	breq	.+2      	; 0x7bc <EXTI_u8SetSenseCtrl+0x22>
 7ba:	5f c0       	rjmp	.+190    	; 0x87a <__stack+0x1b>
	{
		switch(copy_u8SenseCtrl)
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	39 87       	std	Y+9, r19	; 0x09
 7c4:	28 87       	std	Y+8, r18	; 0x08
 7c6:	88 85       	ldd	r24, Y+8	; 0x08
 7c8:	99 85       	ldd	r25, Y+9	; 0x09
 7ca:	82 30       	cpi	r24, 0x02	; 2
 7cc:	91 05       	cpc	r25, r1
 7ce:	29 f1       	breq	.+74     	; 0x81a <EXTI_u8SetSenseCtrl+0x80>
 7d0:	28 85       	ldd	r18, Y+8	; 0x08
 7d2:	39 85       	ldd	r19, Y+9	; 0x09
 7d4:	23 30       	cpi	r18, 0x03	; 3
 7d6:	31 05       	cpc	r19, r1
 7d8:	34 f4       	brge	.+12     	; 0x7e6 <EXTI_u8SetSenseCtrl+0x4c>
 7da:	88 85       	ldd	r24, Y+8	; 0x08
 7dc:	99 85       	ldd	r25, Y+9	; 0x09
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	91 05       	cpc	r25, r1
 7e2:	61 f0       	breq	.+24     	; 0x7fc <EXTI_u8SetSenseCtrl+0x62>
 7e4:	47 c0       	rjmp	.+142    	; 0x874 <__stack+0x15>
 7e6:	28 85       	ldd	r18, Y+8	; 0x08
 7e8:	39 85       	ldd	r19, Y+9	; 0x09
 7ea:	23 30       	cpi	r18, 0x03	; 3
 7ec:	31 05       	cpc	r19, r1
 7ee:	21 f1       	breq	.+72     	; 0x838 <EXTI_u8SetSenseCtrl+0x9e>
 7f0:	88 85       	ldd	r24, Y+8	; 0x08
 7f2:	99 85       	ldd	r25, Y+9	; 0x09
 7f4:	84 30       	cpi	r24, 0x04	; 4
 7f6:	91 05       	cpc	r25, r1
 7f8:	71 f1       	breq	.+92     	; 0x856 <EXTI_u8SetSenseCtrl+0xbc>
 7fa:	3c c0       	rjmp	.+120    	; 0x874 <__stack+0x15>
		{
		case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC00);  CLR_BIT(MCUCR,MCUCR_ISC01);break;
 7fc:	a5 e5       	ldi	r26, 0x55	; 85
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	e5 e5       	ldi	r30, 0x55	; 85
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	8e 7f       	andi	r24, 0xFE	; 254
 808:	8c 93       	st	X, r24
 80a:	a5 e5       	ldi	r26, 0x55	; 85
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	e5 e5       	ldi	r30, 0x55	; 85
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	8d 7f       	andi	r24, 0xFD	; 253
 816:	8c 93       	st	X, r24
 818:	bb c0       	rjmp	.+374    	; 0x990 <__stack+0x131>
		case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC00);  CLR_BIT(MCUCR,MCUCR_ISC01);break;
 81a:	a5 e5       	ldi	r26, 0x55	; 85
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	e5 e5       	ldi	r30, 0x55	; 85
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	81 60       	ori	r24, 0x01	; 1
 826:	8c 93       	st	X, r24
 828:	a5 e5       	ldi	r26, 0x55	; 85
 82a:	b0 e0       	ldi	r27, 0x00	; 0
 82c:	e5 e5       	ldi	r30, 0x55	; 85
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	8d 7f       	andi	r24, 0xFD	; 253
 834:	8c 93       	st	X, r24
 836:	ac c0       	rjmp	.+344    	; 0x990 <__stack+0x131>
		case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00);  SET_BIT(MCUCR,MCUCR_ISC01);break;
 838:	a5 e5       	ldi	r26, 0x55	; 85
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e5 e5       	ldi	r30, 0x55	; 85
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	8e 7f       	andi	r24, 0xFE	; 254
 844:	8c 93       	st	X, r24
 846:	a5 e5       	ldi	r26, 0x55	; 85
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e5 e5       	ldi	r30, 0x55	; 85
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	82 60       	ori	r24, 0x02	; 2
 852:	8c 93       	st	X, r24
 854:	9d c0       	rjmp	.+314    	; 0x990 <__stack+0x131>
		case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00);  SET_BIT(MCUCR,MCUCR_ISC01);break;
 856:	a5 e5       	ldi	r26, 0x55	; 85
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	e5 e5       	ldi	r30, 0x55	; 85
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	81 60       	ori	r24, 0x01	; 1
 862:	8c 93       	st	X, r24
 864:	a5 e5       	ldi	r26, 0x55	; 85
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e5 e5       	ldi	r30, 0x55	; 85
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	8c 93       	st	X, r24
 872:	8e c0       	rjmp	.+284    	; 0x990 <__stack+0x131>
		default:Local_u8ErrorState=NOK;break;
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	8b c0       	rjmp	.+278    	; 0x990 <__stack+0x131>
		}
	}
	else if(copy_IntNum==INT1)
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
 880:	5f c0       	rjmp	.+190    	; 0x940 <__stack+0xe1>
	{
		switch(copy_u8SenseCtrl)
 882:	8b 81       	ldd	r24, Y+3	; 0x03
 884:	28 2f       	mov	r18, r24
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	3f 83       	std	Y+7, r19	; 0x07
 88a:	2e 83       	std	Y+6, r18	; 0x06
 88c:	8e 81       	ldd	r24, Y+6	; 0x06
 88e:	9f 81       	ldd	r25, Y+7	; 0x07
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	91 05       	cpc	r25, r1
 894:	29 f1       	breq	.+74     	; 0x8e0 <__stack+0x81>
 896:	2e 81       	ldd	r18, Y+6	; 0x06
 898:	3f 81       	ldd	r19, Y+7	; 0x07
 89a:	23 30       	cpi	r18, 0x03	; 3
 89c:	31 05       	cpc	r19, r1
 89e:	34 f4       	brge	.+12     	; 0x8ac <__stack+0x4d>
 8a0:	8e 81       	ldd	r24, Y+6	; 0x06
 8a2:	9f 81       	ldd	r25, Y+7	; 0x07
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	91 05       	cpc	r25, r1
 8a8:	61 f0       	breq	.+24     	; 0x8c2 <__stack+0x63>
 8aa:	47 c0       	rjmp	.+142    	; 0x93a <__stack+0xdb>
 8ac:	2e 81       	ldd	r18, Y+6	; 0x06
 8ae:	3f 81       	ldd	r19, Y+7	; 0x07
 8b0:	23 30       	cpi	r18, 0x03	; 3
 8b2:	31 05       	cpc	r19, r1
 8b4:	21 f1       	breq	.+72     	; 0x8fe <__stack+0x9f>
 8b6:	8e 81       	ldd	r24, Y+6	; 0x06
 8b8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ba:	84 30       	cpi	r24, 0x04	; 4
 8bc:	91 05       	cpc	r25, r1
 8be:	71 f1       	breq	.+92     	; 0x91c <__stack+0xbd>
 8c0:	3c c0       	rjmp	.+120    	; 0x93a <__stack+0xdb>
		{
		case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11);break;
 8c2:	a5 e5       	ldi	r26, 0x55	; 85
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e5 e5       	ldi	r30, 0x55	; 85
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	8b 7f       	andi	r24, 0xFB	; 251
 8ce:	8c 93       	st	X, r24
 8d0:	a5 e5       	ldi	r26, 0x55	; 85
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e5 e5       	ldi	r30, 0x55	; 85
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	87 7f       	andi	r24, 0xF7	; 247
 8dc:	8c 93       	st	X, r24
 8de:	58 c0       	rjmp	.+176    	; 0x990 <__stack+0x131>
		case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11);break;
 8e0:	a5 e5       	ldi	r26, 0x55	; 85
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e5 e5       	ldi	r30, 0x55	; 85
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	84 60       	ori	r24, 0x04	; 4
 8ec:	8c 93       	st	X, r24
 8ee:	a5 e5       	ldi	r26, 0x55	; 85
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e5 e5       	ldi	r30, 0x55	; 85
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	87 7f       	andi	r24, 0xF7	; 247
 8fa:	8c 93       	st	X, r24
 8fc:	49 c0       	rjmp	.+146    	; 0x990 <__stack+0x131>
		case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
 8fe:	a5 e5       	ldi	r26, 0x55	; 85
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	e5 e5       	ldi	r30, 0x55	; 85
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	8b 7f       	andi	r24, 0xFB	; 251
 90a:	8c 93       	st	X, r24
 90c:	a5 e5       	ldi	r26, 0x55	; 85
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e5 e5       	ldi	r30, 0x55	; 85
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	88 60       	ori	r24, 0x08	; 8
 918:	8c 93       	st	X, r24
 91a:	3a c0       	rjmp	.+116    	; 0x990 <__stack+0x131>
		case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
 91c:	a5 e5       	ldi	r26, 0x55	; 85
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	e5 e5       	ldi	r30, 0x55	; 85
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	84 60       	ori	r24, 0x04	; 4
 928:	8c 93       	st	X, r24
 92a:	a5 e5       	ldi	r26, 0x55	; 85
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e5 e5       	ldi	r30, 0x55	; 85
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	88 60       	ori	r24, 0x08	; 8
 936:	8c 93       	st	X, r24
 938:	2b c0       	rjmp	.+86     	; 0x990 <__stack+0x131>
		default:Local_u8ErrorState=NOK;break;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	89 83       	std	Y+1, r24	; 0x01
 93e:	28 c0       	rjmp	.+80     	; 0x990 <__stack+0x131>
		}

	}

	else if(copy_IntNum==INT2)
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	82 30       	cpi	r24, 0x02	; 2
 944:	19 f5       	brne	.+70     	; 0x98c <__stack+0x12d>
	{
		switch(copy_u8SenseCtrl)
 946:	8b 81       	ldd	r24, Y+3	; 0x03
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	3d 83       	std	Y+5, r19	; 0x05
 94e:	2c 83       	std	Y+4, r18	; 0x04
 950:	8c 81       	ldd	r24, Y+4	; 0x04
 952:	9d 81       	ldd	r25, Y+5	; 0x05
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	91 05       	cpc	r25, r1
 958:	31 f0       	breq	.+12     	; 0x966 <__stack+0x107>
 95a:	2c 81       	ldd	r18, Y+4	; 0x04
 95c:	3d 81       	ldd	r19, Y+5	; 0x05
 95e:	24 30       	cpi	r18, 0x04	; 4
 960:	31 05       	cpc	r19, r1
 962:	49 f0       	breq	.+18     	; 0x976 <__stack+0x117>
 964:	10 c0       	rjmp	.+32     	; 0x986 <__stack+0x127>
		{

		case FALLING_EDGE:CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
 966:	a4 e5       	ldi	r26, 0x54	; 84
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e4 e5       	ldi	r30, 0x54	; 84
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	8f 7b       	andi	r24, 0xBF	; 191
 972:	8c 93       	st	X, r24
 974:	0d c0       	rjmp	.+26     	; 0x990 <__stack+0x131>
		case RISING_EDGE: SET_BIT(MCUCR,MCUCSR_ISC2);break;
 976:	a5 e5       	ldi	r26, 0x55	; 85
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	e5 e5       	ldi	r30, 0x55	; 85
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	80 64       	ori	r24, 0x40	; 64
 982:	8c 93       	st	X, r24
 984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
		default:Local_u8ErrorState=NOK;break;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x131>
		}

	}
	else
	{
		Local_u8ErrorState=NOK;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 990:	89 81       	ldd	r24, Y+1	; 0x01
}
 992:	29 96       	adiw	r28, 0x09	; 9
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <EXTI_u8IntEnable>:
uint8 EXTI_u8IntEnable(EXTI_IntNum_t  copy_IntNum)
{
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <EXTI_u8IntEnable+0x6>
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <EXTI_u8IntEnable+0x8>
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
 9b2:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_IntNum)
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	28 2f       	mov	r18, r24
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	3c 83       	std	Y+4, r19	; 0x04
 9bc:	2b 83       	std	Y+3, r18	; 0x03
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	9c 81       	ldd	r25, Y+4	; 0x04
 9c2:	81 30       	cpi	r24, 0x01	; 1
 9c4:	91 05       	cpc	r25, r1
 9c6:	89 f0       	breq	.+34     	; 0x9ea <EXTI_u8IntEnable+0x46>
 9c8:	2b 81       	ldd	r18, Y+3	; 0x03
 9ca:	3c 81       	ldd	r19, Y+4	; 0x04
 9cc:	22 30       	cpi	r18, 0x02	; 2
 9ce:	31 05       	cpc	r19, r1
 9d0:	a1 f0       	breq	.+40     	; 0x9fa <EXTI_u8IntEnable+0x56>
 9d2:	8b 81       	ldd	r24, Y+3	; 0x03
 9d4:	9c 81       	ldd	r25, Y+4	; 0x04
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	c1 f4       	brne	.+48     	; 0xa0a <EXTI_u8IntEnable+0x66>
	{
	case INT0: SET_BIT (GICR,GICR_INT0);break;
 9da:	ab e5       	ldi	r26, 0x5B	; 91
 9dc:	b0 e0       	ldi	r27, 0x00	; 0
 9de:	eb e5       	ldi	r30, 0x5B	; 91
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	80 64       	ori	r24, 0x40	; 64
 9e6:	8c 93       	st	X, r24
 9e8:	12 c0       	rjmp	.+36     	; 0xa0e <EXTI_u8IntEnable+0x6a>
	case INT1: SET_BIT (GICR,GICR_INT1);break;
 9ea:	ab e5       	ldi	r26, 0x5B	; 91
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	eb e5       	ldi	r30, 0x5B	; 91
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	80 68       	ori	r24, 0x80	; 128
 9f6:	8c 93       	st	X, r24
 9f8:	0a c0       	rjmp	.+20     	; 0xa0e <EXTI_u8IntEnable+0x6a>
	case INT2: SET_BIT (GICR,GICR_INT2);break;
 9fa:	ab e5       	ldi	r26, 0x5B	; 91
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	eb e5       	ldi	r30, 0x5B	; 91
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	80 81       	ld	r24, Z
 a04:	80 62       	ori	r24, 0x20	; 32
 a06:	8c 93       	st	X, r24
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <EXTI_u8IntEnable+0x6a>
	default:Local_u8ErrorState=NOK;break;
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	0f 90       	pop	r0
 a16:	0f 90       	pop	r0
 a18:	cf 91       	pop	r28
 a1a:	df 91       	pop	r29
 a1c:	08 95       	ret

00000a1e <EXTI_u8IntDisable>:
uint8 EXTI_u8IntDisable(EXTI_IntNum_t  copy_IntNum)
{
 a1e:	df 93       	push	r29
 a20:	cf 93       	push	r28
 a22:	00 d0       	rcall	.+0      	; 0xa24 <EXTI_u8IntDisable+0x6>
 a24:	00 d0       	rcall	.+0      	; 0xa26 <EXTI_u8IntDisable+0x8>
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
 a2c:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_IntNum)
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	28 2f       	mov	r18, r24
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	3c 83       	std	Y+4, r19	; 0x04
 a36:	2b 83       	std	Y+3, r18	; 0x03
 a38:	8b 81       	ldd	r24, Y+3	; 0x03
 a3a:	9c 81       	ldd	r25, Y+4	; 0x04
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	91 05       	cpc	r25, r1
 a40:	89 f0       	breq	.+34     	; 0xa64 <EXTI_u8IntDisable+0x46>
 a42:	2b 81       	ldd	r18, Y+3	; 0x03
 a44:	3c 81       	ldd	r19, Y+4	; 0x04
 a46:	22 30       	cpi	r18, 0x02	; 2
 a48:	31 05       	cpc	r19, r1
 a4a:	a1 f0       	breq	.+40     	; 0xa74 <EXTI_u8IntDisable+0x56>
 a4c:	8b 81       	ldd	r24, Y+3	; 0x03
 a4e:	9c 81       	ldd	r25, Y+4	; 0x04
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	c1 f4       	brne	.+48     	; 0xa84 <EXTI_u8IntDisable+0x66>
	{
	case INT0: CLR_BIT (GICR,GICR_INT0);break;
 a54:	ab e5       	ldi	r26, 0x5B	; 91
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	eb e5       	ldi	r30, 0x5B	; 91
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	8f 7b       	andi	r24, 0xBF	; 191
 a60:	8c 93       	st	X, r24
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <EXTI_u8IntDisable+0x6a>
	case INT1: CLR_BIT (GICR,GICR_INT1);break;
 a64:	ab e5       	ldi	r26, 0x5B	; 91
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	eb e5       	ldi	r30, 0x5B	; 91
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	8f 77       	andi	r24, 0x7F	; 127
 a70:	8c 93       	st	X, r24
 a72:	0a c0       	rjmp	.+20     	; 0xa88 <EXTI_u8IntDisable+0x6a>
	case INT2: CLR_BIT (GICR,GICR_INT2);break;
 a74:	ab e5       	ldi	r26, 0x5B	; 91
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	eb e5       	ldi	r30, 0x5B	; 91
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	8f 7d       	andi	r24, 0xDF	; 223
 a80:	8c 93       	st	X, r24
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <EXTI_u8IntDisable+0x6a>
	default:Local_u8ErrorState=NOK;break;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 a88:	89 81       	ldd	r24, Y+1	; 0x01
}
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(EXTI_IntNum_t  copy_IntNum, void(*copy_pvFuncPtr)(void))
{
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	00 d0       	rcall	.+0      	; 0xa9e <EXTI_u8SetCallBack+0x6>
 a9e:	00 d0       	rcall	.+0      	; 0xaa0 <EXTI_u8SetCallBack+0x8>
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	8a 83       	std	Y+2, r24	; 0x02
 aa6:	7c 83       	std	Y+4, r23	; 0x04
 aa8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState =OK;
 aaa:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvFuncPtr!=NULL)
 aac:	8b 81       	ldd	r24, Y+3	; 0x03
 aae:	9c 81       	ldd	r25, Y+4	; 0x04
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	99 f0       	breq	.+38     	; 0xada <EXTI_u8SetCallBack+0x42>
	{
		if((copy_IntNum>=INT0) &&(copy_IntNum<=INT2))
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	68 f4       	brcc	.+26     	; 0xad4 <EXTI_u8SetCallBack+0x3c>
		{
			EXTI_pfFuncPtr[copy_IntNum]=copy_pvFuncPtr;
 aba:	8a 81       	ldd	r24, Y+2	; 0x02
 abc:	88 2f       	mov	r24, r24
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	fc 01       	movw	r30, r24
 ac6:	e0 5a       	subi	r30, 0xA0	; 160
 ac8:	ff 4f       	sbci	r31, 0xFF	; 255
 aca:	8b 81       	ldd	r24, Y+3	; 0x03
 acc:	9c 81       	ldd	r25, Y+4	; 0x04
 ace:	91 83       	std	Z+1, r25	; 0x01
 ad0:	80 83       	st	Z, r24
 ad2:	05 c0       	rjmp	.+10     	; 0xade <EXTI_u8SetCallBack+0x46>
		}
		else
		{
			Local_u8ErrorState=NOK;
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	89 83       	std	Y+1, r24	; 0x01
 ad8:	02 c0       	rjmp	.+4      	; 0xade <EXTI_u8SetCallBack+0x46>
		}

	}
	else
	{
		Local_u8ErrorState=NULL_PTR;
 ada:	82 e0       	ldi	r24, 0x02	; 2
 adc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 ade:	89 81       	ldd	r24, Y+1	; 0x01
}
 ae0:	0f 90       	pop	r0
 ae2:	0f 90       	pop	r0
 ae4:	0f 90       	pop	r0
 ae6:	0f 90       	pop	r0
 ae8:	cf 91       	pop	r28
 aea:	df 91       	pop	r29
 aec:	08 95       	ret

00000aee <__vector_1>:

/*INT0 ISR*/
void __vector_1 (void)    __attribute__((signal));
void __vector_1 (void)
{
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	0f 92       	push	r0
 af6:	11 24       	eor	r1, r1
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	4f 93       	push	r20
 afe:	5f 93       	push	r21
 b00:	6f 93       	push	r22
 b02:	7f 93       	push	r23
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	ef 93       	push	r30
 b0e:	ff 93       	push	r31
 b10:	df 93       	push	r29
 b12:	cf 93       	push	r28
 b14:	cd b7       	in	r28, 0x3d	; 61
 b16:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfFuncPtr[INT0]!=NULL)
 b18:	80 91 60 00 	lds	r24, 0x0060
 b1c:	90 91 61 00 	lds	r25, 0x0061
 b20:	00 97       	sbiw	r24, 0x00	; 0
 b22:	29 f0       	breq	.+10     	; 0xb2e <__vector_1+0x40>
	{
		EXTI_pfFuncPtr[INT0]();
 b24:	e0 91 60 00 	lds	r30, 0x0060
 b28:	f0 91 61 00 	lds	r31, 0x0061
 b2c:	09 95       	icall
	}
	else
	{
		/*do nothing*/
	}
}
 b2e:	cf 91       	pop	r28
 b30:	df 91       	pop	r29
 b32:	ff 91       	pop	r31
 b34:	ef 91       	pop	r30
 b36:	bf 91       	pop	r27
 b38:	af 91       	pop	r26
 b3a:	9f 91       	pop	r25
 b3c:	8f 91       	pop	r24
 b3e:	7f 91       	pop	r23
 b40:	6f 91       	pop	r22
 b42:	5f 91       	pop	r21
 b44:	4f 91       	pop	r20
 b46:	3f 91       	pop	r19
 b48:	2f 91       	pop	r18
 b4a:	0f 90       	pop	r0
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	0f 90       	pop	r0
 b50:	1f 90       	pop	r1
 b52:	18 95       	reti

00000b54 <__vector_2>:

/*INT1 ISR*/
void __vector_2 (void)    __attribute__((signal));
void __vector_2 (void)
{
 b54:	1f 92       	push	r1
 b56:	0f 92       	push	r0
 b58:	0f b6       	in	r0, 0x3f	; 63
 b5a:	0f 92       	push	r0
 b5c:	11 24       	eor	r1, r1
 b5e:	2f 93       	push	r18
 b60:	3f 93       	push	r19
 b62:	4f 93       	push	r20
 b64:	5f 93       	push	r21
 b66:	6f 93       	push	r22
 b68:	7f 93       	push	r23
 b6a:	8f 93       	push	r24
 b6c:	9f 93       	push	r25
 b6e:	af 93       	push	r26
 b70:	bf 93       	push	r27
 b72:	ef 93       	push	r30
 b74:	ff 93       	push	r31
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	cd b7       	in	r28, 0x3d	; 61
 b7c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfFuncPtr[INT1]!=NULL)
 b7e:	80 91 62 00 	lds	r24, 0x0062
 b82:	90 91 63 00 	lds	r25, 0x0063
 b86:	00 97       	sbiw	r24, 0x00	; 0
 b88:	29 f0       	breq	.+10     	; 0xb94 <__vector_2+0x40>
	{
		EXTI_pfFuncPtr[INT1]();
 b8a:	e0 91 62 00 	lds	r30, 0x0062
 b8e:	f0 91 63 00 	lds	r31, 0x0063
 b92:	09 95       	icall
	}
	else
	{
		/*do nothing*/
	}
}
 b94:	cf 91       	pop	r28
 b96:	df 91       	pop	r29
 b98:	ff 91       	pop	r31
 b9a:	ef 91       	pop	r30
 b9c:	bf 91       	pop	r27
 b9e:	af 91       	pop	r26
 ba0:	9f 91       	pop	r25
 ba2:	8f 91       	pop	r24
 ba4:	7f 91       	pop	r23
 ba6:	6f 91       	pop	r22
 ba8:	5f 91       	pop	r21
 baa:	4f 91       	pop	r20
 bac:	3f 91       	pop	r19
 bae:	2f 91       	pop	r18
 bb0:	0f 90       	pop	r0
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	0f 90       	pop	r0
 bb6:	1f 90       	pop	r1
 bb8:	18 95       	reti

00000bba <__vector_3>:

/*INT2 ISR*/
void __vector_3 (void)    __attribute__((signal));
void __vector_3 (void)
{
 bba:	1f 92       	push	r1
 bbc:	0f 92       	push	r0
 bbe:	0f b6       	in	r0, 0x3f	; 63
 bc0:	0f 92       	push	r0
 bc2:	11 24       	eor	r1, r1
 bc4:	2f 93       	push	r18
 bc6:	3f 93       	push	r19
 bc8:	4f 93       	push	r20
 bca:	5f 93       	push	r21
 bcc:	6f 93       	push	r22
 bce:	7f 93       	push	r23
 bd0:	8f 93       	push	r24
 bd2:	9f 93       	push	r25
 bd4:	af 93       	push	r26
 bd6:	bf 93       	push	r27
 bd8:	ef 93       	push	r30
 bda:	ff 93       	push	r31
 bdc:	df 93       	push	r29
 bde:	cf 93       	push	r28
 be0:	cd b7       	in	r28, 0x3d	; 61
 be2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfFuncPtr[INT2]!=NULL)
 be4:	80 91 64 00 	lds	r24, 0x0064
 be8:	90 91 65 00 	lds	r25, 0x0065
 bec:	00 97       	sbiw	r24, 0x00	; 0
 bee:	29 f0       	breq	.+10     	; 0xbfa <__vector_3+0x40>
	{
		EXTI_pfFuncPtr[INT2]();
 bf0:	e0 91 64 00 	lds	r30, 0x0064
 bf4:	f0 91 65 00 	lds	r31, 0x0065
 bf8:	09 95       	icall
	}
	else
	{
		/*do nothing*/
	}
}
 bfa:	cf 91       	pop	r28
 bfc:	df 91       	pop	r29
 bfe:	ff 91       	pop	r31
 c00:	ef 91       	pop	r30
 c02:	bf 91       	pop	r27
 c04:	af 91       	pop	r26
 c06:	9f 91       	pop	r25
 c08:	8f 91       	pop	r24
 c0a:	7f 91       	pop	r23
 c0c:	6f 91       	pop	r22
 c0e:	5f 91       	pop	r21
 c10:	4f 91       	pop	r20
 c12:	3f 91       	pop	r19
 c14:	2f 91       	pop	r18
 c16:	0f 90       	pop	r0
 c18:	0f be       	out	0x3f, r0	; 63
 c1a:	0f 90       	pop	r0
 c1c:	1f 90       	pop	r1
 c1e:	18 95       	reti

00000c20 <GIE_voidEnableGlobal>:
#include "GIE_reg.h"



void GIE_voidEnableGlobal(void)
{
 c20:	df 93       	push	r29
 c22:	cf 93       	push	r28
 c24:	cd b7       	in	r28, 0x3d	; 61
 c26:	de b7       	in	r29, 0x3e	; 62
     __asm volatile ("SEI");
 c28:	78 94       	sei
/*SET_BIT(SREG,SREG_I);*/	 
}
 c2a:	cf 91       	pop	r28
 c2c:	df 91       	pop	r29
 c2e:	08 95       	ret

00000c30 <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal(void)
{
 c30:	df 93       	push	r29
 c32:	cf 93       	push	r28
 c34:	cd b7       	in	r28, 0x3d	; 61
 c36:	de b7       	in	r29, 0x3e	; 62
	 __asm volatile ("CLI");
 c38:	f8 94       	cli
	
	/*CLR_BIT(SREG,SREG_I);*/	 
	
}	
 c3a:	cf 91       	pop	r28
 c3c:	df 91       	pop	r29
 c3e:	08 95       	ret

00000c40 <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_reg.h"
#include "PORT_interface.h"

void PORT_voidInit (void)
{
 c40:	df 93       	push	r29
 c42:	cf 93       	push	r28
 c44:	cd b7       	in	r28, 0x3d	; 61
 c46:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 c48:	ea e3       	ldi	r30, 0x3A	; 58
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	8e e7       	ldi	r24, 0x7E	; 126
 c4e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
 c50:	e7 e3       	ldi	r30, 0x37	; 55
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 c56:	e4 e3       	ldi	r30, 0x34	; 52
 c58:	f0 e0       	ldi	r31, 0x00	; 0
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
 c5e:	e1 e3       	ldi	r30, 0x31	; 49
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	10 82       	st	Z, r1
	
	
	PORTA=PORTA_INITVAL;
 c64:	eb e3       	ldi	r30, 0x3B	; 59
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	10 82       	st	Z, r1
	PORTB=PORTB_INITVAL;
 c6a:	e8 e3       	ldi	r30, 0x38	; 56
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	10 82       	st	Z, r1
    PORTC=PORTC_INITVAL;
 c70:	e5 e3       	ldi	r30, 0x35	; 53
 c72:	f0 e0       	ldi	r31, 0x00	; 0
 c74:	10 82       	st	Z, r1
    PORTD=PORTD_INITVAL;
 c76:	e2 e3       	ldi	r30, 0x32	; 50
 c78:	f0 e0       	ldi	r31, 0x00	; 0
 c7a:	8c e0       	ldi	r24, 0x0C	; 12
 c7c:	80 83       	st	Z, r24
	
	
	
 c7e:	cf 91       	pop	r28
 c80:	df 91       	pop	r29
 c82:	08 95       	ret

00000c84 <main>:

void INT0ISR (void);
void INT1ISR (void);

void main(void)
{
 c84:	df 93       	push	r29
 c86:	cf 93       	push	r28
 c88:	cd b7       	in	r28, 0x3d	; 61
 c8a:	de b7       	in	r29, 0x3e	; 62
   PORT_voidInit();
 c8c:	0e 94 20 06 	call	0xc40	; 0xc40 <PORT_voidInit>
   EXTI_voidInit();
 c90:	0e 94 87 03 	call	0x70e	; 0x70e <EXTI_voidInit>

   EXTI_u8SetCallBack(INT0,&INT0ISR);
 c94:	29 e5       	ldi	r18, 0x59	; 89
 c96:	36 e0       	ldi	r19, 0x06	; 6
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	b9 01       	movw	r22, r18
 c9c:	0e 94 4c 05 	call	0xa98	; 0xa98 <EXTI_u8SetCallBack>
   EXTI_u8SetCallBack(INT1,&INT1ISR);
 ca0:	25 e6       	ldi	r18, 0x65	; 101
 ca2:	36 e0       	ldi	r19, 0x06	; 6
 ca4:	81 e0       	ldi	r24, 0x01	; 1
 ca6:	b9 01       	movw	r22, r18
 ca8:	0e 94 4c 05 	call	0xa98	; 0xa98 <EXTI_u8SetCallBack>
   GIE_voidEnableGlobal();
 cac:	0e 94 10 06 	call	0xc20	; 0xc20 <GIE_voidEnableGlobal>
 cb0:	ff cf       	rjmp	.-2      	; 0xcb0 <main+0x2c>

00000cb2 <INT0ISR>:

   }
}

void INT0ISR (void)
{
 cb2:	df 93       	push	r29
 cb4:	cf 93       	push	r28
 cb6:	cd b7       	in	r28, 0x3d	; 61
 cb8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
 cba:	82 e0       	ldi	r24, 0x02	; 2
 cbc:	60 e0       	ldi	r22, 0x00	; 0
 cbe:	41 e0       	ldi	r20, 0x01	; 1
 cc0:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_u8SetPinValue>
}
 cc4:	cf 91       	pop	r28
 cc6:	df 91       	pop	r29
 cc8:	08 95       	ret

00000cca <INT1ISR>:

void INT1ISR (void)
{
 cca:	df 93       	push	r29
 ccc:	cf 93       	push	r28
 cce:	cd b7       	in	r28, 0x3d	; 61
 cd0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
 cd2:	82 e0       	ldi	r24, 0x02	; 2
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	40 e0       	ldi	r20, 0x00	; 0
 cd8:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_u8SetPinValue>
}
 cdc:	cf 91       	pop	r28
 cde:	df 91       	pop	r29
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
