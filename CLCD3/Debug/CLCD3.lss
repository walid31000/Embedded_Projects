
CLCD3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000039e6  00003a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a0  008000a0  00003aba  2**0
                  ALLOC
  3 .stab         00002790  00000000  00000000  00003abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000125e  00000000  00000000  0000624c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000075ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000775a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b03c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b429  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <main>
      8a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSetHalfDataPort>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSetHalfDataPort(uint8 copy_u8FourBitData )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT ,CLCD_u8D4_PIN ,GET_BIT(copy_u8FourBitData,0));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	98 2f       	mov	r25, r24
     b56:	91 70       	andi	r25, 0x01	; 1
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	49 2f       	mov	r20, r25
     b5e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT ,CLCD_u8D5_PIN ,GET_BIT(copy_u8FourBitData,1));
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	86 95       	lsr	r24
     b66:	98 2f       	mov	r25, r24
     b68:	91 70       	andi	r25, 0x01	; 1
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT ,CLCD_u8D6_PIN ,GET_BIT(copy_u8FourBitData,2));
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	49 2f       	mov	r20, r25
     b84:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT ,CLCD_u8D7_PIN ,GET_BIT(copy_u8FourBitData,3));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	98 2f       	mov	r25, r24
     b92:	91 70       	andi	r25, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	49 2f       	mov	r20, r25
     b9a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <voidSendEnablePulse>:

static void voidSendEnablePulse (void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2e 97       	sbiw	r28, 0x0e	; 14
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e4       	ldi	r27, 0x40	; 64
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9c 87       	std	Y+12, r25	; 0x0c
     bd0:	ad 87       	std	Y+13, r26	; 0x0d
     bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a ef       	ldi	r20, 0xFA	; 250
     be2:	54 e4       	ldi	r21, 0x44	; 68
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	a9 87       	std	Y+9, r26	; 0x09
     bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf4:	6f 81       	ldd	r22, Y+7	; 0x07
     bf6:	78 85       	ldd	r23, Y+8	; 0x08
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <voidSendEnablePulse+0xd0>
     c58:	88 ec       	ldi	r24, 0xC8	; 200
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <voidSendEnablePulse+0xbe>
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <voidSendEnablePulse+0xb2>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <voidSendEnablePulse+0xfa>
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand (uint8 copy_u8Command)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*1-Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	voidSendEnablePulse ();


#elif CLCD_u8CONNECTION_MODE == FOUR_BIT
	/*Send the higher four bit of the command*/
	voidSetHalfDataPort(copy_u8Command>>4u );
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	/*-Send Enable Pulse*/
	voidSendEnablePulse ();
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	/*Send the lower four bit of the command*/
	voidSetHalfDataPort(copy_u8Command);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>

	/*-Send Enable Pulse*/
	voidSendEnablePulse ();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
#endif
}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <CLCD_voidSendData>:
void CLCD_voidSendData (uint8 copy_u8Data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
	/*1-Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_HIGH);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	voidSendEnablePulse ();


#elif CLCD_u8CONNECTION_MODE == FOUR_BIT
	/*Send the higher four bit of the data*/
	voidSetHalfDataPort(copy_u8Data>>4u );
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	/*-Send Enable Pulse*/
	voidSendEnablePulse();
     d1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	/*Send the lower four bit of the data*/
	voidSetHalfDataPort(copy_u8Data);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>

	/*-Send Enable Pulse*/
	voidSendEnablePulse();
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
#endif
}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <CLCD_voidInit>:
void CLCD_voidInit (void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e2       	ldi	r26, 0x20	; 32
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a ef       	ldi	r20, 0xFA	; 250
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <CLCD_voidInit+0x66>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <CLCD_voidInit+0xc6>
     dd8:	88 ec       	ldi	r24, 0xC8	; 200
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <CLCD_voidInit+0xb4>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <CLCD_voidInit+0xa8>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_voidInit+0xf0>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	/*2-Function set command :2 lines,font size :5*7 */
#if CLCD_u8CONNECTION_MODE	==EIGHT_BIT
	CLCD_voidSendCommand(0b00111000);

#elif CLCD_u8CONNECTION_MODE ==FOUR_BIT
	voidSetHalfDataPort(0b0010);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e38:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
#endif

	/*3-Display on off control :Display :ON, cursor:off,blink cursor off*/

	CLCD_voidSendCommand(0b00001100);
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCommand>
	/*4-Display clear */
	CLCD_voidSendCommand(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCommand>

}
     e52:	2e 96       	adiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CLCD_u8SendString>:
uint8 CLCD_u8SendString (const char *copy_Chstring)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CLCD_u8SendString+0x6>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LocalErrorState=OK;
     e74:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Chstring!=NULL)
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	89 f0       	breq	.+34     	; 0xea0 <CLCD_u8SendString+0x3c>
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <CLCD_u8SendString+0x30>
	{//uint8 Local_u8Counter=0;
		while(*copy_Chstring!='\0')
		{

			CLCD_voidSendData(*copy_Chstring);
     e80:	ea 81       	ldd	r30, Y+2	; 0x02
     e82:	fb 81       	ldd	r31, Y+3	; 0x03
     e84:	80 81       	ld	r24, Z
     e86:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			copy_Chstring++;
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
uint8 CLCD_u8SendString (const char *copy_Chstring)
{
	uint8 LocalErrorState=OK;
	if(copy_Chstring!=NULL)
	{//uint8 Local_u8Counter=0;
		while(*copy_Chstring!='\0')
     e94:	ea 81       	ldd	r30, Y+2	; 0x02
     e96:	fb 81       	ldd	r31, Y+3	; 0x03
     e98:	80 81       	ld	r24, Z
     e9a:	88 23       	and	r24, r24
     e9c:	89 f7       	brne	.-30     	; 0xe80 <CLCD_u8SendString+0x1c>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <CLCD_u8SendString+0x40>

		}
	}
	else
	{
		LocalErrorState=NULL_PTR;
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber (sint32 copy_s32Number)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	61 97       	sbiw	r28, 0x11	; 17
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	6e 87       	std	Y+14, r22	; 0x0e
     ec8:	7f 87       	std	Y+15, r23	; 0x0f
     eca:	88 8b       	std	Y+16, r24	; 0x10
     ecc:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];

	uint8 Local_u8RighttDigit;
	uint8 Local_u8Counter =0;
     ece:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;
	if(copy_s32Number == 0)
     ed0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed4:	a8 89       	ldd	r26, Y+16	; 0x10
     ed6:	b9 89       	ldd	r27, Y+17	; 0x11
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	a1 05       	cpc	r26, r1
     edc:	b1 05       	cpc	r27, r1
     ede:	21 f4       	brne	.+8      	; 0xee8 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     ee0:	80 e3       	ldi	r24, 0x30	; 48
     ee2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     ee6:	69 c0       	rjmp	.+210    	; 0xfba <CLCD_voidSendNumber+0x108>

		return;
	}
	else if (copy_s32Number<0)
     ee8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eea:	9f 85       	ldd	r25, Y+15	; 0x0f
     eec:	a8 89       	ldd	r26, Y+16	; 0x10
     eee:	b9 89       	ldd	r27, Y+17	; 0x11
     ef0:	bb 23       	and	r27, r27
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <CLCD_voidSendNumber+0x44>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
     ef6:	8d e2       	ldi	r24, 0x2D	; 45
     ef8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		copy_s32Number *=-1;
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	9f 85       	ldd	r25, Y+15	; 0x0f
     f00:	a8 89       	ldd	r26, Y+16	; 0x10
     f02:	b9 89       	ldd	r27, Y+17	; 0x11
     f04:	b0 95       	com	r27
     f06:	a0 95       	com	r26
     f08:	90 95       	com	r25
     f0a:	81 95       	neg	r24
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	af 4f       	sbci	r26, 0xFF	; 255
     f10:	bf 4f       	sbci	r27, 0xFF	; 255
     f12:	8e 87       	std	Y+14, r24	; 0x0e
     f14:	9f 87       	std	Y+15, r25	; 0x0f
     f16:	a8 8b       	std	Y+16, r26	; 0x10
     f18:	b9 8b       	std	Y+17, r27	; 0x11
     f1a:	30 c0       	rjmp	.+96     	; 0xf7c <CLCD_voidSendNumber+0xca>
	}

	while(copy_s32Number!=0)
	{

		Local_u8RighttDigit=copy_s32Number %10;/*extract the right most digit */
     f1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f20:	a8 89       	ldd	r26, Y+16	; 0x10
     f22:	b9 89       	ldd	r27, Y+17	; 0x11
     f24:	2a e0       	ldi	r18, 0x0A	; 10
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodsi4>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8b 83       	std	Y+3, r24	; 0x03
		copy_s32Number /=10;/*Get rid of the right most digit*/
     f3a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f3c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3e:	a8 89       	ldd	r26, Y+16	; 0x10
     f40:	b9 89       	ldd	r27, Y+17	; 0x11
     f42:	2a e0       	ldi	r18, 0x0A	; 10
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodsi4>
     f52:	da 01       	movw	r26, r20
     f54:	c9 01       	movw	r24, r18
     f56:	8e 87       	std	Y+14, r24	; 0x0e
     f58:	9f 87       	std	Y+15, r25	; 0x0f
     f5a:	a8 8b       	std	Y+16, r26	; 0x10
     f5c:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr [Local_u8Counter]=Local_u8RighttDigit +'0';/*convert to ascii*/
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	48 2f       	mov	r20, r24
     f68:	40 5d       	subi	r20, 0xD0	; 208
     f6a:	ce 01       	movw	r24, r28
     f6c:	04 96       	adiw	r24, 0x04	; 4
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	40 83       	st	Z, r20
		Local_u8Counter++;
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		copy_s32Number *=-1;
	}

	while(copy_s32Number!=0)
     f7c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f7e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f80:	a8 89       	ldd	r26, Y+16	; 0x10
     f82:	b9 89       	ldd	r27, Y+17	; 0x11
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	a1 05       	cpc	r26, r1
     f88:	b1 05       	cpc	r27, r1
     f8a:	41 f6       	brne	.-112    	; 0xf1c <CLCD_voidSendNumber+0x6a>
		Local_u8RighttDigit=copy_s32Number %10;/*extract the right most digit */
		copy_s32Number /=10;/*Get rid of the right most digit*/
		Local_chNumberArr [Local_u8Counter]=Local_u8RighttDigit +'0';/*convert to ascii*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2=Local_u8Counter-1;Local_s8Counter2>=0;Local_s8Counter2--)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	81 50       	subi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	10 c0       	rjmp	.+32     	; 0xfb4 <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	33 27       	eor	r19, r19
     f9a:	27 fd       	sbrc	r18, 7
     f9c:	30 95       	com	r19
     f9e:	ce 01       	movw	r24, r28
     fa0:	04 96       	adiw	r24, 0x04	; 4
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	80 81       	ld	r24, Z
     faa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		Local_u8RighttDigit=copy_s32Number %10;/*extract the right most digit */
		copy_s32Number /=10;/*Get rid of the right most digit*/
		Local_chNumberArr [Local_u8Counter]=Local_u8RighttDigit +'0';/*convert to ascii*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2=Local_u8Counter-1;Local_s8Counter2>=0;Local_s8Counter2--)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	88 23       	and	r24, r24
     fb8:	6c f7       	brge	.-38     	; 0xf94 <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}


}
     fba:	61 96       	adiw	r28, 0x11	; 17
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <CLCD_voidGoToXY>:


void CLCD_voidGoToXY (uint8 copy_u8Xpos,uint8 copy_u8Ypos)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <CLCD_voidGoToXY+0x6>
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	8a 83       	std	Y+2, r24	; 0x02
     fda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd= (copy_u8Ypos*0x40)+copy_u8Xpos;
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	00 24       	eor	r0, r0
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	07 94       	ror	r0
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	07 94       	ror	r0
     ff0:	98 2f       	mov	r25, r24
     ff2:	80 2d       	mov	r24, r0
     ff4:	98 2f       	mov	r25, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	89 0f       	add	r24, r25
     ffa:	89 83       	std	Y+1, r24	; 0x01
	 * }
	 *

	 */
	/*set bit7 for setting DDRAM adress command*/
	SET_BIT (Local_u8DDRamAdd,7u);
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	89 83       	std	Y+1, r24	; 0x01
	/*send the setting DDRAM address command*/
	CLCD_voidSendCommand(Local_u8DDRamAdd);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCommand>
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <CLCD_u8WriteSpecialCharacter>:

uint8 CLCD_u8WriteSpecialCharacter(uint8 copy_u8PatternNumber,uint8 copy_pu8PatternArr[],uint8 copy_u8Xpos,uint8 copy_u8Ypos)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	28 97       	sbiw	r28, 0x08	; 8
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	8c 83       	std	Y+4, r24	; 0x04
    102a:	7e 83       	std	Y+6, r23	; 0x06
    102c:	6d 83       	std	Y+5, r22	; 0x05
    102e:	4f 83       	std	Y+7, r20	; 0x07
    1030:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState=OK;
    1032:	1b 82       	std	Y+3, r1	; 0x03
	if(copy_pu8PatternArr !=NULL)
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	59 f1       	breq	.+86     	; 0x1092 <CLCD_u8WriteSpecialCharacter+0x7e>
	{
		uint8 Local_u8CGRAMAdd =copy_u8PatternNumber*8u;
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8Iterator;
		/*set bit6 clear bit7 for setting CGRAM adress command*/
		SET_BIT(Local_u8CGRAMAdd,6u);
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	8a 83       	std	Y+2, r24	; 0x02
		/*Set CGRAM adress*/
		CLCD_voidSendCommand(Local_u8CGRAMAdd);
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCommand>
		/*write the pattern inside CGRAM*/
		for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    105c:	19 82       	std	Y+1, r1	; 0x01
    105e:	0e c0       	rjmp	.+28     	; 0x107c <CLCD_u8WriteSpecialCharacter+0x68>
		{
			CLCD_voidSendData(copy_pu8PatternArr[Local_u8Iterator]);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		/*set bit6 clear bit7 for setting CGRAM adress command*/
		SET_BIT(Local_u8CGRAMAdd,6u);
		/*Set CGRAM adress*/
		CLCD_voidSendCommand(Local_u8CGRAMAdd);
		/*write the pattern inside CGRAM*/
		for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	78 f3       	brcs	.-34     	; 0x1060 <CLCD_u8WriteSpecialCharacter+0x4c>
		{
			CLCD_voidSendData(copy_pu8PatternArr[Local_u8Iterator]);
		}
		/*set DDRAM adress*/
		CLCD_voidGoToXY(copy_u8Xpos,copy_u8Ypos);
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	68 85       	ldd	r22, Y+8	; 0x08
    1086:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
		/*write the corresponding pattern number to be displayed from CGRAM*/
		CLCD_voidSendData(copy_u8PatternNumber);
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <CLCD_u8WriteSpecialCharacter+0x82>
	}
	else
	{
		Local_u8ErrorState=NULL_PTR;
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1098:	28 96       	adiw	r28, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <CLCD_voidClearGide>:



/*function that recieve x pos and y pos and the number of gride to be deleted*/
void CLCD_voidClearGide(uint8 Copy_Xpos,uint8 Copy_Ypos,uint8 Copy_GridNum )
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <CLCD_voidClearGide+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <CLCD_voidClearGide+0x8>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8a 83       	std	Y+2, r24	; 0x02
    10b8:	6b 83       	std	Y+3, r22	; 0x03
    10ba:	4c 83       	std	Y+4, r20	; 0x04
uint8 Local_u8Iterator;
CLCD_voidGoToXY(Copy_Xpos,Copy_Ypos);
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	6b 81       	ldd	r22, Y+3	; 0x03
    10c0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
for(Local_u8Iterator=0;Local_u8Iterator<Copy_GridNum;Local_u8Iterator++)
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	06 c0       	rjmp	.+12     	; 0x10d4 <CLCD_voidClearGide+0x2a>
{
	 CLCD_voidSendData(32);//32 is the ascii of space
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
/*function that recieve x pos and y pos and the number of gride to be deleted*/
void CLCD_voidClearGide(uint8 Copy_Xpos,uint8 Copy_Ypos,uint8 Copy_GridNum )
{
uint8 Local_u8Iterator;
CLCD_voidGoToXY(Copy_Xpos,Copy_Ypos);
for(Local_u8Iterator=0;Local_u8Iterator<Copy_GridNum;Local_u8Iterator++)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	98 17       	cp	r25, r24
    10da:	b0 f3       	brcs	.-20     	; 0x10c8 <CLCD_voidClearGide+0x1e>
{
	 CLCD_voidSendData(32);//32 is the ascii of space
}
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <CLCD_u8SendStringAtPos>:


/*function that print a string at specefic postion*/
void CLCD_u8SendStringAtPos (uint8 copy_u8XPos,uint8 copy_u8YPos,const char *copy_Chstring)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <CLCD_u8SendStringAtPos+0x6>
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <CLCD_u8SendStringAtPos+0x8>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	5c 83       	std	Y+4, r21	; 0x04
    10fc:	4b 83       	std	Y+3, r20	; 0x03
CLCD_voidGoToXY(copy_u8XPos, copy_u8YPos);
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	6a 81       	ldd	r22, Y+2	; 0x02
    1102:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

CLCD_u8SendString(copy_Chstring);
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_interface.h"


uint8 DIO_u8SetPinDirection (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum,DIO_PinDir_t copy_Dir)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	28 97       	sbiw	r28, 0x08	; 8
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	6b 83       	std	Y+3, r22	; 0x03
    1134:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1136:	19 82       	std	Y+1, r1	; 0x01
	if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 30       	cpi	r24, 0x08	; 8
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_u8SetPinDirection+0x24>
    113e:	f3 c0       	rjmp	.+486    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
	{
		if(copy_Dir==DIO_PIN_INPUT)
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	88 23       	and	r24, r24
    1144:	09 f0       	breq	.+2      	; 0x1148 <DIO_u8SetPinDirection+0x2c>
    1146:	77 c0       	rjmp	.+238    	; 0x1236 <DIO_u8SetPinDirection+0x11a>
		{
			switch (copy_Port)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	38 87       	std	Y+8, r19	; 0x08
    1150:	2f 83       	std	Y+7, r18	; 0x07
    1152:	8f 81       	ldd	r24, Y+7	; 0x07
    1154:	98 85       	ldd	r25, Y+8	; 0x08
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	59 f1       	breq	.+86     	; 0x11b2 <DIO_u8SetPinDirection+0x96>
    115c:	2f 81       	ldd	r18, Y+7	; 0x07
    115e:	38 85       	ldd	r19, Y+8	; 0x08
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <DIO_u8SetPinDirection+0x54>
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f0       	breq	.+26     	; 0x1188 <DIO_u8SetPinDirection+0x6c>
    116e:	60 c0       	rjmp	.+192    	; 0x1230 <DIO_u8SetPinDirection+0x114>
    1170:	2f 81       	ldd	r18, Y+7	; 0x07
    1172:	38 85       	ldd	r19, Y+8	; 0x08
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	89 f1       	breq	.+98     	; 0x11dc <DIO_u8SetPinDirection+0xc0>
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <DIO_u8SetPinDirection+0x6a>
    1184:	40 c0       	rjmp	.+128    	; 0x1206 <DIO_u8SetPinDirection+0xea>
    1186:	54 c0       	rjmp	.+168    	; 0x1230 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_PinNum);break;
    1188:	aa e3       	ldi	r26, 0x3A	; 58
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8SetPinDirection+0x8a>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8SetPinDirection+0x86>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	ba c0       	rjmp	.+372    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTB:CLR_BIT(DDRB,copy_PinNum);break;
    11b2:	a7 e3       	ldi	r26, 0x37	; 55
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_u8SetPinDirection+0xb4>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_u8SetPinDirection+0xb0>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	a5 c0       	rjmp	.+330    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTC:CLR_BIT(DDRC,copy_PinNum);break;
    11dc:	a4 e3       	ldi	r26, 0x34	; 52
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8SetPinDirection+0xde>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8SetPinDirection+0xda>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	90 c0       	rjmp	.+288    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTD:CLR_BIT(DDRD,copy_PinNum);break;
    1206:	a1 e3       	ldi	r26, 0x31	; 49
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e1 e3       	ldi	r30, 0x31	; 49
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_u8SetPinDirection+0x108>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_u8SetPinDirection+0x104>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	7b c0       	rjmp	.+246    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			default :Local_u8ErrorState=NOK;break;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	78 c0       	rjmp	.+240    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			}

		}
		else if(copy_Dir==DIO_PIN_OUTPUT)
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	09 f0       	breq	.+2      	; 0x123e <DIO_u8SetPinDirection+0x122>
    123c:	72 c0       	rjmp	.+228    	; 0x1322 <DIO_u8SetPinDirection+0x206>
		{
			switch (copy_Port)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3e 83       	std	Y+6, r19	; 0x06
    1246:	2d 83       	std	Y+5, r18	; 0x05
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	49 f1       	breq	.+82     	; 0x12a4 <DIO_u8SetPinDirection+0x188>
    1252:	2d 81       	ldd	r18, Y+5	; 0x05
    1254:	3e 81       	ldd	r19, Y+6	; 0x06
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <DIO_u8SetPinDirection+0x14a>
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 f0       	breq	.+24     	; 0x127c <DIO_u8SetPinDirection+0x160>
    1264:	5b c0       	rjmp	.+182    	; 0x131c <DIO_u8SetPinDirection+0x200>
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	71 f1       	breq	.+92     	; 0x12cc <DIO_u8SetPinDirection+0x1b0>
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	e9 f1       	breq	.+122    	; 0x12f4 <DIO_u8SetPinDirection+0x1d8>
    127a:	50 c0       	rjmp	.+160    	; 0x131c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_PinNum);break;
    127c:	aa e3       	ldi	r26, 0x3A	; 58
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e3       	ldi	r30, 0x3A	; 58
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPinDirection+0x17e>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8SetPinDirection+0x17a>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	41 c0       	rjmp	.+130    	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTB:SET_BIT(DDRB,copy_PinNum);break;
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinDirection+0x1a6>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinDirection+0x1a2>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	2d c0       	rjmp	.+90     	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTC:SET_BIT(DDRC,copy_PinNum);break;
    12cc:	a4 e3       	ldi	r26, 0x34	; 52
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e4 e3       	ldi	r30, 0x34	; 52
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8SetPinDirection+0x1ce>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8SetPinDirection+0x1ca>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	19 c0       	rjmp	.+50     	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			case DIO_PORTD:SET_BIT(DDRD,copy_PinNum);break;
    12f4:	a1 e3       	ldi	r26, 0x31	; 49
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e1 e3       	ldi	r30, 0x31	; 49
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8SetPinDirection+0x1f6>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8SetPinDirection+0x1f2>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			default :Local_u8ErrorState=NOK;break;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorState;
    1326:	89 81       	ldd	r24, Y+1	; 0x01


}	
    1328:	28 96       	adiw	r28, 0x08	; 8
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <DIO_SetPortDirection>:
uint8 DIO_SetPortDirection (DIO_Port_t copy_Port ,uint8 copy_u8Port_Dir )
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_SetPortDirection+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_SetPortDirection+0x8>
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState= OK;
    134c:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_Port)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3d 83       	std	Y+5, r19	; 0x05
    1356:	2c 83       	std	Y+4, r18	; 0x04
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	91 05       	cpc	r25, r1
    1360:	d1 f0       	breq	.+52     	; 0x1396 <DIO_SetPortDirection+0x5c>
    1362:	2c 81       	ldd	r18, Y+4	; 0x04
    1364:	3d 81       	ldd	r19, Y+5	; 0x05
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	2c f4       	brge	.+10     	; 0x1376 <DIO_SetPortDirection+0x3c>
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 f0       	breq	.+24     	; 0x138c <DIO_SetPortDirection+0x52>
    1374:	1f c0       	rjmp	.+62     	; 0x13b4 <DIO_SetPortDirection+0x7a>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <DIO_SetPortDirection+0x66>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <DIO_SetPortDirection+0x70>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <DIO_SetPortDirection+0x7a>
	{
	case DIO_PORTA:DDRA=copy_u8Port_Dir;break;
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	80 83       	st	Z, r24
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <DIO_SetPortDirection+0x7e>
	case DIO_PORTB:DDRB=copy_u8Port_Dir;break;
    1396:	e7 e3       	ldi	r30, 0x37	; 55
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	80 83       	st	Z, r24
    139e:	0c c0       	rjmp	.+24     	; 0x13b8 <DIO_SetPortDirection+0x7e>
	case DIO_PORTC:DDRC=copy_u8Port_Dir;break;
    13a0:	e4 e3       	ldi	r30, 0x34	; 52
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	80 83       	st	Z, r24
    13a8:	07 c0       	rjmp	.+14     	; 0x13b8 <DIO_SetPortDirection+0x7e>
	case DIO_PORTD:DDRD=copy_u8Port_Dir;break;
    13aa:	e1 e3       	ldi	r30, 0x31	; 49
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	80 83       	st	Z, r24
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_SetPortDirection+0x7e>
	default :Local_u8ErrorState=NOK;break;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum,DIO_PinVal_t  copy_Val)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	28 97       	sbiw	r28, 0x08	; 8
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	6b 83       	std	Y+3, r22	; 0x03
    13e2:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 30       	cpi	r24, 0x08	; 8
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_u8SetPinValue+0x24>
    13ec:	f3 c0       	rjmp	.+486    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
	{
		if(copy_Val==DIO_PIN_LOW)
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	88 23       	and	r24, r24
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <DIO_u8SetPinValue+0x2c>
    13f4:	77 c0       	rjmp	.+238    	; 0x14e4 <DIO_u8SetPinValue+0x11a>
		{
			switch (copy_Port)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	38 87       	std	Y+8, r19	; 0x08
    13fe:	2f 83       	std	Y+7, r18	; 0x07
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	59 f1       	breq	.+86     	; 0x1460 <DIO_u8SetPinValue+0x96>
    140a:	2f 81       	ldd	r18, Y+7	; 0x07
    140c:	38 85       	ldd	r19, Y+8	; 0x08
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <DIO_u8SetPinValue+0x54>
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	98 85       	ldd	r25, Y+8	; 0x08
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f0       	breq	.+26     	; 0x1436 <DIO_u8SetPinValue+0x6c>
    141c:	60 c0       	rjmp	.+192    	; 0x14de <DIO_u8SetPinValue+0x114>
    141e:	2f 81       	ldd	r18, Y+7	; 0x07
    1420:	38 85       	ldd	r19, Y+8	; 0x08
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	89 f1       	breq	.+98     	; 0x148a <DIO_u8SetPinValue+0xc0>
    1428:	8f 81       	ldd	r24, Y+7	; 0x07
    142a:	98 85       	ldd	r25, Y+8	; 0x08
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <DIO_u8SetPinValue+0x6a>
    1432:	40 c0       	rjmp	.+128    	; 0x14b4 <DIO_u8SetPinValue+0xea>
    1434:	54 c0       	rjmp	.+168    	; 0x14de <DIO_u8SetPinValue+0x114>
			{
			case DIO_PORTA:CLR_BIT(PORTA,copy_PinNum);break;
    1436:	ab e3       	ldi	r26, 0x3B	; 59
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e3       	ldi	r30, 0x3B	; 59
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_u8SetPinValue+0x8a>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_u8SetPinValue+0x86>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	ba c0       	rjmp	.+372    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTB:CLR_BIT(PORTB,copy_PinNum);break;
    1460:	a8 e3       	ldi	r26, 0x38	; 56
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8SetPinValue+0xb4>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8SetPinValue+0xb0>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	a5 c0       	rjmp	.+330    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTC:CLR_BIT(PORTC,copy_PinNum);break;
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8SetPinValue+0xde>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8SetPinValue+0xda>
    14ac:	80 95       	com	r24
    14ae:	84 23       	and	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	90 c0       	rjmp	.+288    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTD:CLR_BIT(PORTD,copy_PinNum);break;
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8SetPinValue+0x108>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_u8SetPinValue+0x104>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	7b c0       	rjmp	.+246    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			default :Local_u8ErrorState=NOK;break;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	78 c0       	rjmp	.+240    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			}


		}
		else if(copy_Val==DIO_PIN_HIGH)
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	09 f0       	breq	.+2      	; 0x14ec <DIO_u8SetPinValue+0x122>
    14ea:	72 c0       	rjmp	.+228    	; 0x15d0 <DIO_u8SetPinValue+0x206>
		{
			switch (copy_Port)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	49 f1       	breq	.+82     	; 0x1552 <DIO_u8SetPinValue+0x188>
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <DIO_u8SetPinValue+0x14a>
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_u8SetPinValue+0x160>
    1512:	5b c0       	rjmp	.+182    	; 0x15ca <DIO_u8SetPinValue+0x200>
    1514:	2d 81       	ldd	r18, Y+5	; 0x05
    1516:	3e 81       	ldd	r19, Y+6	; 0x06
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	71 f1       	breq	.+92     	; 0x157a <DIO_u8SetPinValue+0x1b0>
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	e9 f1       	breq	.+122    	; 0x15a2 <DIO_u8SetPinValue+0x1d8>
    1528:	50 c0       	rjmp	.+160    	; 0x15ca <DIO_u8SetPinValue+0x200>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_PinNum);break;
    152a:	ab e3       	ldi	r26, 0x3B	; 59
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinValue+0x17e>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinValue+0x17a>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	41 c0       	rjmp	.+130    	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTB:SET_BIT(PORTB,copy_PinNum);break;
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinValue+0x1a6>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinValue+0x1a2>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	2d c0       	rjmp	.+90     	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTC:SET_BIT(PORTC,copy_PinNum);break;
    157a:	a5 e3       	ldi	r26, 0x35	; 53
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinValue+0x1ce>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinValue+0x1ca>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	19 c0       	rjmp	.+50     	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			case DIO_PORTD:SET_BIT(PORTD,copy_PinNum);break;
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPinValue+0x1f6>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8SetPinValue+0x1f2>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			default :Local_u8ErrorState=NOK;break;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_u8SetPinValue+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
		}
	}


	return Local_u8ErrorState;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    15d6:	28 96       	adiw	r28, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_SetPortValue>:

uint8 DIO_SetPortValue (DIO_Port_t copy_Port ,uint8 copy_u8PortVal )
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <DIO_SetPortValue+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <DIO_SetPortValue+0x8>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=OK;
    15fa:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_Port)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3d 83       	std	Y+5, r19	; 0x05
    1604:	2c 83       	std	Y+4, r18	; 0x04
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	d1 f0       	breq	.+52     	; 0x1644 <DIO_SetPortValue+0x5c>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <DIO_SetPortValue+0x3c>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <DIO_SetPortValue+0x52>
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <DIO_SetPortValue+0x7a>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <DIO_SetPortValue+0x66>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <DIO_SetPortValue+0x70>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <DIO_SetPortValue+0x7a>
	{
	case DIO_PORTA:PORTA=copy_u8PortVal;break;
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	80 83       	st	Z, r24
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <DIO_SetPortValue+0x7e>
	case DIO_PORTB:PORTB=copy_u8PortVal;break;
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	80 83       	st	Z, r24
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <DIO_SetPortValue+0x7e>
	case DIO_PORTC:PORTC=copy_u8PortVal;break;
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	80 83       	st	Z, r24
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <DIO_SetPortValue+0x7e>
	case DIO_PORTD:PORTD=copy_u8PortVal;break;
    1658:	e2 e3       	ldi	r30, 0x32	; 50
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	80 83       	st	Z, r24
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_SetPortValue+0x7e>
	default :Local_u8ErrorState=NOK;break;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    1666:	89 81       	ldd	r24, Y+1	; 0x01

}	
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <DIO_u8GetPinValue>:
uint8  DIO_u8GetPinValue (DIO_Port_t copy_Port, DIO_Pin_t copy_PinNum, DIO_PinVal_t*  copy_pVal)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	27 97       	sbiw	r28, 0x07	; 7
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	6b 83       	std	Y+3, r22	; 0x03
    1690:	5d 83       	std	Y+5, r21	; 0x05
    1692:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState=OK;
    1694:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pVal!=NULL)
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_u8GetPinValue+0x28>
    169e:	7b c0       	rjmp	.+246    	; 0x1796 <DIO_u8GetPinValue+0x11e>
	{
		if((copy_PinNum>=DIO_PIN0)&&(copy_PinNum<=DIO_PIN7))
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 30       	cpi	r24, 0x08	; 8
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <DIO_u8GetPinValue+0x30>
    16a6:	74 c0       	rjmp	.+232    	; 0x1790 <DIO_u8GetPinValue+0x118>
		{
			switch(copy_Port)
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3f 83       	std	Y+7, r19	; 0x07
    16b0:	2e 83       	std	Y+6, r18	; 0x06
    16b2:	4e 81       	ldd	r20, Y+6	; 0x06
    16b4:	5f 81       	ldd	r21, Y+7	; 0x07
    16b6:	41 30       	cpi	r20, 0x01	; 1
    16b8:	51 05       	cpc	r21, r1
    16ba:	59 f1       	breq	.+86     	; 0x1712 <DIO_u8GetPinValue+0x9a>
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	91 05       	cpc	r25, r1
    16c4:	34 f4       	brge	.+12     	; 0x16d2 <DIO_u8GetPinValue+0x5a>
    16c6:	2e 81       	ldd	r18, Y+6	; 0x06
    16c8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ca:	21 15       	cp	r18, r1
    16cc:	31 05       	cpc	r19, r1
    16ce:	69 f0       	breq	.+26     	; 0x16ea <DIO_u8GetPinValue+0x72>
    16d0:	5c c0       	rjmp	.+184    	; 0x178a <DIO_u8GetPinValue+0x112>
    16d2:	4e 81       	ldd	r20, Y+6	; 0x06
    16d4:	5f 81       	ldd	r21, Y+7	; 0x07
    16d6:	42 30       	cpi	r20, 0x02	; 2
    16d8:	51 05       	cpc	r21, r1
    16da:	79 f1       	breq	.+94     	; 0x173a <DIO_u8GetPinValue+0xc2>
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_u8GetPinValue+0x70>
    16e6:	3d c0       	rjmp	.+122    	; 0x1762 <DIO_u8GetPinValue+0xea>
    16e8:	50 c0       	rjmp	.+160    	; 0x178a <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA:*copy_pVal=GET_BIT(PINA,copy_PinNum);break;
    16ea:	e9 e3       	ldi	r30, 0x39	; 57
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a9 01       	movw	r20, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_u8GetPinValue+0x8a>
    16fe:	55 95       	asr	r21
    1700:	47 95       	ror	r20
    1702:	8a 95       	dec	r24
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_u8GetPinValue+0x86>
    1706:	ca 01       	movw	r24, r20
    1708:	81 70       	andi	r24, 0x01	; 1
    170a:	ec 81       	ldd	r30, Y+4	; 0x04
    170c:	fd 81       	ldd	r31, Y+5	; 0x05
    170e:	80 83       	st	Z, r24
    1710:	44 c0       	rjmp	.+136    	; 0x179a <DIO_u8GetPinValue+0x122>
			case DIO_PORTB:*copy_pVal=GET_BIT(PINB,copy_PinNum);break;
    1712:	e6 e3       	ldi	r30, 0x36	; 54
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a9 01       	movw	r20, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_u8GetPinValue+0xb2>
    1726:	55 95       	asr	r21
    1728:	47 95       	ror	r20
    172a:	8a 95       	dec	r24
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_u8GetPinValue+0xae>
    172e:	ca 01       	movw	r24, r20
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	ec 81       	ldd	r30, Y+4	; 0x04
    1734:	fd 81       	ldd	r31, Y+5	; 0x05
    1736:	80 83       	st	Z, r24
    1738:	30 c0       	rjmp	.+96     	; 0x179a <DIO_u8GetPinValue+0x122>
			case DIO_PORTC:*copy_pVal=GET_BIT(PINC,copy_PinNum);break;
    173a:	e3 e3       	ldi	r30, 0x33	; 51
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a9 01       	movw	r20, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_u8GetPinValue+0xda>
    174e:	55 95       	asr	r21
    1750:	47 95       	ror	r20
    1752:	8a 95       	dec	r24
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_u8GetPinValue+0xd6>
    1756:	ca 01       	movw	r24, r20
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	ec 81       	ldd	r30, Y+4	; 0x04
    175c:	fd 81       	ldd	r31, Y+5	; 0x05
    175e:	80 83       	st	Z, r24
    1760:	1c c0       	rjmp	.+56     	; 0x179a <DIO_u8GetPinValue+0x122>
			case DIO_PORTD:*copy_pVal=GET_BIT(PIND,copy_PinNum);break;
    1762:	e0 e3       	ldi	r30, 0x30	; 48
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8GetPinValue+0x102>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8GetPinValue+0xfe>
    177e:	ca 01       	movw	r24, r20
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	ec 81       	ldd	r30, Y+4	; 0x04
    1784:	fd 81       	ldd	r31, Y+5	; 0x05
    1786:	80 83       	st	Z, r24
    1788:	08 c0       	rjmp	.+16     	; 0x179a <DIO_u8GetPinValue+0x122>
			default :Local_u8ErrorState=NOK;break;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	05 c0       	rjmp	.+10     	; 0x179a <DIO_u8GetPinValue+0x122>
			}

		}
		else
		{
			Local_u8ErrorState=NOK;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState=NULL_PTR;
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    179a:	89 81       	ldd	r24, Y+1	; 0x01

}	
    179c:	27 96       	adiw	r28, 0x07	; 7
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_reg.h"
#include "PORT_interface.h"

void PORT_voidInit (void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    17b6:	ea e3       	ldi	r30, 0x3A	; 58
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8e e7       	ldi	r24, 0x7E	; 126
    17bc:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    17be:	e7 e3       	ldi	r30, 0x37	; 55
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    17ca:	e1 e3       	ldi	r30, 0x31	; 49
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1
	
	
	PORTA=PORTA_INITVAL;
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	10 82       	st	Z, r1
	PORTB=PORTB_INITVAL;
    17d6:	e8 e3       	ldi	r30, 0x38	; 56
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	87 e0       	ldi	r24, 0x07	; 7
    17dc:	80 83       	st	Z, r24
    PORTC=PORTC_INITVAL;
    17de:	e5 e3       	ldi	r30, 0x35	; 53
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1
    PORTD=PORTD_INITVAL;
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	10 82       	st	Z, r1
	
	
	
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <CLCD_voidCalc>:
 sint32 Local_s32Num2=1;
 sint32 Local_s32Result;
 sint8 Local_s8Iterator1;
char ch_Operation[4]={'+','-','*','/'};
void  CLCD_voidCalc(void)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2e 97       	sbiw	r28, 0x0e	; 14
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
	 sint32 Local_s32Quotian;
	 sint32 Local_S32Remainder;

//	extern char ch_Operation[4]={'+','-','*','/'};

	switch (Local_s8Iterator1)
    1804:	80 91 a4 00 	lds	r24, 0x00A4
    1808:	28 2f       	mov	r18, r24
    180a:	33 27       	eor	r19, r19
    180c:	27 fd       	sbrc	r18, 7
    180e:	30 95       	com	r19
    1810:	3e 87       	std	Y+14, r19	; 0x0e
    1812:	2d 87       	std	Y+13, r18	; 0x0d
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	a1 f1       	breq	.+104    	; 0x1886 <CLCD_voidCalc+0x96>
    181e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1820:	3e 85       	ldd	r19, Y+14	; 0x0e
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <CLCD_voidCalc+0x42>
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	71 f0       	breq	.+28     	; 0x184c <CLCD_voidCalc+0x5c>
    1830:	c1 c0       	rjmp	.+386    	; 0x19b4 <CLCD_voidCalc+0x1c4>
    1832:	2d 85       	ldd	r18, Y+13	; 0x0d
    1834:	3e 85       	ldd	r19, Y+14	; 0x0e
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <CLCD_voidCalc+0x4e>
    183c:	41 c0       	rjmp	.+130    	; 0x18c0 <CLCD_voidCalc+0xd0>
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <CLCD_voidCalc+0x5a>
    1848:	5a c0       	rjmp	.+180    	; 0x18fe <CLCD_voidCalc+0x10e>
    184a:	b4 c0       	rjmp	.+360    	; 0x19b4 <CLCD_voidCalc+0x1c4>
	{
	case 0: Local_s32Result= Local_s32Num1+Local_s32Num2;break;
    184c:	80 91 8b 00 	lds	r24, 0x008B
    1850:	90 91 8c 00 	lds	r25, 0x008C
    1854:	a0 91 8d 00 	lds	r26, 0x008D
    1858:	b0 91 8e 00 	lds	r27, 0x008E
    185c:	20 91 8f 00 	lds	r18, 0x008F
    1860:	30 91 90 00 	lds	r19, 0x0090
    1864:	40 91 91 00 	lds	r20, 0x0091
    1868:	50 91 92 00 	lds	r21, 0x0092
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	a4 1f       	adc	r26, r20
    1872:	b5 1f       	adc	r27, r21
    1874:	80 93 a0 00 	sts	0x00A0, r24
    1878:	90 93 a1 00 	sts	0x00A1, r25
    187c:	a0 93 a2 00 	sts	0x00A2, r26
    1880:	b0 93 a3 00 	sts	0x00A3, r27
    1884:	97 c0       	rjmp	.+302    	; 0x19b4 <CLCD_voidCalc+0x1c4>

	case 1:Local_s32Result= (Local_s32Num1-Local_s32Num2); break;
    1886:	80 91 8b 00 	lds	r24, 0x008B
    188a:	90 91 8c 00 	lds	r25, 0x008C
    188e:	a0 91 8d 00 	lds	r26, 0x008D
    1892:	b0 91 8e 00 	lds	r27, 0x008E
    1896:	20 91 8f 00 	lds	r18, 0x008F
    189a:	30 91 90 00 	lds	r19, 0x0090
    189e:	40 91 91 00 	lds	r20, 0x0091
    18a2:	50 91 92 00 	lds	r21, 0x0092
    18a6:	82 1b       	sub	r24, r18
    18a8:	93 0b       	sbc	r25, r19
    18aa:	a4 0b       	sbc	r26, r20
    18ac:	b5 0b       	sbc	r27, r21
    18ae:	80 93 a0 00 	sts	0x00A0, r24
    18b2:	90 93 a1 00 	sts	0x00A1, r25
    18b6:	a0 93 a2 00 	sts	0x00A2, r26
    18ba:	b0 93 a3 00 	sts	0x00A3, r27
    18be:	7a c0       	rjmp	.+244    	; 0x19b4 <CLCD_voidCalc+0x1c4>

	case 2:Local_s32Result=(Local_s32Num1*Local_s32Num2); break;
    18c0:	80 91 8b 00 	lds	r24, 0x008B
    18c4:	90 91 8c 00 	lds	r25, 0x008C
    18c8:	a0 91 8d 00 	lds	r26, 0x008D
    18cc:	b0 91 8e 00 	lds	r27, 0x008E
    18d0:	20 91 8f 00 	lds	r18, 0x008F
    18d4:	30 91 90 00 	lds	r19, 0x0090
    18d8:	40 91 91 00 	lds	r20, 0x0091
    18dc:	50 91 92 00 	lds	r21, 0x0092
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__mulsi3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	80 93 a0 00 	sts	0x00A0, r24
    18f0:	90 93 a1 00 	sts	0x00A1, r25
    18f4:	a0 93 a2 00 	sts	0x00A2, r26
    18f8:	b0 93 a3 00 	sts	0x00A3, r27
    18fc:	5b c0       	rjmp	.+182    	; 0x19b4 <CLCD_voidCalc+0x1c4>

	case 3:

		Local_s32ScaledResult=(Local_s32Num1*100)/Local_s32Num2;
    18fe:	80 91 8b 00 	lds	r24, 0x008B
    1902:	90 91 8c 00 	lds	r25, 0x008C
    1906:	a0 91 8d 00 	lds	r26, 0x008D
    190a:	b0 91 8e 00 	lds	r27, 0x008E
    190e:	24 e6       	ldi	r18, 0x64	; 100
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__mulsi3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	20 91 8f 00 	lds	r18, 0x008F
    1926:	30 91 90 00 	lds	r19, 0x0090
    192a:	40 91 91 00 	lds	r20, 0x0091
    192e:	50 91 92 00 	lds	r21, 0x0092
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodsi4>
    193a:	da 01       	movw	r26, r20
    193c:	c9 01       	movw	r24, r18
    193e:	89 87       	std	Y+9, r24	; 0x09
    1940:	9a 87       	std	Y+10, r25	; 0x0a
    1942:	ab 87       	std	Y+11, r26	; 0x0b
    1944:	bc 87       	std	Y+12, r27	; 0x0c
	       Local_s32Quotian=Local_s32ScaledResult/100;
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	ab 85       	ldd	r26, Y+11	; 0x0b
    194c:	bc 85       	ldd	r27, Y+12	; 0x0c
    194e:	24 e6       	ldi	r18, 0x64	; 100
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodsi4>
    195e:	da 01       	movw	r26, r20
    1960:	c9 01       	movw	r24, r18
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	af 83       	std	Y+7, r26	; 0x07
    1968:	b8 87       	std	Y+8, r27	; 0x08
	       Local_S32Remainder=Local_s32ScaledResult%100;
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1970:	bc 85       	ldd	r27, Y+12	; 0x0c
    1972:	24 e6       	ldi	r18, 0x64	; 100
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodsi4>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	ab 83       	std	Y+3, r26	; 0x03
    198c:	bc 83       	std	Y+4, r27	; 0x04

	       CLCD_voidSendNumber(Local_s32Quotian);
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	af 81       	ldd	r26, Y+7	; 0x07
    1994:	b8 85       	ldd	r27, Y+8	; 0x08
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
           CLCD_voidSendData('.');
    199e:	8e e2       	ldi	r24, 0x2E	; 46
    19a0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
	       CLCD_voidSendNumber( Local_S32Remainder);
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	ab 81       	ldd	r26, Y+3	; 0x03
    19aa:	bc 81       	ldd	r27, Y+4	; 0x04
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
	       break;


	}

}
    19b4:	2e 96       	adiw	r28, 0x0e	; 14
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <main>:




void main(void)
{
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	c6 51       	subi	r28, 0x16	; 22
    19d4:	d1 40       	sbci	r29, 0x01	; 1
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
	uint8  Local_u8MyPattern[8] ={0b100,0b1110,0b11111,0b100,0b100,0b100,0b100,0};
    19e0:	ce 01       	movw	r24, r28
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	9e 4f       	sbci	r25, 0xFE	; 254
    19e6:	ce 5e       	subi	r28, 0xEE	; 238
    19e8:	de 4f       	sbci	r29, 0xFE	; 254
    19ea:	99 83       	std	Y+1, r25	; 0x01
    19ec:	88 83       	st	Y, r24
    19ee:	c2 51       	subi	r28, 0x12	; 18
    19f0:	d1 40       	sbci	r29, 0x01	; 1
    19f2:	27 e9       	ldi	r18, 0x97	; 151
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	cc 5e       	subi	r28, 0xEC	; 236
    19f8:	de 4f       	sbci	r29, 0xFE	; 254
    19fa:	39 83       	std	Y+1, r19	; 0x01
    19fc:	28 83       	st	Y, r18
    19fe:	c4 51       	subi	r28, 0x14	; 20
    1a00:	d1 40       	sbci	r29, 0x01	; 1
    1a02:	38 e0       	ldi	r19, 0x08	; 8
    1a04:	ca 5e       	subi	r28, 0xEA	; 234
    1a06:	de 4f       	sbci	r29, 0xFE	; 254
    1a08:	38 83       	st	Y, r19
    1a0a:	c6 51       	subi	r28, 0x16	; 22
    1a0c:	d1 40       	sbci	r29, 0x01	; 1
    1a0e:	cc 5e       	subi	r28, 0xEC	; 236
    1a10:	de 4f       	sbci	r29, 0xFE	; 254
    1a12:	e8 81       	ld	r30, Y
    1a14:	f9 81       	ldd	r31, Y+1	; 0x01
    1a16:	c4 51       	subi	r28, 0x14	; 20
    1a18:	d1 40       	sbci	r29, 0x01	; 1
    1a1a:	00 80       	ld	r0, Z
    1a1c:	cc 5e       	subi	r28, 0xEC	; 236
    1a1e:	de 4f       	sbci	r29, 0xFE	; 254
    1a20:	28 81       	ld	r18, Y
    1a22:	39 81       	ldd	r19, Y+1	; 0x01
    1a24:	c4 51       	subi	r28, 0x14	; 20
    1a26:	d1 40       	sbci	r29, 0x01	; 1
    1a28:	2f 5f       	subi	r18, 0xFF	; 255
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	cc 5e       	subi	r28, 0xEC	; 236
    1a2e:	de 4f       	sbci	r29, 0xFE	; 254
    1a30:	39 83       	std	Y+1, r19	; 0x01
    1a32:	28 83       	st	Y, r18
    1a34:	c4 51       	subi	r28, 0x14	; 20
    1a36:	d1 40       	sbci	r29, 0x01	; 1
    1a38:	ce 5e       	subi	r28, 0xEE	; 238
    1a3a:	de 4f       	sbci	r29, 0xFE	; 254
    1a3c:	e8 81       	ld	r30, Y
    1a3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a40:	c2 51       	subi	r28, 0x12	; 18
    1a42:	d1 40       	sbci	r29, 0x01	; 1
    1a44:	00 82       	st	Z, r0
    1a46:	ce 5e       	subi	r28, 0xEE	; 238
    1a48:	de 4f       	sbci	r29, 0xFE	; 254
    1a4a:	28 81       	ld	r18, Y
    1a4c:	39 81       	ldd	r19, Y+1	; 0x01
    1a4e:	c2 51       	subi	r28, 0x12	; 18
    1a50:	d1 40       	sbci	r29, 0x01	; 1
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	ce 5e       	subi	r28, 0xEE	; 238
    1a58:	de 4f       	sbci	r29, 0xFE	; 254
    1a5a:	39 83       	std	Y+1, r19	; 0x01
    1a5c:	28 83       	st	Y, r18
    1a5e:	c2 51       	subi	r28, 0x12	; 18
    1a60:	d1 40       	sbci	r29, 0x01	; 1
    1a62:	ca 5e       	subi	r28, 0xEA	; 234
    1a64:	de 4f       	sbci	r29, 0xFE	; 254
    1a66:	38 81       	ld	r19, Y
    1a68:	c6 51       	subi	r28, 0x16	; 22
    1a6a:	d1 40       	sbci	r29, 0x01	; 1
    1a6c:	31 50       	subi	r19, 0x01	; 1
    1a6e:	ca 5e       	subi	r28, 0xEA	; 234
    1a70:	de 4f       	sbci	r29, 0xFE	; 254
    1a72:	38 83       	st	Y, r19
    1a74:	c6 51       	subi	r28, 0x16	; 22
    1a76:	d1 40       	sbci	r29, 0x01	; 1
    1a78:	ca 5e       	subi	r28, 0xEA	; 234
    1a7a:	de 4f       	sbci	r29, 0xFE	; 254
    1a7c:	88 81       	ld	r24, Y
    1a7e:	c6 51       	subi	r28, 0x16	; 22
    1a80:	d1 40       	sbci	r29, 0x01	; 1
    1a82:	88 23       	and	r24, r24
    1a84:	21 f6       	brne	.-120    	; 0x1a0e <main+0x48>
	uint8 Local_u8Xpos=0;
    1a86:	fe 01       	movw	r30, r28
    1a88:	e0 50       	subi	r30, 0x00	; 0
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	10 82       	st	Z, r1
	uint8 Local_u8Ypos=1;
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e1 50       	subi	r30, 0x01	; 1
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 83       	st	Z, r24
	uint8 Local_DDRAMXPos=0;
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e2 50       	subi	r30, 0x02	; 2
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	10 82       	st	Z, r1
	uint8 Local_u8DDRAMYPos=0;
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e3 50       	subi	r30, 0x03	; 3
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	10 82       	st	Z, r1
	uint8 Local_u8PinDownRead;
	uint8 Local_u8PinEnterRead;

	/*set CLCD pins as output */

	PORT_voidInit();
    1aa8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <PORT_voidInit>
	CLCD_voidInit ();
    1aac:	0e 94 98 06 	call	0xd30	; 0xd30 <CLCD_voidInit>



	while(1)
	{
		CLCD_voidSendNumber(Local_s32Num1);
    1ab0:	80 91 8b 00 	lds	r24, 0x008B
    1ab4:	90 91 8c 00 	lds	r25, 0x008C
    1ab8:	a0 91 8d 00 	lds	r26, 0x008D
    1abc:	b0 91 8e 00 	lds	r27, 0x008E
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
		CLCD_voidSendData ('+');
    1ac8:	8b e2       	ldi	r24, 0x2B	; 43
    1aca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		CLCD_voidSendNumber(Local_s32Num2);
    1ace:	80 91 8f 00 	lds	r24, 0x008F
    1ad2:	90 91 90 00 	lds	r25, 0x0090
    1ad6:	a0 91 91 00 	lds	r26, 0x0091
    1ada:	b0 91 92 00 	lds	r27, 0x0092
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>

		CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);
    1ae6:	9e 01       	movw	r18, r28
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3e 4f       	sbci	r19, 0xFE	; 254
    1aec:	fe 01       	movw	r30, r28
    1aee:	e0 50       	subi	r30, 0x00	; 0
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	de 01       	movw	r26, r28
    1af4:	a1 50       	subi	r26, 0x01	; 1
    1af6:	bf 4f       	sbci	r27, 0xFF	; 255
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	b9 01       	movw	r22, r18
    1afc:	40 81       	ld	r20, Z
    1afe:	2c 91       	ld	r18, X
    1b00:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_u8WriteSpecialCharacter>
    1b04:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <main+0x1ee2>



		while(Local_u8Xpos<=4)
		{
			DIO_u8GetPinValue(CLCD_u8Cal_PORT, CLCD_u8UP_PIN ,&Local_u8PinUPRead);
    1b08:	9e 01       	movw	r18, r28
    1b0a:	27 5f       	subi	r18, 0xF7	; 247
    1b0c:	3e 4f       	sbci	r19, 0xFE	; 254
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(CLCD_u8Cal_PORT, CLCD_u8DOWN_PIN ,&Local_u8PinDownRead);
    1b18:	9e 01       	movw	r18, r28
    1b1a:	26 5f       	subi	r18, 0xF6	; 246
    1b1c:	3e 4f       	sbci	r19, 0xFE	; 254
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	a9 01       	movw	r20, r18
    1b24:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(CLCD_u8Cal_PORT, CLCD_u8ENTER_PIN ,&Local_u8PinEnterRead);
    1b28:	9e 01       	movw	r18, r28
    1b2a:	25 5f       	subi	r18, 0xF5	; 245
    1b2c:	3e 4f       	sbci	r19, 0xFE	; 254
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	a9 01       	movw	r20, r18
    1b34:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DIO_u8GetPinValue>


			if(Local_u8PinUPRead ==DIO_PIN_LOW)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5f       	subi	r30, 0xF7	; 247
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 23       	and	r24, r24
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <main+0x180>
    1b44:	2e c5       	rjmp	.+2652   	; 0x25a2 <main+0xbdc>
			{
				switch (Local_u8Xpos)
    1b46:	fe 01       	movw	r30, r28
    1b48:	e0 50       	subi	r30, 0x00	; 0
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	e8 2f       	mov	r30, r24
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	c0 5f       	subi	r28, 0xF0	; 240
    1b54:	de 4f       	sbci	r29, 0xFE	; 254
    1b56:	f9 83       	std	Y+1, r31	; 0x01
    1b58:	e8 83       	st	Y, r30
    1b5a:	c0 51       	subi	r28, 0x10	; 16
    1b5c:	d1 40       	sbci	r29, 0x01	; 1
    1b5e:	c0 5f       	subi	r28, 0xF0	; 240
    1b60:	de 4f       	sbci	r29, 0xFE	; 254
    1b62:	28 81       	ld	r18, Y
    1b64:	39 81       	ldd	r19, Y+1	; 0x01
    1b66:	c0 51       	subi	r28, 0x10	; 16
    1b68:	d1 40       	sbci	r29, 0x01	; 1
    1b6a:	21 30       	cpi	r18, 0x01	; 1
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <main+0x1ac>
    1b70:	c9 c1       	rjmp	.+914    	; 0x1f04 <main+0x53e>
    1b72:	c0 5f       	subi	r28, 0xF0	; 240
    1b74:	de 4f       	sbci	r29, 0xFE	; 254
    1b76:	88 81       	ld	r24, Y
    1b78:	99 81       	ldd	r25, Y+1	; 0x01
    1b7a:	c0 51       	subi	r28, 0x10	; 16
    1b7c:	d1 40       	sbci	r29, 0x01	; 1
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	91 05       	cpc	r25, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <main+0x1c0>
    1b84:	94 c2       	rjmp	.+1320   	; 0x20ae <main+0x6e8>
    1b86:	c0 5f       	subi	r28, 0xF0	; 240
    1b88:	de 4f       	sbci	r29, 0xFE	; 254
    1b8a:	e8 81       	ld	r30, Y
    1b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8e:	c0 51       	subi	r28, 0x10	; 16
    1b90:	d1 40       	sbci	r29, 0x01	; 1
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <main+0x1d2>
    1b96:	05 c5       	rjmp	.+2570   	; 0x25a2 <main+0xbdc>
				{
				case 0:CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e0 50       	subi	r30, 0x00	; 0
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	de 01       	movw	r26, r28
    1ba0:	a3 50       	subi	r26, 0x03	; 3
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	6c 91       	ld	r22, X
    1ba8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

				Local_s32Num1++;
    1bac:	80 91 8b 00 	lds	r24, 0x008B
    1bb0:	90 91 8c 00 	lds	r25, 0x008C
    1bb4:	a0 91 8d 00 	lds	r26, 0x008D
    1bb8:	b0 91 8e 00 	lds	r27, 0x008E
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	80 93 8b 00 	sts	0x008B, r24
    1bc6:	90 93 8c 00 	sts	0x008C, r25
    1bca:	a0 93 8d 00 	sts	0x008D, r26
    1bce:	b0 93 8e 00 	sts	0x008E, r27
				if(Local_s32Num1==10)
    1bd2:	80 91 8b 00 	lds	r24, 0x008B
    1bd6:	90 91 8c 00 	lds	r25, 0x008C
    1bda:	a0 91 8d 00 	lds	r26, 0x008D
    1bde:	b0 91 8e 00 	lds	r27, 0x008E
    1be2:	8a 30       	cpi	r24, 0x0A	; 10
    1be4:	91 05       	cpc	r25, r1
    1be6:	a1 05       	cpc	r26, r1
    1be8:	b1 05       	cpc	r27, r1
    1bea:	41 f4       	brne	.+16     	; 0x1bfc <main+0x236>
				{
					Local_s32Num1=0;
    1bec:	10 92 8b 00 	sts	0x008B, r1
    1bf0:	10 92 8c 00 	sts	0x008C, r1
    1bf4:	10 92 8d 00 	sts	0x008D, r1
    1bf8:	10 92 8e 00 	sts	0x008E, r1
				}
				CLCD_voidSendNumber(Local_s32Num1);
    1bfc:	80 91 8b 00 	lds	r24, 0x008B
    1c00:	90 91 8c 00 	lds	r25, 0x008C
    1c04:	a0 91 8d 00 	lds	r26, 0x008D
    1c08:	b0 91 8e 00 	lds	r27, 0x008E
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
				CLCD_voidGoToXY (8u,1u);
    1c14:	88 e0       	ldi	r24, 0x08	; 8
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("UP");
    1c1c:	80 e6       	ldi	r24, 0x60	; 96
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    1c24:	fe 01       	movw	r30, r28
    1c26:	e7 50       	subi	r30, 0x07	; 7
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	aa e7       	ldi	r26, 0x7A	; 122
    1c30:	b3 e4       	ldi	r27, 0x43	; 67
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	0b 50       	subi	r16, 0x0B	; 11
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	e7 50       	subi	r30, 0x07	; 7
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a ef       	ldi	r20, 0xFA	; 250
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c68:	fe 01       	movw	r30, r28
    1c6a:	eb 50       	subi	r30, 0x0B	; 11
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	44 f4       	brge	.+16     	; 0x1c96 <main+0x2d0>
		__ticks = 1;
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 50       	subi	r30, 0x0D	; 13
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	64 c0       	rjmp	.+200    	; 0x1d5e <main+0x398>
	else if (__tmp > 65535)
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 50       	subi	r30, 0x0B	; 11
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <main+0x2f0>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <main+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e7 50       	subi	r30, 0x07	; 7
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	0d 50       	subi	r16, 0x0D	; 13
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <main+0x366>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 50       	subi	r30, 0x0F	; 15
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ef 50       	subi	r30, 0x0F	; 15
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <main+0x340>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ef 50       	subi	r30, 0x0F	; 15
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	de 01       	movw	r26, r28
    1d16:	ad 50       	subi	r26, 0x0D	; 13
    1d18:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 50       	subi	r30, 0x0D	; 13
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	11 96       	adiw	r26, 0x01	; 1
    1d28:	9c 93       	st	X, r25
    1d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 50       	subi	r30, 0x0D	; 13
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	d1 f6       	brne	.-76     	; 0x1cee <main+0x328>
    1d3a:	27 c0       	rjmp	.+78     	; 0x1d8a <main+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	0d 50       	subi	r16, 0x0D	; 13
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	eb 50       	subi	r30, 0x0B	; 11
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	f8 01       	movw	r30, r16
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
    1d5e:	de 01       	movw	r26, r28
    1d60:	a1 51       	subi	r26, 0x11	; 17
    1d62:	bf 4f       	sbci	r27, 0xFF	; 255
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 50       	subi	r30, 0x0D	; 13
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	8d 93       	st	X+, r24
    1d70:	9c 93       	st	X, r25
    1d72:	fe 01       	movw	r30, r28
    1d74:	e1 51       	subi	r30, 0x11	; 17
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <main+0x3b6>
    1d80:	fe 01       	movw	r30, r28
    1d82:	e1 51       	subi	r30, 0x11	; 17
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    1d8a:	88 e0       	ldi	r24, 0x08	; 8
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("  ");
    1d92:	83 e6       	ldi	r24, 0x63	; 99
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e5 51       	subi	r30, 0x15	; 21
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	aa e7       	ldi	r26, 0x7A	; 122
    1da6:	b3 e4       	ldi	r27, 0x43	; 67
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	a2 83       	std	Z+2, r26	; 0x02
    1dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	8e 01       	movw	r16, r28
    1db2:	09 51       	subi	r16, 0x19	; 25
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e5 51       	subi	r30, 0x15	; 21
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	a2 83       	std	Z+2, r26	; 0x02
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dde:	fe 01       	movw	r30, r28
    1de0:	e9 51       	subi	r30, 0x19	; 25
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	44 f4       	brge	.+16     	; 0x1e0c <main+0x446>
		__ticks = 1;
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	eb 51       	subi	r30, 0x1B	; 27
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	64 c0       	rjmp	.+200    	; 0x1ed4 <main+0x50e>
	else if (__tmp > 65535)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e9 51       	subi	r30, 0x19	; 25
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <main+0x466>
    1e2a:	43 c0       	rjmp	.+134    	; 0x1eb2 <main+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e5 51       	subi	r30, 0x15	; 21
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	0b 51       	subi	r16, 0x1B	; 27
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	1f c0       	rjmp	.+62     	; 0x1ea2 <main+0x4dc>
    1e64:	fe 01       	movw	r30, r28
    1e66:	ed 51       	subi	r30, 0x1D	; 29
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	fe 01       	movw	r30, r28
    1e74:	ed 51       	subi	r30, 0x1D	; 29
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <main+0x4b6>
    1e80:	fe 01       	movw	r30, r28
    1e82:	ed 51       	subi	r30, 0x1D	; 29
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8a:	de 01       	movw	r26, r28
    1e8c:	ab 51       	subi	r26, 0x1B	; 27
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 51       	subi	r30, 0x1B	; 27
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	9c 93       	st	X, r25
    1ea0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	eb 51       	subi	r30, 0x1B	; 27
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	d1 f6       	brne	.-76     	; 0x1e64 <main+0x49e>
    1eb0:	78 c3       	rjmp	.+1776   	; 0x25a2 <main+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	0b 51       	subi	r16, 0x1B	; 27
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e9 51       	subi	r30, 0x19	; 25
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	f8 01       	movw	r30, r16
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	de 01       	movw	r26, r28
    1ed6:	af 51       	subi	r26, 0x1F	; 31
    1ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eda:	fe 01       	movw	r30, r28
    1edc:	eb 51       	subi	r30, 0x1B	; 27
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	11 96       	adiw	r26, 0x01	; 1
    1ee6:	9c 93       	st	X, r25
    1ee8:	8e 93       	st	-X, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	ef 51       	subi	r30, 0x1F	; 31
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <main+0x52e>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 51       	subi	r30, 0x1F	; 31
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	4f c3       	rjmp	.+1694   	; 0x25a2 <main+0xbdc>
				_delay_ms(250);break;

				case 1:
					CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    1f04:	fe 01       	movw	r30, r28
    1f06:	e0 50       	subi	r30, 0x00	; 0
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	de 01       	movw	r26, r28
    1f0c:	a3 50       	subi	r26, 0x03	; 3
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	6c 91       	ld	r22, X
    1f14:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
					Local_s8Iterator1++;
    1f18:	80 91 a4 00 	lds	r24, 0x00A4
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	80 93 a4 00 	sts	0x00A4, r24

					if(Local_s8Iterator1==4)
    1f22:	80 91 a4 00 	lds	r24, 0x00A4
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <main+0x568>
					{
						Local_s8Iterator1=0;
    1f2a:	10 92 a4 00 	sts	0x00A4, r1

					}

					CLCD_voidSendData(ch_Operation[Local_s8Iterator1]);
    1f2e:	80 91 a4 00 	lds	r24, 0x00A4
    1f32:	99 27       	eor	r25, r25
    1f34:	87 fd       	sbrc	r24, 7
    1f36:	90 95       	com	r25
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ed 56       	subi	r30, 0x6D	; 109
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    1f44:	fe 01       	movw	r30, r28
    1f46:	e3 52       	subi	r30, 0x23	; 35
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	aa e7       	ldi	r26, 0x7A	; 122
    1f50:	b3 e4       	ldi	r27, 0x43	; 67
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	07 52       	subi	r16, 0x27	; 39
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	e3 52       	subi	r30, 0x23	; 35
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a ef       	ldi	r20, 0xFA	; 250
    1f74:	54 e4       	ldi	r21, 0x44	; 68
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	f8 01       	movw	r30, r16
    1f80:	80 83       	st	Z, r24
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	a2 83       	std	Z+2, r26	; 0x02
    1f86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e7 52       	subi	r30, 0x27	; 39
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	44 f4       	brge	.+16     	; 0x1fb6 <main+0x5f0>
		__ticks = 1;
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e9 52       	subi	r30, 0x29	; 41
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	64 c0       	rjmp	.+200    	; 0x207e <main+0x6b8>
	else if (__tmp > 65535)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e7 52       	subi	r30, 0x27	; 39
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	0c f0       	brlt	.+2      	; 0x1fd6 <main+0x610>
    1fd4:	43 c0       	rjmp	.+134    	; 0x205c <main+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e3 52       	subi	r30, 0x23	; 35
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	09 52       	subi	r16, 0x29	; 41
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
    200c:	1f c0       	rjmp	.+62     	; 0x204c <main+0x686>
    200e:	fe 01       	movw	r30, r28
    2010:	eb 52       	subi	r30, 0x2B	; 43
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	fe 01       	movw	r30, r28
    201e:	eb 52       	subi	r30, 0x2B	; 43
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <main+0x660>
    202a:	fe 01       	movw	r30, r28
    202c:	eb 52       	subi	r30, 0x2B	; 43
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	de 01       	movw	r26, r28
    2036:	a9 52       	subi	r26, 0x29	; 41
    2038:	bf 4f       	sbci	r27, 0xFF	; 255
    203a:	fe 01       	movw	r30, r28
    203c:	e9 52       	subi	r30, 0x29	; 41
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	9c 93       	st	X, r25
    204a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	fe 01       	movw	r30, r28
    204e:	e9 52       	subi	r30, 0x29	; 41
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	d1 f6       	brne	.-76     	; 0x200e <main+0x648>
    205a:	a3 c2       	rjmp	.+1350   	; 0x25a2 <main+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	8e 01       	movw	r16, r28
    205e:	09 52       	subi	r16, 0x29	; 41
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e7 52       	subi	r30, 0x27	; 39
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	f8 01       	movw	r30, r16
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
    207e:	de 01       	movw	r26, r28
    2080:	ad 52       	subi	r26, 0x2D	; 45
    2082:	bf 4f       	sbci	r27, 0xFF	; 255
    2084:	fe 01       	movw	r30, r28
    2086:	e9 52       	subi	r30, 0x29	; 41
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	9c 93       	st	X, r25
    2092:	8e 93       	st	-X, r24
    2094:	fe 01       	movw	r30, r28
    2096:	ed 52       	subi	r30, 0x2D	; 45
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <main+0x6d8>
    20a2:	fe 01       	movw	r30, r28
    20a4:	ed 52       	subi	r30, 0x2D	; 45
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	7a c2       	rjmp	.+1268   	; 0x25a2 <main+0xbdc>

					_delay_ms(250);break;

				case 2:
					CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    20ae:	fe 01       	movw	r30, r28
    20b0:	e0 50       	subi	r30, 0x00	; 0
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	de 01       	movw	r26, r28
    20b6:	a3 50       	subi	r26, 0x03	; 3
    20b8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	6c 91       	ld	r22, X
    20be:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

					Local_s32Num2++;
    20c2:	80 91 8f 00 	lds	r24, 0x008F
    20c6:	90 91 90 00 	lds	r25, 0x0090
    20ca:	a0 91 91 00 	lds	r26, 0x0091
    20ce:	b0 91 92 00 	lds	r27, 0x0092
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	a1 1d       	adc	r26, r1
    20d6:	b1 1d       	adc	r27, r1
    20d8:	80 93 8f 00 	sts	0x008F, r24
    20dc:	90 93 90 00 	sts	0x0090, r25
    20e0:	a0 93 91 00 	sts	0x0091, r26
    20e4:	b0 93 92 00 	sts	0x0092, r27
					if(Local_s32Num2==10)
    20e8:	80 91 8f 00 	lds	r24, 0x008F
    20ec:	90 91 90 00 	lds	r25, 0x0090
    20f0:	a0 91 91 00 	lds	r26, 0x0091
    20f4:	b0 91 92 00 	lds	r27, 0x0092
    20f8:	8a 30       	cpi	r24, 0x0A	; 10
    20fa:	91 05       	cpc	r25, r1
    20fc:	a1 05       	cpc	r26, r1
    20fe:	b1 05       	cpc	r27, r1
    2100:	41 f4       	brne	.+16     	; 0x2112 <main+0x74c>
					{
						Local_s32Num2=0;
    2102:	10 92 8f 00 	sts	0x008F, r1
    2106:	10 92 90 00 	sts	0x0090, r1
    210a:	10 92 91 00 	sts	0x0091, r1
    210e:	10 92 92 00 	sts	0x0092, r1
					}
					CLCD_voidSendNumber(Local_s32Num2);
    2112:	80 91 8f 00 	lds	r24, 0x008F
    2116:	90 91 90 00 	lds	r25, 0x0090
    211a:	a0 91 91 00 	lds	r26, 0x0091
    211e:	b0 91 92 00 	lds	r27, 0x0092
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
					if((Local_s8Iterator1==3)&&(Local_s32Num2==0))
    212a:	80 91 a4 00 	lds	r24, 0x00A4
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	71 f4       	brne	.+28     	; 0x214e <main+0x788>
    2132:	80 91 8f 00 	lds	r24, 0x008F
    2136:	90 91 90 00 	lds	r25, 0x0090
    213a:	a0 91 91 00 	lds	r26, 0x0091
    213e:	b0 91 92 00 	lds	r27, 0x0092
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	a1 05       	cpc	r26, r1
    2146:	b1 05       	cpc	r27, r1
    2148:	11 f4       	brne	.+4      	; 0x214e <main+0x788>
    214a:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <main+0x1ee2>
										continue;
					CLCD_voidGoToXY (8u,1u);
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
					CLCD_u8SendString ("UP");
    2156:	80 e6       	ldi	r24, 0x60	; 96
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    215e:	fe 01       	movw	r30, r28
    2160:	e1 53       	subi	r30, 0x31	; 49
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	aa e7       	ldi	r26, 0x7A	; 122
    216a:	b3 e4       	ldi	r27, 0x43	; 67
    216c:	80 83       	st	Z, r24
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	8e 01       	movw	r16, r28
    2176:	05 53       	subi	r16, 0x35	; 53
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e1 53       	subi	r30, 0x31	; 49
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	f8 01       	movw	r30, r16
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a2:	fe 01       	movw	r30, r28
    21a4:	e5 53       	subi	r30, 0x35	; 53
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	44 f4       	brge	.+16     	; 0x21d0 <main+0x80a>
		__ticks = 1;
    21c0:	fe 01       	movw	r30, r28
    21c2:	e7 53       	subi	r30, 0x37	; 55
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
    21ce:	64 c0       	rjmp	.+200    	; 0x2298 <main+0x8d2>
	else if (__tmp > 65535)
    21d0:	fe 01       	movw	r30, r28
    21d2:	e5 53       	subi	r30, 0x35	; 53
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	0c f0       	brlt	.+2      	; 0x21f0 <main+0x82a>
    21ee:	43 c0       	rjmp	.+134    	; 0x2276 <main+0x8b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	fe 01       	movw	r30, r28
    21f2:	e1 53       	subi	r30, 0x31	; 49
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8e 01       	movw	r16, r28
    2210:	07 53       	subi	r16, 0x37	; 55
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	1f c0       	rjmp	.+62     	; 0x2266 <main+0x8a0>
    2228:	fe 01       	movw	r30, r28
    222a:	e9 53       	subi	r30, 0x39	; 57
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	fe 01       	movw	r30, r28
    2238:	e9 53       	subi	r30, 0x39	; 57
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <main+0x87a>
    2244:	fe 01       	movw	r30, r28
    2246:	e9 53       	subi	r30, 0x39	; 57
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	de 01       	movw	r26, r28
    2250:	a7 53       	subi	r26, 0x37	; 55
    2252:	bf 4f       	sbci	r27, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e7 53       	subi	r30, 0x37	; 55
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	11 96       	adiw	r26, 0x01	; 1
    2262:	9c 93       	st	X, r25
    2264:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	fe 01       	movw	r30, r28
    2268:	e7 53       	subi	r30, 0x37	; 55
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	d1 f6       	brne	.-76     	; 0x2228 <main+0x862>
    2274:	27 c0       	rjmp	.+78     	; 0x22c4 <main+0x8fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	8e 01       	movw	r16, r28
    2278:	07 53       	subi	r16, 0x37	; 55
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	e5 53       	subi	r30, 0x35	; 53
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	f8 01       	movw	r30, r16
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    2298:	de 01       	movw	r26, r28
    229a:	ab 53       	subi	r26, 0x3B	; 59
    229c:	bf 4f       	sbci	r27, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e7 53       	subi	r30, 0x37	; 55
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	8d 93       	st	X+, r24
    22aa:	9c 93       	st	X, r25
    22ac:	fe 01       	movw	r30, r28
    22ae:	eb 53       	subi	r30, 0x3B	; 59
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <main+0x8f0>
    22ba:	fe 01       	movw	r30, r28
    22bc:	eb 53       	subi	r30, 0x3B	; 59
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
					_delay_ms(250);
					CLCD_voidGoToXY (8u,1u);
    22c4:	88 e0       	ldi	r24, 0x08	; 8
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
					CLCD_u8SendString ("  ");
    22cc:	83 e6       	ldi	r24, 0x63	; 99
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    22d4:	fe 01       	movw	r30, r28
    22d6:	ef 53       	subi	r30, 0x3F	; 63
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	aa e7       	ldi	r26, 0x7A	; 122
    22e0:	b3 e4       	ldi	r27, 0x43	; 67
    22e2:	80 83       	st	Z, r24
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	a2 83       	std	Z+2, r26	; 0x02
    22e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	8e 01       	movw	r16, r28
    22ec:	03 54       	subi	r16, 0x43	; 67
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	ef 53       	subi	r30, 0x3F	; 63
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a ef       	ldi	r20, 0xFA	; 250
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	f8 01       	movw	r30, r16
    2310:	80 83       	st	Z, r24
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	a2 83       	std	Z+2, r26	; 0x02
    2316:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2318:	fe 01       	movw	r30, r28
    231a:	e3 54       	subi	r30, 0x43	; 67
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	44 f4       	brge	.+16     	; 0x2346 <main+0x980>
		__ticks = 1;
    2336:	fe 01       	movw	r30, r28
    2338:	e5 54       	subi	r30, 0x45	; 69
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
    2344:	64 c0       	rjmp	.+200    	; 0x240e <main+0xa48>
	else if (__tmp > 65535)
    2346:	fe 01       	movw	r30, r28
    2348:	e3 54       	subi	r30, 0x43	; 67
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	0c f0       	brlt	.+2      	; 0x2366 <main+0x9a0>
    2364:	43 c0       	rjmp	.+134    	; 0x23ec <main+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	fe 01       	movw	r30, r28
    2368:	ef 53       	subi	r30, 0x3F	; 63
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8e 01       	movw	r16, r28
    2386:	05 54       	subi	r16, 0x45	; 69
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	1f c0       	rjmp	.+62     	; 0x23dc <main+0xa16>
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 54       	subi	r30, 0x47	; 71
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 54       	subi	r30, 0x47	; 71
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <main+0x9f0>
    23ba:	fe 01       	movw	r30, r28
    23bc:	e7 54       	subi	r30, 0x47	; 71
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	de 01       	movw	r26, r28
    23c6:	a5 54       	subi	r26, 0x45	; 69
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	e5 54       	subi	r30, 0x45	; 69
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	11 96       	adiw	r26, 0x01	; 1
    23d8:	9c 93       	st	X, r25
    23da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 54       	subi	r30, 0x45	; 69
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	d1 f6       	brne	.-76     	; 0x239e <main+0x9d8>
    23ea:	27 c0       	rjmp	.+78     	; 0x243a <main+0xa74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	8e 01       	movw	r16, r28
    23ee:	05 54       	subi	r16, 0x45	; 69
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e3 54       	subi	r30, 0x43	; 67
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	f8 01       	movw	r30, r16
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
    240e:	de 01       	movw	r26, r28
    2410:	a9 54       	subi	r26, 0x49	; 73
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e5 54       	subi	r30, 0x45	; 69
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	8d 93       	st	X+, r24
    2420:	9c 93       	st	X, r25
    2422:	fe 01       	movw	r30, r28
    2424:	e9 54       	subi	r30, 0x49	; 73
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <main+0xa66>
    2430:	fe 01       	movw	r30, r28
    2432:	e9 54       	subi	r30, 0x49	; 73
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
    243a:	fe 01       	movw	r30, r28
    243c:	ed 54       	subi	r30, 0x4D	; 77
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	aa e7       	ldi	r26, 0x7A	; 122
    2446:	b3 e4       	ldi	r27, 0x43	; 67
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	8e 01       	movw	r16, r28
    2452:	01 55       	subi	r16, 0x51	; 81
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	ed 54       	subi	r30, 0x4D	; 77
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a ef       	ldi	r20, 0xFA	; 250
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247e:	fe 01       	movw	r30, r28
    2480:	e1 55       	subi	r30, 0x51	; 81
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	44 f4       	brge	.+16     	; 0x24ac <main+0xae6>
		__ticks = 1;
    249c:	fe 01       	movw	r30, r28
    249e:	e3 55       	subi	r30, 0x53	; 83
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	64 c0       	rjmp	.+200    	; 0x2574 <main+0xbae>
	else if (__tmp > 65535)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 55       	subi	r30, 0x51	; 81
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <main+0xb06>
    24ca:	43 c0       	rjmp	.+134    	; 0x2552 <main+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	fe 01       	movw	r30, r28
    24ce:	ed 54       	subi	r30, 0x4D	; 77
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8e 01       	movw	r16, r28
    24ec:	03 55       	subi	r16, 0x53	; 83
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	1f c0       	rjmp	.+62     	; 0x2542 <main+0xb7c>
    2504:	fe 01       	movw	r30, r28
    2506:	e5 55       	subi	r30, 0x55	; 85
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	fe 01       	movw	r30, r28
    2514:	e5 55       	subi	r30, 0x55	; 85
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <main+0xb56>
    2520:	fe 01       	movw	r30, r28
    2522:	e5 55       	subi	r30, 0x55	; 85
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	de 01       	movw	r26, r28
    252c:	a3 55       	subi	r26, 0x53	; 83
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	fe 01       	movw	r30, r28
    2532:	e3 55       	subi	r30, 0x53	; 83
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	9c 93       	st	X, r25
    2540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	fe 01       	movw	r30, r28
    2544:	e3 55       	subi	r30, 0x53	; 83
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	d1 f6       	brne	.-76     	; 0x2504 <main+0xb3e>
    2550:	28 c0       	rjmp	.+80     	; 0x25a2 <main+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	8e 01       	movw	r16, r28
    2554:	03 55       	subi	r16, 0x53	; 83
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	e1 55       	subi	r30, 0x51	; 81
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	de 01       	movw	r26, r28
    2576:	a7 55       	subi	r26, 0x57	; 87
    2578:	bf 4f       	sbci	r27, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e3 55       	subi	r30, 0x53	; 83
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	9c 93       	st	X, r25
    2588:	8e 93       	st	-X, r24
    258a:	fe 01       	movw	r30, r28
    258c:	e7 55       	subi	r30, 0x57	; 87
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <main+0xbce>
    2598:	fe 01       	movw	r30, r28
    259a:	e7 55       	subi	r30, 0x57	; 87
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24


				}
			}

			if(Local_u8PinDownRead ==DIO_PIN_LOW)
    25a2:	fe 01       	movw	r30, r28
    25a4:	e6 5f       	subi	r30, 0xF6	; 246
    25a6:	fe 4f       	sbci	r31, 0xFE	; 254
    25a8:	80 81       	ld	r24, Z
    25aa:	88 23       	and	r24, r24
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <main+0xbea>
    25ae:	9c c4       	rjmp	.+2360   	; 0x2ee8 <main+0x1522>
			{
				switch (Local_u8Xpos)
    25b0:	fe 01       	movw	r30, r28
    25b2:	e0 50       	subi	r30, 0x00	; 0
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	c2 5f       	subi	r28, 0xF2	; 242
    25be:	de 4f       	sbci	r29, 0xFE	; 254
    25c0:	39 83       	std	Y+1, r19	; 0x01
    25c2:	28 83       	st	Y, r18
    25c4:	ce 50       	subi	r28, 0x0E	; 14
    25c6:	d1 40       	sbci	r29, 0x01	; 1
    25c8:	c2 5f       	subi	r28, 0xF2	; 242
    25ca:	de 4f       	sbci	r29, 0xFE	; 254
    25cc:	88 81       	ld	r24, Y
    25ce:	99 81       	ldd	r25, Y+1	; 0x01
    25d0:	ce 50       	subi	r28, 0x0E	; 14
    25d2:	d1 40       	sbci	r29, 0x01	; 1
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	91 05       	cpc	r25, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <main+0xc16>
    25da:	e3 c1       	rjmp	.+966    	; 0x29a2 <main+0xfdc>
    25dc:	c2 5f       	subi	r28, 0xF2	; 242
    25de:	de 4f       	sbci	r29, 0xFE	; 254
    25e0:	e8 81       	ld	r30, Y
    25e2:	f9 81       	ldd	r31, Y+1	; 0x01
    25e4:	ce 50       	subi	r28, 0x0E	; 14
    25e6:	d1 40       	sbci	r29, 0x01	; 1
    25e8:	e2 30       	cpi	r30, 0x02	; 2
    25ea:	f1 05       	cpc	r31, r1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <main+0xc2a>
    25ee:	af c2       	rjmp	.+1374   	; 0x2b4e <main+0x1188>
    25f0:	c2 5f       	subi	r28, 0xF2	; 242
    25f2:	de 4f       	sbci	r29, 0xFE	; 254
    25f4:	28 81       	ld	r18, Y
    25f6:	39 81       	ldd	r19, Y+1	; 0x01
    25f8:	ce 50       	subi	r28, 0x0E	; 14
    25fa:	d1 40       	sbci	r29, 0x01	; 1
    25fc:	21 15       	cp	r18, r1
    25fe:	31 05       	cpc	r19, r1
    2600:	09 f0       	breq	.+2      	; 0x2604 <main+0xc3e>
    2602:	72 c4       	rjmp	.+2276   	; 0x2ee8 <main+0x1522>
				{
				case 0:CLCD_voidGoToXY (Local_DDRAMXPos,Local_u8DDRAMYPos);
    2604:	fe 01       	movw	r30, r28
    2606:	e2 50       	subi	r30, 0x02	; 2
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	de 01       	movw	r26, r28
    260c:	a3 50       	subi	r26, 0x03	; 3
    260e:	bf 4f       	sbci	r27, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	6c 91       	ld	r22, X
    2614:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

				Local_s32Num1--;
    2618:	80 91 8b 00 	lds	r24, 0x008B
    261c:	90 91 8c 00 	lds	r25, 0x008C
    2620:	a0 91 8d 00 	lds	r26, 0x008D
    2624:	b0 91 8e 00 	lds	r27, 0x008E
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	a1 09       	sbc	r26, r1
    262c:	b1 09       	sbc	r27, r1
    262e:	80 93 8b 00 	sts	0x008B, r24
    2632:	90 93 8c 00 	sts	0x008C, r25
    2636:	a0 93 8d 00 	sts	0x008D, r26
    263a:	b0 93 8e 00 	sts	0x008E, r27
				if(Local_s32Num1==-1)
    263e:	80 91 8b 00 	lds	r24, 0x008B
    2642:	90 91 8c 00 	lds	r25, 0x008C
    2646:	a0 91 8d 00 	lds	r26, 0x008D
    264a:	b0 91 8e 00 	lds	r27, 0x008E
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	93 07       	cpc	r25, r19
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	a3 07       	cpc	r26, r19
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	b3 07       	cpc	r27, r19
    265c:	61 f4       	brne	.+24     	; 0x2676 <main+0xcb0>
				{
					Local_s32Num1=9;
    265e:	89 e0       	ldi	r24, 0x09	; 9
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	80 93 8b 00 	sts	0x008B, r24
    266a:	90 93 8c 00 	sts	0x008C, r25
    266e:	a0 93 8d 00 	sts	0x008D, r26
    2672:	b0 93 8e 00 	sts	0x008E, r27
				}
				CLCD_voidSendNumber(Local_s32Num1);
    2676:	80 91 8b 00 	lds	r24, 0x008B
    267a:	90 91 8c 00 	lds	r25, 0x008C
    267e:	a0 91 8d 00 	lds	r26, 0x008D
    2682:	b0 91 8e 00 	lds	r27, 0x008E
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
				if((Local_s8Iterator1==3)&&(Local_s32Num2==0))
    268e:	80 91 a4 00 	lds	r24, 0x00A4
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	71 f4       	brne	.+28     	; 0x26b2 <main+0xcec>
    2696:	80 91 8f 00 	lds	r24, 0x008F
    269a:	90 91 90 00 	lds	r25, 0x0090
    269e:	a0 91 91 00 	lds	r26, 0x0091
    26a2:	b0 91 92 00 	lds	r27, 0x0092
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	a1 05       	cpc	r26, r1
    26aa:	b1 05       	cpc	r27, r1
    26ac:	11 f4       	brne	.+4      	; 0x26b2 <main+0xcec>
    26ae:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <main+0x1ee2>
					continue;
				CLCD_voidGoToXY (8u,1u);
    26b2:	88 e0       	ldi	r24, 0x08	; 8
    26b4:	61 e0       	ldi	r22, 0x01	; 1
    26b6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("DOWN");
    26ba:	86 e6       	ldi	r24, 0x66	; 102
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    26c2:	fe 01       	movw	r30, r28
    26c4:	eb 55       	subi	r30, 0x5B	; 91
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	aa e7       	ldi	r26, 0x7A	; 122
    26ce:	b3 e4       	ldi	r27, 0x43	; 67
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	8e 01       	movw	r16, r28
    26da:	0f 55       	subi	r16, 0x5F	; 95
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	eb 55       	subi	r30, 0x5B	; 91
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2706:	fe 01       	movw	r30, r28
    2708:	ef 55       	subi	r30, 0x5F	; 95
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	44 f4       	brge	.+16     	; 0x2734 <main+0xd6e>
		__ticks = 1;
    2724:	fe 01       	movw	r30, r28
    2726:	e1 56       	subi	r30, 0x61	; 97
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
    2732:	64 c0       	rjmp	.+200    	; 0x27fc <main+0xe36>
	else if (__tmp > 65535)
    2734:	fe 01       	movw	r30, r28
    2736:	ef 55       	subi	r30, 0x5F	; 95
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	0c f0       	brlt	.+2      	; 0x2754 <main+0xd8e>
    2752:	43 c0       	rjmp	.+134    	; 0x27da <main+0xe14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	fe 01       	movw	r30, r28
    2756:	eb 55       	subi	r30, 0x5B	; 91
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8e 01       	movw	r16, r28
    2774:	01 56       	subi	r16, 0x61	; 97
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	1f c0       	rjmp	.+62     	; 0x27ca <main+0xe04>
    278c:	fe 01       	movw	r30, r28
    278e:	e3 56       	subi	r30, 0x63	; 99
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	88 ec       	ldi	r24, 0xC8	; 200
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	fe 01       	movw	r30, r28
    279c:	e3 56       	subi	r30, 0x63	; 99
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <main+0xdde>
    27a8:	fe 01       	movw	r30, r28
    27aa:	e3 56       	subi	r30, 0x63	; 99
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	de 01       	movw	r26, r28
    27b4:	a1 56       	subi	r26, 0x61	; 97
    27b6:	bf 4f       	sbci	r27, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 56       	subi	r30, 0x61	; 97
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	11 96       	adiw	r26, 0x01	; 1
    27c6:	9c 93       	st	X, r25
    27c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	fe 01       	movw	r30, r28
    27cc:	e1 56       	subi	r30, 0x61	; 97
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	d1 f6       	brne	.-76     	; 0x278c <main+0xdc6>
    27d8:	27 c0       	rjmp	.+78     	; 0x2828 <main+0xe62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	8e 01       	movw	r16, r28
    27dc:	01 56       	subi	r16, 0x61	; 97
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	ef 55       	subi	r30, 0x5F	; 95
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	80 83       	st	Z, r24
    27fc:	de 01       	movw	r26, r28
    27fe:	a5 56       	subi	r26, 0x65	; 101
    2800:	bf 4f       	sbci	r27, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e1 56       	subi	r30, 0x61	; 97
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	8d 93       	st	X+, r24
    280e:	9c 93       	st	X, r25
    2810:	fe 01       	movw	r30, r28
    2812:	e5 56       	subi	r30, 0x65	; 101
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <main+0xe54>
    281e:	fe 01       	movw	r30, r28
    2820:	e5 56       	subi	r30, 0x65	; 101
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    2828:	88 e0       	ldi	r24, 0x08	; 8
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("     ");
    2830:	8b e6       	ldi	r24, 0x6B	; 107
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    2838:	fe 01       	movw	r30, r28
    283a:	e9 56       	subi	r30, 0x69	; 105
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	aa e7       	ldi	r26, 0x7A	; 122
    2844:	b3 e4       	ldi	r27, 0x43	; 67
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	8e 01       	movw	r16, r28
    2850:	0d 56       	subi	r16, 0x6D	; 109
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e9 56       	subi	r30, 0x69	; 105
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287c:	fe 01       	movw	r30, r28
    287e:	ed 56       	subi	r30, 0x6D	; 109
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	44 f4       	brge	.+16     	; 0x28aa <main+0xee4>
		__ticks = 1;
    289a:	fe 01       	movw	r30, r28
    289c:	ef 56       	subi	r30, 0x6F	; 111
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	64 c0       	rjmp	.+200    	; 0x2972 <main+0xfac>
	else if (__tmp > 65535)
    28aa:	fe 01       	movw	r30, r28
    28ac:	ed 56       	subi	r30, 0x6D	; 109
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	0c f0       	brlt	.+2      	; 0x28ca <main+0xf04>
    28c8:	43 c0       	rjmp	.+134    	; 0x2950 <main+0xf8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 56       	subi	r30, 0x69	; 105
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8e 01       	movw	r16, r28
    28ea:	0f 56       	subi	r16, 0x6F	; 111
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	f8 01       	movw	r30, r16
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
    2900:	1f c0       	rjmp	.+62     	; 0x2940 <main+0xf7a>
    2902:	fe 01       	movw	r30, r28
    2904:	e1 57       	subi	r30, 0x71	; 113
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	88 ec       	ldi	r24, 0xC8	; 200
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	fe 01       	movw	r30, r28
    2912:	e1 57       	subi	r30, 0x71	; 113
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <main+0xf54>
    291e:	fe 01       	movw	r30, r28
    2920:	e1 57       	subi	r30, 0x71	; 113
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	de 01       	movw	r26, r28
    292a:	af 56       	subi	r26, 0x6F	; 111
    292c:	bf 4f       	sbci	r27, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	ef 56       	subi	r30, 0x6F	; 111
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	11 96       	adiw	r26, 0x01	; 1
    293c:	9c 93       	st	X, r25
    293e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	fe 01       	movw	r30, r28
    2942:	ef 56       	subi	r30, 0x6F	; 111
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	d1 f6       	brne	.-76     	; 0x2902 <main+0xf3c>
    294e:	cc c2       	rjmp	.+1432   	; 0x2ee8 <main+0x1522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2950:	8e 01       	movw	r16, r28
    2952:	0f 56       	subi	r16, 0x6F	; 111
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	ed 56       	subi	r30, 0x6D	; 109
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	de 01       	movw	r26, r28
    2974:	a3 57       	subi	r26, 0x73	; 115
    2976:	bf 4f       	sbci	r27, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	ef 56       	subi	r30, 0x6F	; 111
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	11 96       	adiw	r26, 0x01	; 1
    2984:	9c 93       	st	X, r25
    2986:	8e 93       	st	-X, r24
    2988:	fe 01       	movw	r30, r28
    298a:	e3 57       	subi	r30, 0x73	; 115
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <main+0xfcc>
    2996:	fe 01       	movw	r30, r28
    2998:	e3 57       	subi	r30, 0x73	; 115
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	a3 c2       	rjmp	.+1350   	; 0x2ee8 <main+0x1522>
				_delay_ms(250);break;
				case 1://Local_DDRAMXPos++;
					CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    29a2:	fe 01       	movw	r30, r28
    29a4:	e0 50       	subi	r30, 0x00	; 0
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	de 01       	movw	r26, r28
    29aa:	a3 50       	subi	r26, 0x03	; 3
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	6c 91       	ld	r22, X
    29b2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
					Local_s8Iterator1--;
    29b6:	80 91 a4 00 	lds	r24, 0x00A4
    29ba:	81 50       	subi	r24, 0x01	; 1
    29bc:	80 93 a4 00 	sts	0x00A4, r24

					if(Local_s8Iterator1==-1)
    29c0:	80 91 a4 00 	lds	r24, 0x00A4
    29c4:	8f 3f       	cpi	r24, 0xFF	; 255
    29c6:	19 f4       	brne	.+6      	; 0x29ce <main+0x1008>
					{
						Local_s8Iterator1=3;
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	80 93 a4 00 	sts	0x00A4, r24

					}
					CLCD_voidSendData(ch_Operation[Local_s8Iterator1]);
    29ce:	80 91 a4 00 	lds	r24, 0x00A4
    29d2:	99 27       	eor	r25, r25
    29d4:	87 fd       	sbrc	r24, 7
    29d6:	90 95       	com	r25
    29d8:	fc 01       	movw	r30, r24
    29da:	ed 56       	subi	r30, 0x6D	; 109
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    29e4:	fe 01       	movw	r30, r28
    29e6:	e7 57       	subi	r30, 0x77	; 119
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	aa e7       	ldi	r26, 0x7A	; 122
    29f0:	b3 e4       	ldi	r27, 0x43	; 67
    29f2:	80 83       	st	Z, r24
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	a2 83       	std	Z+2, r26	; 0x02
    29f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	8e 01       	movw	r16, r28
    29fc:	0b 57       	subi	r16, 0x7B	; 123
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 57       	subi	r30, 0x77	; 119
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a ef       	ldi	r20, 0xFA	; 250
    2a14:	54 e4       	ldi	r21, 0x44	; 68
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 57       	subi	r30, 0x7B	; 123
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	44 f4       	brge	.+16     	; 0x2a56 <main+0x1090>
		__ticks = 1;
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 57       	subi	r30, 0x7D	; 125
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <main+0x1158>
	else if (__tmp > 65535)
    2a56:	fe 01       	movw	r30, r28
    2a58:	eb 57       	subi	r30, 0x7B	; 123
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	0c f0       	brlt	.+2      	; 0x2a76 <main+0x10b0>
    2a74:	43 c0       	rjmp	.+134    	; 0x2afc <main+0x1136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	fe 01       	movw	r30, r28
    2a78:	e7 57       	subi	r30, 0x77	; 119
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8e 01       	movw	r16, r28
    2a96:	0d 57       	subi	r16, 0x7D	; 125
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	1f c0       	rjmp	.+62     	; 0x2aec <main+0x1126>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ef 57       	subi	r30, 0x7F	; 127
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	ef 57       	subi	r30, 0x7F	; 127
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <main+0x1100>
    2aca:	fe 01       	movw	r30, r28
    2acc:	ef 57       	subi	r30, 0x7F	; 127
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	de 01       	movw	r26, r28
    2ad6:	ad 57       	subi	r26, 0x7D	; 125
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	ed 57       	subi	r30, 0x7D	; 125
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 57       	subi	r30, 0x7D	; 125
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	d1 f6       	brne	.-76     	; 0x2aae <main+0x10e8>
    2afa:	f6 c1       	rjmp	.+1004   	; 0x2ee8 <main+0x1522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	8e 01       	movw	r16, r28
    2afe:	0d 57       	subi	r16, 0x7D	; 125
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 57       	subi	r30, 0x7B	; 123
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	de 01       	movw	r26, r28
    2b20:	a1 58       	subi	r26, 0x81	; 129
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 57       	subi	r30, 0x7D	; 125
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	9c 93       	st	X, r25
    2b32:	8e 93       	st	-X, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	e1 58       	subi	r30, 0x81	; 129
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <main+0x1178>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e1 58       	subi	r30, 0x81	; 129
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	cd c1       	rjmp	.+922    	; 0x2ee8 <main+0x1522>
					_delay_ms(250);break;


				case 2:CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e0 50       	subi	r30, 0x00	; 0
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	de 01       	movw	r26, r28
    2b56:	a3 50       	subi	r26, 0x03	; 3
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	6c 91       	ld	r22, X
    2b5e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

				Local_s32Num2--;
    2b62:	80 91 8f 00 	lds	r24, 0x008F
    2b66:	90 91 90 00 	lds	r25, 0x0090
    2b6a:	a0 91 91 00 	lds	r26, 0x0091
    2b6e:	b0 91 92 00 	lds	r27, 0x0092
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	a1 09       	sbc	r26, r1
    2b76:	b1 09       	sbc	r27, r1
    2b78:	80 93 8f 00 	sts	0x008F, r24
    2b7c:	90 93 90 00 	sts	0x0090, r25
    2b80:	a0 93 91 00 	sts	0x0091, r26
    2b84:	b0 93 92 00 	sts	0x0092, r27
				if(Local_s32Num2==-1)
    2b88:	80 91 8f 00 	lds	r24, 0x008F
    2b8c:	90 91 90 00 	lds	r25, 0x0090
    2b90:	a0 91 91 00 	lds	r26, 0x0091
    2b94:	b0 91 92 00 	lds	r27, 0x0092
    2b98:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9a:	ff ef       	ldi	r31, 0xFF	; 255
    2b9c:	9f 07       	cpc	r25, r31
    2b9e:	ff ef       	ldi	r31, 0xFF	; 255
    2ba0:	af 07       	cpc	r26, r31
    2ba2:	ff ef       	ldi	r31, 0xFF	; 255
    2ba4:	bf 07       	cpc	r27, r31
    2ba6:	61 f4       	brne	.+24     	; 0x2bc0 <main+0x11fa>
				{
					Local_s32Num2=9;
    2ba8:	89 e0       	ldi	r24, 0x09	; 9
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	80 93 8f 00 	sts	0x008F, r24
    2bb4:	90 93 90 00 	sts	0x0090, r25
    2bb8:	a0 93 91 00 	sts	0x0091, r26
    2bbc:	b0 93 92 00 	sts	0x0092, r27
				}
				CLCD_voidSendNumber(Local_s32Num2);
    2bc0:	80 91 8f 00 	lds	r24, 0x008F
    2bc4:	90 91 90 00 	lds	r25, 0x0090
    2bc8:	a0 91 91 00 	lds	r26, 0x0091
    2bcc:	b0 91 92 00 	lds	r27, 0x0092
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
				if((Local_s8Iterator1==3)&&(Local_s32Num2==0))
    2bd8:	80 91 a4 00 	lds	r24, 0x00A4
    2bdc:	83 30       	cpi	r24, 0x03	; 3
    2bde:	69 f4       	brne	.+26     	; 0x2bfa <main+0x1234>
    2be0:	80 91 8f 00 	lds	r24, 0x008F
    2be4:	90 91 90 00 	lds	r25, 0x0090
    2be8:	a0 91 91 00 	lds	r26, 0x0091
    2bec:	b0 91 92 00 	lds	r27, 0x0092
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	a1 05       	cpc	r26, r1
    2bf4:	b1 05       	cpc	r27, r1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <main+0x1234>
    2bf8:	57 c6       	rjmp	.+3246   	; 0x38a8 <main+0x1ee2>
					continue;
				CLCD_voidGoToXY (8u,1u);
    2bfa:	88 e0       	ldi	r24, 0x08	; 8
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("DOWN");
    2c02:	86 e6       	ldi	r24, 0x66	; 102
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e5 58       	subi	r30, 0x85	; 133
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	aa e7       	ldi	r26, 0x7A	; 122
    2c16:	b3 e4       	ldi	r27, 0x43	; 67
    2c18:	80 83       	st	Z, r24
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	a2 83       	std	Z+2, r26	; 0x02
    2c1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	8e 01       	movw	r16, r28
    2c22:	09 58       	subi	r16, 0x89	; 137
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e5 58       	subi	r30, 0x85	; 133
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	4a ef       	ldi	r20, 0xFA	; 250
    2c3a:	54 e4       	ldi	r21, 0x44	; 68
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 83       	st	Z, r24
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	a2 83       	std	Z+2, r26	; 0x02
    2c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e9 58       	subi	r30, 0x89	; 137
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	44 f4       	brge	.+16     	; 0x2c7c <main+0x12b6>
		__ticks = 1;
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	eb 58       	subi	r30, 0x8B	; 139
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	64 c0       	rjmp	.+200    	; 0x2d44 <main+0x137e>
	else if (__tmp > 65535)
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e9 58       	subi	r30, 0x89	; 137
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	0c f0       	brlt	.+2      	; 0x2c9c <main+0x12d6>
    2c9a:	43 c0       	rjmp	.+134    	; 0x2d22 <main+0x135c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 58       	subi	r30, 0x85	; 133
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8e 01       	movw	r16, r28
    2cbc:	0b 58       	subi	r16, 0x8B	; 139
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	f8 01       	movw	r30, r16
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	1f c0       	rjmp	.+62     	; 0x2d12 <main+0x134c>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ed 58       	subi	r30, 0x8D	; 141
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	88 ec       	ldi	r24, 0xC8	; 200
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ed 58       	subi	r30, 0x8D	; 141
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <main+0x1326>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ed 58       	subi	r30, 0x8D	; 141
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	de 01       	movw	r26, r28
    2cfc:	ab 58       	subi	r26, 0x8B	; 139
    2cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	eb 58       	subi	r30, 0x8B	; 139
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	11 96       	adiw	r26, 0x01	; 1
    2d0e:	9c 93       	st	X, r25
    2d10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	fe 01       	movw	r30, r28
    2d14:	eb 58       	subi	r30, 0x8B	; 139
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	d1 f6       	brne	.-76     	; 0x2cd4 <main+0x130e>
    2d20:	27 c0       	rjmp	.+78     	; 0x2d70 <main+0x13aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	8e 01       	movw	r16, r28
    2d24:	0b 58       	subi	r16, 0x8B	; 139
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e9 58       	subi	r30, 0x89	; 137
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	f8 01       	movw	r30, r16
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	80 83       	st	Z, r24
    2d44:	de 01       	movw	r26, r28
    2d46:	af 58       	subi	r26, 0x8F	; 143
    2d48:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	eb 58       	subi	r30, 0x8B	; 139
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	8d 93       	st	X+, r24
    2d56:	9c 93       	st	X, r25
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ef 58       	subi	r30, 0x8F	; 143
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <main+0x139c>
    2d66:	fe 01       	movw	r30, r28
    2d68:	ef 58       	subi	r30, 0x8F	; 143
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    2d70:	88 e0       	ldi	r24, 0x08	; 8
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("     ");
    2d78:	8b e6       	ldi	r24, 0x6B	; 107
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    2d80:	fe 01       	movw	r30, r28
    2d82:	e3 59       	subi	r30, 0x93	; 147
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	aa e7       	ldi	r26, 0x7A	; 122
    2d8c:	b3 e4       	ldi	r27, 0x43	; 67
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	07 59       	subi	r16, 0x97	; 151
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 59       	subi	r30, 0x93	; 147
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 59       	subi	r30, 0x97	; 151
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <main+0x142c>
		__ticks = 1;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e9 59       	subi	r30, 0x99	; 153
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	64 c0       	rjmp	.+200    	; 0x2eba <main+0x14f4>
	else if (__tmp > 65535)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 59       	subi	r30, 0x97	; 151
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <main+0x144c>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <main+0x14d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 59       	subi	r30, 0x93	; 147
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 01       	movw	r16, r28
    2e32:	09 59       	subi	r16, 0x99	; 153
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <main+0x14c2>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	eb 59       	subi	r30, 0x9B	; 155
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 59       	subi	r30, 0x9B	; 155
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0x149c>
    2e66:	fe 01       	movw	r30, r28
    2e68:	eb 59       	subi	r30, 0x9B	; 155
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	de 01       	movw	r26, r28
    2e72:	a9 59       	subi	r26, 0x99	; 153
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	e9 59       	subi	r30, 0x99	; 153
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	9c 93       	st	X, r25
    2e86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e9 59       	subi	r30, 0x99	; 153
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <main+0x1484>
    2e96:	28 c0       	rjmp	.+80     	; 0x2ee8 <main+0x1522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	09 59       	subi	r16, 0x99	; 153
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 59       	subi	r30, 0x97	; 151
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	de 01       	movw	r26, r28
    2ebc:	ad 59       	subi	r26, 0x9D	; 157
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e9 59       	subi	r30, 0x99	; 153
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	11 96       	adiw	r26, 0x01	; 1
    2ecc:	9c 93       	st	X, r25
    2ece:	8e 93       	st	-X, r24
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 59       	subi	r30, 0x9D	; 157
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <main+0x1514>
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 59       	subi	r30, 0x9D	; 157
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
				}

			}


			if(Local_u8PinEnterRead ==DIO_PIN_LOW)
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e5 5f       	subi	r30, 0xF5	; 245
    2eec:	fe 4f       	sbci	r31, 0xFE	; 254
    2eee:	80 81       	ld	r24, Z
    2ef0:	88 23       	and	r24, r24
    2ef2:	09 f0       	breq	.+2      	; 0x2ef6 <main+0x1530>
    2ef4:	d9 c4       	rjmp	.+2482   	; 0x38a8 <main+0x1ee2>
			{

				switch (Local_u8Xpos)
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e0 50       	subi	r30, 0x00	; 0
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	28 2f       	mov	r18, r24
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	c4 5f       	subi	r28, 0xF4	; 244
    2f04:	de 4f       	sbci	r29, 0xFE	; 254
    2f06:	39 83       	std	Y+1, r19	; 0x01
    2f08:	28 83       	st	Y, r18
    2f0a:	cc 50       	subi	r28, 0x0C	; 12
    2f0c:	d1 40       	sbci	r29, 0x01	; 1
    2f0e:	c4 5f       	subi	r28, 0xF4	; 244
    2f10:	de 4f       	sbci	r29, 0xFE	; 254
    2f12:	88 81       	ld	r24, Y
    2f14:	99 81       	ldd	r25, Y+1	; 0x01
    2f16:	cc 50       	subi	r28, 0x0C	; 12
    2f18:	d1 40       	sbci	r29, 0x01	; 1
    2f1a:	82 30       	cpi	r24, 0x02	; 2
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <main+0x155c>
    2f20:	d5 c3       	rjmp	.+1962   	; 0x36cc <main+0x1d06>
    2f22:	c4 5f       	subi	r28, 0xF4	; 244
    2f24:	de 4f       	sbci	r29, 0xFE	; 254
    2f26:	e8 81       	ld	r30, Y
    2f28:	f9 81       	ldd	r31, Y+1	; 0x01
    2f2a:	cc 50       	subi	r28, 0x0C	; 12
    2f2c:	d1 40       	sbci	r29, 0x01	; 1
    2f2e:	e3 30       	cpi	r30, 0x03	; 3
    2f30:	f1 05       	cpc	r31, r1
    2f32:	a4 f4       	brge	.+40     	; 0x2f5c <main+0x1596>
    2f34:	c4 5f       	subi	r28, 0xF4	; 244
    2f36:	de 4f       	sbci	r29, 0xFE	; 254
    2f38:	28 81       	ld	r18, Y
    2f3a:	39 81       	ldd	r19, Y+1	; 0x01
    2f3c:	cc 50       	subi	r28, 0x0C	; 12
    2f3e:	d1 40       	sbci	r29, 0x01	; 1
    2f40:	21 15       	cp	r18, r1
    2f42:	31 05       	cpc	r19, r1
    2f44:	01 f1       	breq	.+64     	; 0x2f86 <main+0x15c0>
    2f46:	c4 5f       	subi	r28, 0xF4	; 244
    2f48:	de 4f       	sbci	r29, 0xFE	; 254
    2f4a:	88 81       	ld	r24, Y
    2f4c:	99 81       	ldd	r25, Y+1	; 0x01
    2f4e:	cc 50       	subi	r28, 0x0C	; 12
    2f50:	d1 40       	sbci	r29, 0x01	; 1
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	91 05       	cpc	r25, r1
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <main+0x1594>
    2f58:	32 c2       	rjmp	.+1124   	; 0x33be <main+0x19f8>
    2f5a:	a6 c4       	rjmp	.+2380   	; 0x38a8 <main+0x1ee2>
    2f5c:	c4 5f       	subi	r28, 0xF4	; 244
    2f5e:	de 4f       	sbci	r29, 0xFE	; 254
    2f60:	e8 81       	ld	r30, Y
    2f62:	f9 81       	ldd	r31, Y+1	; 0x01
    2f64:	cc 50       	subi	r28, 0x0C	; 12
    2f66:	d1 40       	sbci	r29, 0x01	; 1
    2f68:	e3 30       	cpi	r30, 0x03	; 3
    2f6a:	f1 05       	cpc	r31, r1
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <main+0x15aa>
    2f6e:	ca c3       	rjmp	.+1940   	; 0x3704 <main+0x1d3e>
    2f70:	c4 5f       	subi	r28, 0xF4	; 244
    2f72:	de 4f       	sbci	r29, 0xFE	; 254
    2f74:	28 81       	ld	r18, Y
    2f76:	39 81       	ldd	r19, Y+1	; 0x01
    2f78:	cc 50       	subi	r28, 0x0C	; 12
    2f7a:	d1 40       	sbci	r29, 0x01	; 1
    2f7c:	24 30       	cpi	r18, 0x04	; 4
    2f7e:	31 05       	cpc	r19, r1
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <main+0x15be>
    2f82:	dc c3       	rjmp	.+1976   	; 0x373c <main+0x1d76>
    2f84:	91 c4       	rjmp	.+2338   	; 0x38a8 <main+0x1ee2>
				{
				case 0:CLCD_voidGoToXY (0u,1u);
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString (" ");
    2f8e:	81 e7       	ldi	r24, 0x71	; 113
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
				Local_u8Xpos++;
    2f96:	de 01       	movw	r26, r28
    2f98:	a0 50       	subi	r26, 0x00	; 0
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e0 50       	subi	r30, 0x00	; 0
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	8c 93       	st	X, r24

				CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);
    2fa8:	9e 01       	movw	r18, r28
    2faa:	2f 5f       	subi	r18, 0xFF	; 255
    2fac:	3e 4f       	sbci	r19, 0xFE	; 254
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e0 50       	subi	r30, 0x00	; 0
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	de 01       	movw	r26, r28
    2fb6:	a1 50       	subi	r26, 0x01	; 1
    2fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	40 81       	ld	r20, Z
    2fc0:	2c 91       	ld	r18, X
    2fc2:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_u8WriteSpecialCharacter>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e1 5a       	subi	r30, 0xA1	; 161
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	aa e7       	ldi	r26, 0x7A	; 122
    2fd2:	b3 e4       	ldi	r27, 0x43	; 67
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fdc:	8e 01       	movw	r16, r28
    2fde:	05 5a       	subi	r16, 0xA5	; 165
    2fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e1 5a       	subi	r30, 0xA1	; 161
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a ef       	ldi	r20, 0xFA	; 250
    2ff6:	54 e4       	ldi	r21, 0x44	; 68
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	80 83       	st	Z, r24
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	a2 83       	std	Z+2, r26	; 0x02
    3008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300a:	fe 01       	movw	r30, r28
    300c:	e5 5a       	subi	r30, 0xA5	; 165
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	44 f4       	brge	.+16     	; 0x3038 <main+0x1672>
		__ticks = 1;
    3028:	fe 01       	movw	r30, r28
    302a:	e7 5a       	subi	r30, 0xA7	; 167
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	80 83       	st	Z, r24
    3036:	64 c0       	rjmp	.+200    	; 0x3100 <main+0x173a>
	else if (__tmp > 65535)
    3038:	fe 01       	movw	r30, r28
    303a:	e5 5a       	subi	r30, 0xA5	; 165
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	3f ef       	ldi	r19, 0xFF	; 255
    304a:	4f e7       	ldi	r20, 0x7F	; 127
    304c:	57 e4       	ldi	r21, 0x47	; 71
    304e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3052:	18 16       	cp	r1, r24
    3054:	0c f0       	brlt	.+2      	; 0x3058 <main+0x1692>
    3056:	43 c0       	rjmp	.+134    	; 0x30de <main+0x1718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	fe 01       	movw	r30, r28
    305a:	e1 5a       	subi	r30, 0xA1	; 161
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	60 81       	ld	r22, Z
    3060:	71 81       	ldd	r23, Z+1	; 0x01
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	93 81       	ldd	r25, Z+3	; 0x03
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e2       	ldi	r20, 0x20	; 32
    306c:	51 e4       	ldi	r21, 0x41	; 65
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8e 01       	movw	r16, r28
    3078:	07 5a       	subi	r16, 0xA7	; 167
    307a:	1f 4f       	sbci	r17, 0xFF	; 255
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	f8 01       	movw	r30, r16
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
    308e:	1f c0       	rjmp	.+62     	; 0x30ce <main+0x1708>
    3090:	fe 01       	movw	r30, r28
    3092:	e9 5a       	subi	r30, 0xA9	; 169
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	fe 01       	movw	r30, r28
    30a0:	e9 5a       	subi	r30, 0xA9	; 169
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <main+0x16e2>
    30ac:	fe 01       	movw	r30, r28
    30ae:	e9 5a       	subi	r30, 0xA9	; 169
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	de 01       	movw	r26, r28
    30b8:	a7 5a       	subi	r26, 0xA7	; 167
    30ba:	bf 4f       	sbci	r27, 0xFF	; 255
    30bc:	fe 01       	movw	r30, r28
    30be:	e7 5a       	subi	r30, 0xA7	; 167
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ce:	fe 01       	movw	r30, r28
    30d0:	e7 5a       	subi	r30, 0xA7	; 167
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	d1 f6       	brne	.-76     	; 0x3090 <main+0x16ca>
    30dc:	27 c0       	rjmp	.+78     	; 0x312c <main+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	8e 01       	movw	r16, r28
    30e0:	07 5a       	subi	r16, 0xA7	; 167
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	fe 01       	movw	r30, r28
    30e6:	e5 5a       	subi	r30, 0xA5	; 165
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	f8 01       	movw	r30, r16
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	de 01       	movw	r26, r28
    3102:	ab 5a       	subi	r26, 0xAB	; 171
    3104:	bf 4f       	sbci	r27, 0xFF	; 255
    3106:	fe 01       	movw	r30, r28
    3108:	e7 5a       	subi	r30, 0xA7	; 167
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	8d 93       	st	X+, r24
    3112:	9c 93       	st	X, r25
    3114:	fe 01       	movw	r30, r28
    3116:	eb 5a       	subi	r30, 0xAB	; 171
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <main+0x1758>
    3122:	fe 01       	movw	r30, r28
    3124:	eb 5a       	subi	r30, 0xAB	; 171
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    312c:	88 e0       	ldi	r24, 0x08	; 8
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("ENTER");
    3134:	83 e7       	ldi	r24, 0x73	; 115
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    313c:	fe 01       	movw	r30, r28
    313e:	ef 5a       	subi	r30, 0xAF	; 175
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	aa e7       	ldi	r26, 0x7A	; 122
    3148:	b3 e4       	ldi	r27, 0x43	; 67
    314a:	80 83       	st	Z, r24
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	a2 83       	std	Z+2, r26	; 0x02
    3150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	8e 01       	movw	r16, r28
    3154:	03 5b       	subi	r16, 0xB3	; 179
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	ef 5a       	subi	r30, 0xAF	; 175
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	4a ef       	ldi	r20, 0xFA	; 250
    316c:	54 e4       	ldi	r21, 0x44	; 68
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	f8 01       	movw	r30, r16
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3180:	fe 01       	movw	r30, r28
    3182:	e3 5b       	subi	r30, 0xB3	; 179
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	44 f4       	brge	.+16     	; 0x31ae <main+0x17e8>
		__ticks = 1;
    319e:	fe 01       	movw	r30, r28
    31a0:	e5 5b       	subi	r30, 0xB5	; 181
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	64 c0       	rjmp	.+200    	; 0x3276 <main+0x18b0>
	else if (__tmp > 65535)
    31ae:	fe 01       	movw	r30, r28
    31b0:	e3 5b       	subi	r30, 0xB3	; 179
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	0c f0       	brlt	.+2      	; 0x31ce <main+0x1808>
    31cc:	43 c0       	rjmp	.+134    	; 0x3254 <main+0x188e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	fe 01       	movw	r30, r28
    31d0:	ef 5a       	subi	r30, 0xAF	; 175
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8e 01       	movw	r16, r28
    31ee:	05 5b       	subi	r16, 0xB5	; 181
    31f0:	1f 4f       	sbci	r17, 0xFF	; 255
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <main+0x187e>
    3206:	fe 01       	movw	r30, r28
    3208:	e7 5b       	subi	r30, 0xB7	; 183
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	88 ec       	ldi	r24, 0xC8	; 200
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
    3214:	fe 01       	movw	r30, r28
    3216:	e7 5b       	subi	r30, 0xB7	; 183
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <main+0x1858>
    3222:	fe 01       	movw	r30, r28
    3224:	e7 5b       	subi	r30, 0xB7	; 183
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	de 01       	movw	r26, r28
    322e:	a5 5b       	subi	r26, 0xB5	; 181
    3230:	bf 4f       	sbci	r27, 0xFF	; 255
    3232:	fe 01       	movw	r30, r28
    3234:	e5 5b       	subi	r30, 0xB5	; 181
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	fe 01       	movw	r30, r28
    3246:	e5 5b       	subi	r30, 0xB5	; 181
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	d1 f6       	brne	.-76     	; 0x3206 <main+0x1840>
    3252:	27 c0       	rjmp	.+78     	; 0x32a2 <main+0x18dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	8e 01       	movw	r16, r28
    3256:	05 5b       	subi	r16, 0xB5	; 181
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	fe 01       	movw	r30, r28
    325c:	e3 5b       	subi	r30, 0xB3	; 179
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	f8 01       	movw	r30, r16
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	de 01       	movw	r26, r28
    3278:	a9 5b       	subi	r26, 0xB9	; 185
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	fe 01       	movw	r30, r28
    327e:	e5 5b       	subi	r30, 0xB5	; 181
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	8d 93       	st	X+, r24
    3288:	9c 93       	st	X, r25
    328a:	fe 01       	movw	r30, r28
    328c:	e9 5b       	subi	r30, 0xB9	; 185
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <main+0x18ce>
    3298:	fe 01       	movw	r30, r28
    329a:	e9 5b       	subi	r30, 0xB9	; 185
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    32a2:	88 e0       	ldi	r24, 0x08	; 8
    32a4:	61 e0       	ldi	r22, 0x01	; 1
    32a6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("     ");
    32aa:	8b e6       	ldi	r24, 0x6B	; 107
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    32b2:	fe 01       	movw	r30, r28
    32b4:	ed 5b       	subi	r30, 0xBD	; 189
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	aa e7       	ldi	r26, 0x7A	; 122
    32be:	b3 e4       	ldi	r27, 0x43	; 67
    32c0:	80 83       	st	Z, r24
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	a2 83       	std	Z+2, r26	; 0x02
    32c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	8e 01       	movw	r16, r28
    32ca:	01 5c       	subi	r16, 0xC1	; 193
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	fe 01       	movw	r30, r28
    32d0:	ed 5b       	subi	r30, 0xBD	; 189
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a ef       	ldi	r20, 0xFA	; 250
    32e2:	54 e4       	ldi	r21, 0x44	; 68
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	f8 01       	movw	r30, r16
    32ee:	80 83       	st	Z, r24
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	a2 83       	std	Z+2, r26	; 0x02
    32f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32f6:	fe 01       	movw	r30, r28
    32f8:	ff 96       	adiw	r30, 0x3f	; 63
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e8       	ldi	r20, 0x80	; 128
    3308:	5f e3       	ldi	r21, 0x3F	; 63
    330a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    330e:	88 23       	and	r24, r24
    3310:	2c f4       	brge	.+10     	; 0x331c <main+0x1956>
		__ticks = 1;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	9e af       	std	Y+62, r25	; 0x3e
    3318:	8d af       	std	Y+61, r24	; 0x3d
    331a:	46 c0       	rjmp	.+140    	; 0x33a8 <main+0x19e2>
	else if (__tmp > 65535)
    331c:	fe 01       	movw	r30, r28
    331e:	ff 96       	adiw	r30, 0x3f	; 63
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	64 f5       	brge	.+88     	; 0x3390 <main+0x19ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	fe 01       	movw	r30, r28
    333a:	ed 5b       	subi	r30, 0xBD	; 189
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9e af       	std	Y+62, r25	; 0x3e
    3364:	8d af       	std	Y+61, r24	; 0x3d
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <main+0x19c0>
    3368:	88 ec       	ldi	r24, 0xC8	; 200
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9c af       	std	Y+60, r25	; 0x3c
    336e:	8b af       	std	Y+59, r24	; 0x3b
    3370:	8b ad       	ldd	r24, Y+59	; 0x3b
    3372:	9c ad       	ldd	r25, Y+60	; 0x3c
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <main+0x19ae>
    3378:	9c af       	std	Y+60, r25	; 0x3c
    337a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	8d ad       	ldd	r24, Y+61	; 0x3d
    337e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	9e af       	std	Y+62, r25	; 0x3e
    3384:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	8d ad       	ldd	r24, Y+61	; 0x3d
    3388:	9e ad       	ldd	r25, Y+62	; 0x3e
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <main+0x19a2>
    338e:	8c c2       	rjmp	.+1304   	; 0x38a8 <main+0x1ee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	fe 01       	movw	r30, r28
    3392:	ff 96       	adiw	r30, 0x3f	; 63
    3394:	60 81       	ld	r22, Z
    3396:	71 81       	ldd	r23, Z+1	; 0x01
    3398:	82 81       	ldd	r24, Z+2	; 0x02
    339a:	93 81       	ldd	r25, Z+3	; 0x03
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9e af       	std	Y+62, r25	; 0x3e
    33a6:	8d af       	std	Y+61, r24	; 0x3d
    33a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ac:	9a af       	std	Y+58, r25	; 0x3a
    33ae:	89 af       	std	Y+57, r24	; 0x39
    33b0:	89 ad       	ldd	r24, Y+57	; 0x39
    33b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <main+0x19ee>
    33b8:	9a af       	std	Y+58, r25	; 0x3a
    33ba:	89 af       	std	Y+57, r24	; 0x39
    33bc:	75 c2       	rjmp	.+1258   	; 0x38a8 <main+0x1ee2>





				case 1:CLCD_voidGoToXY (1u,1u);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString (" ");
    33c6:	81 e7       	ldi	r24, 0x71	; 113
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
				Local_u8Xpos++;
    33ce:	de 01       	movw	r26, r28
    33d0:	a0 50       	subi	r26, 0x00	; 0
    33d2:	bf 4f       	sbci	r27, 0xFF	; 255
    33d4:	fe 01       	movw	r30, r28
    33d6:	e0 50       	subi	r30, 0x00	; 0
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	80 81       	ld	r24, Z
    33dc:	8f 5f       	subi	r24, 0xFF	; 255
    33de:	8c 93       	st	X, r24
				CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);
    33e0:	9e 01       	movw	r18, r28
    33e2:	2f 5f       	subi	r18, 0xFF	; 255
    33e4:	3e 4f       	sbci	r19, 0xFE	; 254
    33e6:	fe 01       	movw	r30, r28
    33e8:	e0 50       	subi	r30, 0x00	; 0
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	de 01       	movw	r26, r28
    33ee:	a1 50       	subi	r26, 0x01	; 1
    33f0:	bf 4f       	sbci	r27, 0xFF	; 255
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	b9 01       	movw	r22, r18
    33f6:	40 81       	ld	r20, Z
    33f8:	2c 91       	ld	r18, X
    33fa:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_u8WriteSpecialCharacter>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	aa e7       	ldi	r26, 0x7A	; 122
    3404:	b3 e4       	ldi	r27, 0x43	; 67
    3406:	8d ab       	std	Y+53, r24	; 0x35
    3408:	9e ab       	std	Y+54, r25	; 0x36
    340a:	af ab       	std	Y+55, r26	; 0x37
    340c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340e:	6d a9       	ldd	r22, Y+53	; 0x35
    3410:	7e a9       	ldd	r23, Y+54	; 0x36
    3412:	8f a9       	ldd	r24, Y+55	; 0x37
    3414:	98 ad       	ldd	r25, Y+56	; 0x38
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a ef       	ldi	r20, 0xFA	; 250
    341c:	54 e4       	ldi	r21, 0x44	; 68
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	89 ab       	std	Y+49, r24	; 0x31
    3428:	9a ab       	std	Y+50, r25	; 0x32
    342a:	ab ab       	std	Y+51, r26	; 0x33
    342c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    342e:	69 a9       	ldd	r22, Y+49	; 0x31
    3430:	7a a9       	ldd	r23, Y+50	; 0x32
    3432:	8b a9       	ldd	r24, Y+51	; 0x33
    3434:	9c a9       	ldd	r25, Y+52	; 0x34
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	2c f4       	brge	.+10     	; 0x3450 <main+0x1a8a>
		__ticks = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	98 ab       	std	Y+48, r25	; 0x30
    344c:	8f a7       	std	Y+47, r24	; 0x2f
    344e:	3f c0       	rjmp	.+126    	; 0x34ce <main+0x1b08>
	else if (__tmp > 65535)
    3450:	69 a9       	ldd	r22, Y+49	; 0x31
    3452:	7a a9       	ldd	r23, Y+50	; 0x32
    3454:	8b a9       	ldd	r24, Y+51	; 0x33
    3456:	9c a9       	ldd	r25, Y+52	; 0x34
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	3f ef       	ldi	r19, 0xFF	; 255
    345c:	4f e7       	ldi	r20, 0x7F	; 127
    345e:	57 e4       	ldi	r21, 0x47	; 71
    3460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3464:	18 16       	cp	r1, r24
    3466:	4c f5       	brge	.+82     	; 0x34ba <main+0x1af4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3468:	6d a9       	ldd	r22, Y+53	; 0x35
    346a:	7e a9       	ldd	r23, Y+54	; 0x36
    346c:	8f a9       	ldd	r24, Y+55	; 0x37
    346e:	98 ad       	ldd	r25, Y+56	; 0x38
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e2       	ldi	r20, 0x20	; 32
    3476:	51 e4       	ldi	r21, 0x41	; 65
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	98 ab       	std	Y+48, r25	; 0x30
    348e:	8f a7       	std	Y+47, r24	; 0x2f
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <main+0x1aea>
    3492:	88 ec       	ldi	r24, 0xC8	; 200
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9e a7       	std	Y+46, r25	; 0x2e
    3498:	8d a7       	std	Y+45, r24	; 0x2d
    349a:	8d a5       	ldd	r24, Y+45	; 0x2d
    349c:	9e a5       	ldd	r25, Y+46	; 0x2e
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x1ad8>
    34a2:	9e a7       	std	Y+46, r25	; 0x2e
    34a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a8:	98 a9       	ldd	r25, Y+48	; 0x30
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	98 ab       	std	Y+48, r25	; 0x30
    34ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	69 f7       	brne	.-38     	; 0x3492 <main+0x1acc>
    34b8:	14 c0       	rjmp	.+40     	; 0x34e2 <main+0x1b1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ba:	69 a9       	ldd	r22, Y+49	; 0x31
    34bc:	7a a9       	ldd	r23, Y+50	; 0x32
    34be:	8b a9       	ldd	r24, Y+51	; 0x33
    34c0:	9c a9       	ldd	r25, Y+52	; 0x34
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	98 ab       	std	Y+48, r25	; 0x30
    34cc:	8f a7       	std	Y+47, r24	; 0x2f
    34ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d0:	98 a9       	ldd	r25, Y+48	; 0x30
    34d2:	9c a7       	std	Y+44, r25	; 0x2c
    34d4:	8b a7       	std	Y+43, r24	; 0x2b
    34d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <main+0x1b14>
    34de:	9c a7       	std	Y+44, r25	; 0x2c
    34e0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    34e2:	88 e0       	ldi	r24, 0x08	; 8
    34e4:	61 e0       	ldi	r22, 0x01	; 1
    34e6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("ENTER");
    34ea:	83 e7       	ldi	r24, 0x73	; 115
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	aa e7       	ldi	r26, 0x7A	; 122
    34f8:	b3 e4       	ldi	r27, 0x43	; 67
    34fa:	8f a3       	std	Y+39, r24	; 0x27
    34fc:	98 a7       	std	Y+40, r25	; 0x28
    34fe:	a9 a7       	std	Y+41, r26	; 0x29
    3500:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	6f a1       	ldd	r22, Y+39	; 0x27
    3504:	78 a5       	ldd	r23, Y+40	; 0x28
    3506:	89 a5       	ldd	r24, Y+41	; 0x29
    3508:	9a a5       	ldd	r25, Y+42	; 0x2a
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	4a ef       	ldi	r20, 0xFA	; 250
    3510:	54 e4       	ldi	r21, 0x44	; 68
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	8b a3       	std	Y+35, r24	; 0x23
    351c:	9c a3       	std	Y+36, r25	; 0x24
    351e:	ad a3       	std	Y+37, r26	; 0x25
    3520:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3522:	6b a1       	ldd	r22, Y+35	; 0x23
    3524:	7c a1       	ldd	r23, Y+36	; 0x24
    3526:	8d a1       	ldd	r24, Y+37	; 0x25
    3528:	9e a1       	ldd	r25, Y+38	; 0x26
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	2c f4       	brge	.+10     	; 0x3544 <main+0x1b7e>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9a a3       	std	Y+34, r25	; 0x22
    3540:	89 a3       	std	Y+33, r24	; 0x21
    3542:	3f c0       	rjmp	.+126    	; 0x35c2 <main+0x1bfc>
	else if (__tmp > 65535)
    3544:	6b a1       	ldd	r22, Y+35	; 0x23
    3546:	7c a1       	ldd	r23, Y+36	; 0x24
    3548:	8d a1       	ldd	r24, Y+37	; 0x25
    354a:	9e a1       	ldd	r25, Y+38	; 0x26
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	4c f5       	brge	.+82     	; 0x35ae <main+0x1be8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	6f a1       	ldd	r22, Y+39	; 0x27
    355e:	78 a5       	ldd	r23, Y+40	; 0x28
    3560:	89 a5       	ldd	r24, Y+41	; 0x29
    3562:	9a a5       	ldd	r25, Y+42	; 0x2a
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9a a3       	std	Y+34, r25	; 0x22
    3582:	89 a3       	std	Y+33, r24	; 0x21
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <main+0x1bde>
    3586:	88 ec       	ldi	r24, 0xC8	; 200
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	98 a3       	std	Y+32, r25	; 0x20
    358c:	8f 8f       	std	Y+31, r24	; 0x1f
    358e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3590:	98 a1       	ldd	r25, Y+32	; 0x20
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <main+0x1bcc>
    3596:	98 a3       	std	Y+32, r25	; 0x20
    3598:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	89 a1       	ldd	r24, Y+33	; 0x21
    359c:	9a a1       	ldd	r25, Y+34	; 0x22
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	89 a1       	ldd	r24, Y+33	; 0x21
    35a6:	9a a1       	ldd	r25, Y+34	; 0x22
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <main+0x1bc0>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <main+0x1c10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	6b a1       	ldd	r22, Y+35	; 0x23
    35b0:	7c a1       	ldd	r23, Y+36	; 0x24
    35b2:	8d a1       	ldd	r24, Y+37	; 0x25
    35b4:	9e a1       	ldd	r25, Y+38	; 0x26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9a a3       	std	Y+34, r25	; 0x22
    35c0:	89 a3       	std	Y+33, r24	; 0x21
    35c2:	89 a1       	ldd	r24, Y+33	; 0x21
    35c4:	9a a1       	ldd	r25, Y+34	; 0x22
    35c6:	9e 8f       	std	Y+30, r25	; 0x1e
    35c8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <main+0x1c08>
    35d2:	9e 8f       	std	Y+30, r25	; 0x1e
    35d4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(250);
				CLCD_voidGoToXY (8u,1u);
    35d6:	88 e0       	ldi	r24, 0x08	; 8
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("     ");
    35de:	8b e6       	ldi	r24, 0x6B	; 107
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	aa e7       	ldi	r26, 0x7A	; 122
    35ec:	b3 e4       	ldi	r27, 0x43	; 67
    35ee:	89 8f       	std	Y+25, r24	; 0x19
    35f0:	9a 8f       	std	Y+26, r25	; 0x1a
    35f2:	ab 8f       	std	Y+27, r26	; 0x1b
    35f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	69 8d       	ldd	r22, Y+25	; 0x19
    35f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8d 8b       	std	Y+21, r24	; 0x15
    3610:	9e 8b       	std	Y+22, r25	; 0x16
    3612:	af 8b       	std	Y+23, r26	; 0x17
    3614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3616:	6d 89       	ldd	r22, Y+21	; 0x15
    3618:	7e 89       	ldd	r23, Y+22	; 0x16
    361a:	8f 89       	ldd	r24, Y+23	; 0x17
    361c:	98 8d       	ldd	r25, Y+24	; 0x18
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <main+0x1c72>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <main+0x1cf0>
	else if (__tmp > 65535)
    3638:	6d 89       	ldd	r22, Y+21	; 0x15
    363a:	7e 89       	ldd	r23, Y+22	; 0x16
    363c:	8f 89       	ldd	r24, Y+23	; 0x17
    363e:	98 8d       	ldd	r25, Y+24	; 0x18
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <main+0x1cdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	69 8d       	ldd	r22, Y+25	; 0x19
    3652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <main+0x1cd2>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9a 8b       	std	Y+18, r25	; 0x12
    3680:	89 8b       	std	Y+17, r24	; 0x11
    3682:	89 89       	ldd	r24, Y+17	; 0x11
    3684:	9a 89       	ldd	r25, Y+18	; 0x12
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <main+0x1cc0>
    368a:	9a 8b       	std	Y+18, r25	; 0x12
    368c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8b 89       	ldd	r24, Y+19	; 0x13
    3690:	9c 89       	ldd	r25, Y+20	; 0x14
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9c 8b       	std	Y+20, r25	; 0x14
    3696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <main+0x1cb4>
    36a0:	03 c1       	rjmp	.+518    	; 0x38a8 <main+0x1ee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6d 89       	ldd	r22, Y+21	; 0x15
    36a4:	7e 89       	ldd	r23, Y+22	; 0x16
    36a6:	8f 89       	ldd	r24, Y+23	; 0x17
    36a8:	98 8d       	ldd	r25, Y+24	; 0x18
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9c 8b       	std	Y+20, r25	; 0x14
    36b4:	8b 8b       	std	Y+19, r24	; 0x13
    36b6:	8b 89       	ldd	r24, Y+19	; 0x13
    36b8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ba:	98 8b       	std	Y+16, r25	; 0x10
    36bc:	8f 87       	std	Y+15, r24	; 0x0f
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	98 89       	ldd	r25, Y+16	; 0x10
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <main+0x1cfc>
    36c6:	98 8b       	std	Y+16, r25	; 0x10
    36c8:	8f 87       	std	Y+15, r24	; 0x0f
    36ca:	ee c0       	rjmp	.+476    	; 0x38a8 <main+0x1ee2>
				_delay_ms(250);
				break;

				case 2:
					CLCD_voidGoToXY (2u,1u);
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	61 e0       	ldi	r22, 0x01	; 1
    36d0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
					CLCD_u8SendString (" ");
    36d4:	81 e7       	ldi	r24, 0x71	; 113
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
					Local_u8Xpos++;
    36dc:	de 01       	movw	r26, r28
    36de:	a0 50       	subi	r26, 0x00	; 0
    36e0:	bf 4f       	sbci	r27, 0xFF	; 255
    36e2:	fe 01       	movw	r30, r28
    36e4:	e0 50       	subi	r30, 0x00	; 0
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 5f       	subi	r24, 0xFF	; 255
    36ec:	8c 93       	st	X, r24
					CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    36ee:	fe 01       	movw	r30, r28
    36f0:	e0 50       	subi	r30, 0x00	; 0
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	de 01       	movw	r26, r28
    36f6:	a3 50       	subi	r26, 0x03	; 3
    36f8:	bf 4f       	sbci	r27, 0xFF	; 255
    36fa:	80 81       	ld	r24, Z
    36fc:	6c 91       	ld	r22, X
    36fe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
    3702:	d2 c0       	rjmp	.+420    	; 0x38a8 <main+0x1ee2>

					break;
				case 3:
					CLCD_voidSendData ('=');
    3704:	8d e3       	ldi	r24, 0x3D	; 61
    3706:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>

					Local_u8Xpos++;
    370a:	de 01       	movw	r26, r28
    370c:	a0 50       	subi	r26, 0x00	; 0
    370e:	bf 4f       	sbci	r27, 0xFF	; 255
    3710:	fe 01       	movw	r30, r28
    3712:	e0 50       	subi	r30, 0x00	; 0
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	8c 93       	st	X, r24
					CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);break;
    371c:	9e 01       	movw	r18, r28
    371e:	2f 5f       	subi	r18, 0xFF	; 255
    3720:	3e 4f       	sbci	r19, 0xFE	; 254
    3722:	fe 01       	movw	r30, r28
    3724:	e0 50       	subi	r30, 0x00	; 0
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	de 01       	movw	r26, r28
    372a:	a1 50       	subi	r26, 0x01	; 1
    372c:	bf 4f       	sbci	r27, 0xFF	; 255
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	b9 01       	movw	r22, r18
    3732:	40 81       	ld	r20, Z
    3734:	2c 91       	ld	r18, X
    3736:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_u8WriteSpecialCharacter>
    373a:	b6 c0       	rjmp	.+364    	; 0x38a8 <main+0x1ee2>
				case 4:CLCD_voidGoToXY (4u,0u);
    373c:	84 e0       	ldi	r24, 0x04	; 4
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString ("         ");
    3744:	89 e7       	ldi	r24, 0x79	; 121
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
				CLCD_voidGoToXY (Local_u8Xpos,Local_u8DDRAMYPos);
    374c:	fe 01       	movw	r30, r28
    374e:	e0 50       	subi	r30, 0x00	; 0
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	de 01       	movw	r26, r28
    3754:	a3 50       	subi	r26, 0x03	; 3
    3756:	bf 4f       	sbci	r27, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	6c 91       	ld	r22, X
    375c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>

				 CLCD_voidCalc();
    3760:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <CLCD_voidCalc>
				if(Local_s8Iterator1==3)
    3764:	80 91 a4 00 	lds	r24, 0x00A4
    3768:	83 30       	cpi	r24, 0x03	; 3
    376a:	61 f0       	breq	.+24     	; 0x3784 <main+0x1dbe>
				{
					//do nothing
				}
				else
				{
					CLCD_voidSendNumber ( Local_s32Result);
    376c:	80 91 a0 00 	lds	r24, 0x00A0
    3770:	90 91 a1 00 	lds	r25, 0x00A1
    3774:	a0 91 a2 00 	lds	r26, 0x00A2
    3778:	b0 91 a3 00 	lds	r27, 0x00A3
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 59 07 	call	0xeb2	; 0xeb2 <CLCD_voidSendNumber>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	aa ef       	ldi	r26, 0xFA	; 250
    378a:	b3 e4       	ldi	r27, 0x43	; 67
    378c:	8b 87       	std	Y+11, r24	; 0x0b
    378e:	9c 87       	std	Y+12, r25	; 0x0c
    3790:	ad 87       	std	Y+13, r26	; 0x0d
    3792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3794:	6b 85       	ldd	r22, Y+11	; 0x0b
    3796:	7c 85       	ldd	r23, Y+12	; 0x0c
    3798:	8d 85       	ldd	r24, Y+13	; 0x0d
    379a:	9e 85       	ldd	r25, Y+14	; 0x0e
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	4a ef       	ldi	r20, 0xFA	; 250
    37a2:	54 e4       	ldi	r21, 0x44	; 68
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8f 83       	std	Y+7, r24	; 0x07
    37ae:	98 87       	std	Y+8, r25	; 0x08
    37b0:	a9 87       	std	Y+9, r26	; 0x09
    37b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b4:	6f 81       	ldd	r22, Y+7	; 0x07
    37b6:	78 85       	ldd	r23, Y+8	; 0x08
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e8       	ldi	r20, 0x80	; 128
    37c2:	5f e3       	ldi	r21, 0x3F	; 63
    37c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c8:	88 23       	and	r24, r24
    37ca:	2c f4       	brge	.+10     	; 0x37d6 <main+0x1e10>
		__ticks = 1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	3f c0       	rjmp	.+126    	; 0x3854 <main+0x1e8e>
	else if (__tmp > 65535)
    37d6:	6f 81       	ldd	r22, Y+7	; 0x07
    37d8:	78 85       	ldd	r23, Y+8	; 0x08
    37da:	89 85       	ldd	r24, Y+9	; 0x09
    37dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	4c f5       	brge	.+82     	; 0x3840 <main+0x1e7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e2       	ldi	r20, 0x20	; 32
    37fc:	51 e4       	ldi	r21, 0x41	; 65
    37fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	0f c0       	rjmp	.+30     	; 0x3836 <main+0x1e70>
    3818:	88 ec       	ldi	r24, 0xC8	; 200
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	9c 83       	std	Y+4, r25	; 0x04
    381e:	8b 83       	std	Y+3, r24	; 0x03
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <main+0x1e5e>
    3828:	9c 83       	std	Y+4, r25	; 0x04
    382a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	9e 83       	std	Y+6, r25	; 0x06
    3834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3836:	8d 81       	ldd	r24, Y+5	; 0x05
    3838:	9e 81       	ldd	r25, Y+6	; 0x06
    383a:	00 97       	sbiw	r24, 0x00	; 0
    383c:	69 f7       	brne	.-38     	; 0x3818 <main+0x1e52>
    383e:	14 c0       	rjmp	.+40     	; 0x3868 <main+0x1ea2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3840:	6f 81       	ldd	r22, Y+7	; 0x07
    3842:	78 85       	ldd	r23, Y+8	; 0x08
    3844:	89 85       	ldd	r24, Y+9	; 0x09
    3846:	9a 85       	ldd	r25, Y+10	; 0x0a
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	9e 81       	ldd	r25, Y+6	; 0x06
    3858:	9a 83       	std	Y+2, r25	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <main+0x1e9a>
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
				}
				_delay_ms(500);


				CLCD_voidGoToXY (4u,1u);
    3868:	84 e0       	ldi	r24, 0x04	; 4
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidGoToXY>
				CLCD_u8SendString (" ");
    3870:	81 e7       	ldi	r24, 0x71	; 113
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
				Local_u8Xpos=0;
    3878:	fe 01       	movw	r30, r28
    387a:	e0 50       	subi	r30, 0x00	; 0
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	10 82       	st	Z, r1
				Local_u8Ypos=1;
    3880:	fe 01       	movw	r30, r28
    3882:	e1 50       	subi	r30, 0x01	; 1
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	80 83       	st	Z, r24
				CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);
    388a:	9e 01       	movw	r18, r28
    388c:	2f 5f       	subi	r18, 0xFF	; 255
    388e:	3e 4f       	sbci	r19, 0xFE	; 254
    3890:	fe 01       	movw	r30, r28
    3892:	e0 50       	subi	r30, 0x00	; 0
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	de 01       	movw	r26, r28
    3898:	a1 50       	subi	r26, 0x01	; 1
    389a:	bf 4f       	sbci	r27, 0xFF	; 255
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	b9 01       	movw	r22, r18
    38a0:	40 81       	ld	r20, Z
    38a2:	2c 91       	ld	r18, X
    38a4:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter(0u,Local_u8MyPattern,Local_u8Xpos,Local_u8Ypos);




		while(Local_u8Xpos<=4)
    38a8:	fe 01       	movw	r30, r28
    38aa:	e0 50       	subi	r30, 0x00	; 0
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	85 30       	cpi	r24, 0x05	; 5
    38b2:	10 f4       	brcc	.+4      	; 0x38b8 <main+0x1ef2>
    38b4:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <main+0x142>
    38b8:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <main+0xea>

000038bc <__mulsi3>:
    38bc:	62 9f       	mul	r22, r18
    38be:	d0 01       	movw	r26, r0
    38c0:	73 9f       	mul	r23, r19
    38c2:	f0 01       	movw	r30, r0
    38c4:	82 9f       	mul	r24, r18
    38c6:	e0 0d       	add	r30, r0
    38c8:	f1 1d       	adc	r31, r1
    38ca:	64 9f       	mul	r22, r20
    38cc:	e0 0d       	add	r30, r0
    38ce:	f1 1d       	adc	r31, r1
    38d0:	92 9f       	mul	r25, r18
    38d2:	f0 0d       	add	r31, r0
    38d4:	83 9f       	mul	r24, r19
    38d6:	f0 0d       	add	r31, r0
    38d8:	74 9f       	mul	r23, r20
    38da:	f0 0d       	add	r31, r0
    38dc:	65 9f       	mul	r22, r21
    38de:	f0 0d       	add	r31, r0
    38e0:	99 27       	eor	r25, r25
    38e2:	72 9f       	mul	r23, r18
    38e4:	b0 0d       	add	r27, r0
    38e6:	e1 1d       	adc	r30, r1
    38e8:	f9 1f       	adc	r31, r25
    38ea:	63 9f       	mul	r22, r19
    38ec:	b0 0d       	add	r27, r0
    38ee:	e1 1d       	adc	r30, r1
    38f0:	f9 1f       	adc	r31, r25
    38f2:	bd 01       	movw	r22, r26
    38f4:	cf 01       	movw	r24, r30
    38f6:	11 24       	eor	r1, r1
    38f8:	08 95       	ret

000038fa <__divmodsi4>:
    38fa:	97 fb       	bst	r25, 7
    38fc:	09 2e       	mov	r0, r25
    38fe:	05 26       	eor	r0, r21
    3900:	0e d0       	rcall	.+28     	; 0x391e <__divmodsi4_neg1>
    3902:	57 fd       	sbrc	r21, 7
    3904:	04 d0       	rcall	.+8      	; 0x390e <__divmodsi4_neg2>
    3906:	14 d0       	rcall	.+40     	; 0x3930 <__udivmodsi4>
    3908:	0a d0       	rcall	.+20     	; 0x391e <__divmodsi4_neg1>
    390a:	00 1c       	adc	r0, r0
    390c:	38 f4       	brcc	.+14     	; 0x391c <__divmodsi4_exit>

0000390e <__divmodsi4_neg2>:
    390e:	50 95       	com	r21
    3910:	40 95       	com	r20
    3912:	30 95       	com	r19
    3914:	21 95       	neg	r18
    3916:	3f 4f       	sbci	r19, 0xFF	; 255
    3918:	4f 4f       	sbci	r20, 0xFF	; 255
    391a:	5f 4f       	sbci	r21, 0xFF	; 255

0000391c <__divmodsi4_exit>:
    391c:	08 95       	ret

0000391e <__divmodsi4_neg1>:
    391e:	f6 f7       	brtc	.-4      	; 0x391c <__divmodsi4_exit>
    3920:	90 95       	com	r25
    3922:	80 95       	com	r24
    3924:	70 95       	com	r23
    3926:	61 95       	neg	r22
    3928:	7f 4f       	sbci	r23, 0xFF	; 255
    392a:	8f 4f       	sbci	r24, 0xFF	; 255
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	08 95       	ret

00003930 <__udivmodsi4>:
    3930:	a1 e2       	ldi	r26, 0x21	; 33
    3932:	1a 2e       	mov	r1, r26
    3934:	aa 1b       	sub	r26, r26
    3936:	bb 1b       	sub	r27, r27
    3938:	fd 01       	movw	r30, r26
    393a:	0d c0       	rjmp	.+26     	; 0x3956 <__udivmodsi4_ep>

0000393c <__udivmodsi4_loop>:
    393c:	aa 1f       	adc	r26, r26
    393e:	bb 1f       	adc	r27, r27
    3940:	ee 1f       	adc	r30, r30
    3942:	ff 1f       	adc	r31, r31
    3944:	a2 17       	cp	r26, r18
    3946:	b3 07       	cpc	r27, r19
    3948:	e4 07       	cpc	r30, r20
    394a:	f5 07       	cpc	r31, r21
    394c:	20 f0       	brcs	.+8      	; 0x3956 <__udivmodsi4_ep>
    394e:	a2 1b       	sub	r26, r18
    3950:	b3 0b       	sbc	r27, r19
    3952:	e4 0b       	sbc	r30, r20
    3954:	f5 0b       	sbc	r31, r21

00003956 <__udivmodsi4_ep>:
    3956:	66 1f       	adc	r22, r22
    3958:	77 1f       	adc	r23, r23
    395a:	88 1f       	adc	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	1a 94       	dec	r1
    3960:	69 f7       	brne	.-38     	; 0x393c <__udivmodsi4_loop>
    3962:	60 95       	com	r22
    3964:	70 95       	com	r23
    3966:	80 95       	com	r24
    3968:	90 95       	com	r25
    396a:	9b 01       	movw	r18, r22
    396c:	ac 01       	movw	r20, r24
    396e:	bd 01       	movw	r22, r26
    3970:	cf 01       	movw	r24, r30
    3972:	08 95       	ret

00003974 <__prologue_saves__>:
    3974:	2f 92       	push	r2
    3976:	3f 92       	push	r3
    3978:	4f 92       	push	r4
    397a:	5f 92       	push	r5
    397c:	6f 92       	push	r6
    397e:	7f 92       	push	r7
    3980:	8f 92       	push	r8
    3982:	9f 92       	push	r9
    3984:	af 92       	push	r10
    3986:	bf 92       	push	r11
    3988:	cf 92       	push	r12
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	ca 1b       	sub	r28, r26
    399e:	db 0b       	sbc	r29, r27
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	09 94       	ijmp

000039ac <__epilogue_restores__>:
    39ac:	2a 88       	ldd	r2, Y+18	; 0x12
    39ae:	39 88       	ldd	r3, Y+17	; 0x11
    39b0:	48 88       	ldd	r4, Y+16	; 0x10
    39b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    39b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    39b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    39bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    39be:	b9 84       	ldd	r11, Y+9	; 0x09
    39c0:	c8 84       	ldd	r12, Y+8	; 0x08
    39c2:	df 80       	ldd	r13, Y+7	; 0x07
    39c4:	ee 80       	ldd	r14, Y+6	; 0x06
    39c6:	fd 80       	ldd	r15, Y+5	; 0x05
    39c8:	0c 81       	ldd	r16, Y+4	; 0x04
    39ca:	1b 81       	ldd	r17, Y+3	; 0x03
    39cc:	aa 81       	ldd	r26, Y+2	; 0x02
    39ce:	b9 81       	ldd	r27, Y+1	; 0x01
    39d0:	ce 0f       	add	r28, r30
    39d2:	d1 1d       	adc	r29, r1
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	ed 01       	movw	r28, r26
    39e0:	08 95       	ret

000039e2 <_exit>:
    39e2:	f8 94       	cli

000039e4 <__stop_program>:
    39e4:	ff cf       	rjmp	.-2      	; 0x39e4 <__stop_program>
